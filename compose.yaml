services:
  api:
    image: ${CI_REGISTRY_IMAGE}:${DEPLOY_IMAGE_TAG}
    container_name: ${COMPOSE_PROJECT_NAME}-api
    command: ["node", "/app/packages/fasset-indexer-api/dist/src/main"]
    environment:
      DB_TYPE: postgres
      DB_HOST: db-postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      API_ROOT_PATH: ${API_ROOT_PATH:-}
    restart: unless-stopped
    ports:
      - "${API_PORT}:3000"
    depends_on:
      db-postgres:
        condition: service_healthy
  core: &core-svc
    image: ${CI_REGISTRY_IMAGE}:${DEPLOY_IMAGE_TAG}
    container_name: ${COMPOSE_PROJECT_NAME}-core
    command: ["node", "/app/packages/fasset-indexer-core/dist/src/run/run-indexer.js"]
    environment:
      DB_TYPE: postgres
      DB_HOST: db-postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      CHAIN: ${CHAIN}
      RPC_URL: ${RPC_URL}
      RPC_API_KEY: ${RPC_API_KEY}
    restart: unless-stopped
    depends_on:
      db-postgres:
        condition: service_healthy
  watchdog:
    <<: *core-svc
    container_name: ${COMPOSE_PROJECT_NAME}-watchdog
    command: ["node", "/app/packages/fasset-indexer-core/dist/src/run/run-watchdog.js"]
  db-postgres:
    image: postgres:16
    container_name: ${COMPOSE_PROJECT_NAME}-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - 'db_data:/var/lib/postgresql/data'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 20s
      retries: 10

volumes:
  db_data: