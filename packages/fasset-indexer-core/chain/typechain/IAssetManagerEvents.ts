/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "./common";

export declare namespace IAssetManagerEvents {
  export type AgentVaultCreationDataStruct = {
    collateralPool: AddressLike;
    collateralPoolToken: AddressLike;
    underlyingAddress: string;
    vaultCollateralToken: AddressLike;
    poolWNatToken: AddressLike;
    feeBIPS: BigNumberish;
    poolFeeShareBIPS: BigNumberish;
    mintingVaultCollateralRatioBIPS: BigNumberish;
    mintingPoolCollateralRatioBIPS: BigNumberish;
    buyFAssetByAgentFactorBIPS: BigNumberish;
    poolExitCollateralRatioBIPS: BigNumberish;
    poolTopupCollateralRatioBIPS: BigNumberish;
    poolTopupTokenPriceFactorBIPS: BigNumberish;
  };

  export type AgentVaultCreationDataStructOutput = [
    collateralPool: string,
    collateralPoolToken: string,
    underlyingAddress: string,
    vaultCollateralToken: string,
    poolWNatToken: string,
    feeBIPS: bigint,
    poolFeeShareBIPS: bigint,
    mintingVaultCollateralRatioBIPS: bigint,
    mintingPoolCollateralRatioBIPS: bigint,
    buyFAssetByAgentFactorBIPS: bigint,
    poolExitCollateralRatioBIPS: bigint,
    poolTopupCollateralRatioBIPS: bigint,
    poolTopupTokenPriceFactorBIPS: bigint
  ] & {
    collateralPool: string;
    collateralPoolToken: string;
    underlyingAddress: string;
    vaultCollateralToken: string;
    poolWNatToken: string;
    feeBIPS: bigint;
    poolFeeShareBIPS: bigint;
    mintingVaultCollateralRatioBIPS: bigint;
    mintingPoolCollateralRatioBIPS: bigint;
    buyFAssetByAgentFactorBIPS: bigint;
    poolExitCollateralRatioBIPS: bigint;
    poolTopupCollateralRatioBIPS: bigint;
    poolTopupTokenPriceFactorBIPS: bigint;
  };
}

export interface IAssetManagerEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AgentAvailable"
      | "AgentCollateralTypeChanged"
      | "AgentDestroyAnnounced"
      | "AgentDestroyed"
      | "AgentInCCB"
      | "AgentSettingChangeAnnounced"
      | "AgentSettingChanged"
      | "AgentVaultCreated"
      | "AvailableAgentExitAnnounced"
      | "AvailableAgentExited"
      | "CollateralRatiosChanged"
      | "CollateralReservationDeleted"
      | "CollateralReserved"
      | "CollateralTypeAdded"
      | "CollateralTypeDeprecated"
      | "ContractChanged"
      | "CurrentUnderlyingBlockUpdated"
      | "DuplicatePaymentConfirmed"
      | "DustChanged"
      | "EmergencyPauseCanceled"
      | "EmergencyPauseTriggered"
      | "FullLiquidationStarted"
      | "IllegalPaymentConfirmed"
      | "LiquidationEnded"
      | "LiquidationPerformed"
      | "LiquidationStarted"
      | "MintingExecuted"
      | "MintingPaymentDefault"
      | "PoolTokenRedemptionAnnounced"
      | "RedeemedInCollateral"
      | "RedemptionDefault"
      | "RedemptionPaymentBlocked"
      | "RedemptionPaymentFailed"
      | "RedemptionPerformed"
      | "RedemptionRejected"
      | "RedemptionRequestIncomplete"
      | "RedemptionRequested"
      | "RedemptionTicketCreated"
      | "RedemptionTicketDeleted"
      | "RedemptionTicketUpdated"
      | "SelfClose"
      | "SettingArrayChanged"
      | "SettingChanged"
      | "UnderlyingBalanceChanged"
      | "UnderlyingBalanceTooLow"
      | "UnderlyingBalanceToppedUp"
      | "UnderlyingWithdrawalAnnounced"
      | "UnderlyingWithdrawalCancelled"
      | "UnderlyingWithdrawalConfirmed"
      | "VaultCollateralWithdrawalAnnounced"
  ): EventFragment;
}

export namespace AgentAvailableEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    feeBIPS: BigNumberish,
    mintingVaultCollateralRatioBIPS: BigNumberish,
    mintingPoolCollateralRatioBIPS: BigNumberish,
    freeCollateralLots: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    feeBIPS: bigint,
    mintingVaultCollateralRatioBIPS: bigint,
    mintingPoolCollateralRatioBIPS: bigint,
    freeCollateralLots: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    feeBIPS: bigint;
    mintingVaultCollateralRatioBIPS: bigint;
    mintingPoolCollateralRatioBIPS: bigint;
    freeCollateralLots: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentCollateralTypeChangedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    collateralClass: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    agentVault: string,
    collateralClass: bigint,
    token: string
  ];
  export interface OutputObject {
    agentVault: string;
    collateralClass: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentDestroyAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    destroyAllowedAt: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, destroyAllowedAt: bigint];
  export interface OutputObject {
    agentVault: string;
    destroyAllowedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentDestroyedEvent {
  export type InputTuple = [agentVault: AddressLike];
  export type OutputTuple = [agentVault: string];
  export interface OutputObject {
    agentVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentInCCBEvent {
  export type InputTuple = [agentVault: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [agentVault: string, timestamp: bigint];
  export interface OutputObject {
    agentVault: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentSettingChangeAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    name: string,
    value: BigNumberish,
    validAt: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    name: string,
    value: bigint,
    validAt: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    name: string;
    value: bigint;
    validAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentSettingChangedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    name: string,
    value: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, name: string, value: bigint];
  export interface OutputObject {
    agentVault: string;
    name: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentVaultCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    agentVault: AddressLike,
    creationData: IAssetManagerEvents.AgentVaultCreationDataStruct
  ];
  export type OutputTuple = [
    owner: string,
    agentVault: string,
    creationData: IAssetManagerEvents.AgentVaultCreationDataStructOutput
  ];
  export interface OutputObject {
    owner: string;
    agentVault: string;
    creationData: IAssetManagerEvents.AgentVaultCreationDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvailableAgentExitAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    exitAllowedAt: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, exitAllowedAt: bigint];
  export interface OutputObject {
    agentVault: string;
    exitAllowedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvailableAgentExitedEvent {
  export type InputTuple = [agentVault: AddressLike];
  export type OutputTuple = [agentVault: string];
  export interface OutputObject {
    agentVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralRatiosChangedEvent {
  export type InputTuple = [
    collateralClass: BigNumberish,
    collateralToken: AddressLike,
    minCollateralRatioBIPS: BigNumberish,
    ccbMinCollateralRatioBIPS: BigNumberish,
    safetyMinCollateralRatioBIPS: BigNumberish
  ];
  export type OutputTuple = [
    collateralClass: bigint,
    collateralToken: string,
    minCollateralRatioBIPS: bigint,
    ccbMinCollateralRatioBIPS: bigint,
    safetyMinCollateralRatioBIPS: bigint
  ];
  export interface OutputObject {
    collateralClass: bigint;
    collateralToken: string;
    minCollateralRatioBIPS: bigint;
    ccbMinCollateralRatioBIPS: bigint;
    safetyMinCollateralRatioBIPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralReservationDeletedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    minter: AddressLike,
    collateralReservationId: BigNumberish,
    reservedAmountUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    minter: string,
    collateralReservationId: bigint,
    reservedAmountUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    minter: string;
    collateralReservationId: bigint;
    reservedAmountUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralReservedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    minter: AddressLike,
    collateralReservationId: BigNumberish,
    valueUBA: BigNumberish,
    feeUBA: BigNumberish,
    firstUnderlyingBlock: BigNumberish,
    lastUnderlyingBlock: BigNumberish,
    lastUnderlyingTimestamp: BigNumberish,
    paymentAddress: string,
    paymentReference: BytesLike,
    executor: AddressLike,
    executorFeeNatWei: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    minter: string,
    collateralReservationId: bigint,
    valueUBA: bigint,
    feeUBA: bigint,
    firstUnderlyingBlock: bigint,
    lastUnderlyingBlock: bigint,
    lastUnderlyingTimestamp: bigint,
    paymentAddress: string,
    paymentReference: string,
    executor: string,
    executorFeeNatWei: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    minter: string;
    collateralReservationId: bigint;
    valueUBA: bigint;
    feeUBA: bigint;
    firstUnderlyingBlock: bigint;
    lastUnderlyingBlock: bigint;
    lastUnderlyingTimestamp: bigint;
    paymentAddress: string;
    paymentReference: string;
    executor: string;
    executorFeeNatWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralTypeAddedEvent {
  export type InputTuple = [
    collateralClass: BigNumberish,
    token: AddressLike,
    decimals: BigNumberish,
    directPricePair: boolean,
    assetFtsoSymbol: string,
    tokenFtsoSymbol: string,
    minCollateralRatioBIPS: BigNumberish,
    ccbMinCollateralRatioBIPS: BigNumberish,
    safetyMinCollateralRatioBIPS: BigNumberish
  ];
  export type OutputTuple = [
    collateralClass: bigint,
    token: string,
    decimals: bigint,
    directPricePair: boolean,
    assetFtsoSymbol: string,
    tokenFtsoSymbol: string,
    minCollateralRatioBIPS: bigint,
    ccbMinCollateralRatioBIPS: bigint,
    safetyMinCollateralRatioBIPS: bigint
  ];
  export interface OutputObject {
    collateralClass: bigint;
    token: string;
    decimals: bigint;
    directPricePair: boolean;
    assetFtsoSymbol: string;
    tokenFtsoSymbol: string;
    minCollateralRatioBIPS: bigint;
    ccbMinCollateralRatioBIPS: bigint;
    safetyMinCollateralRatioBIPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralTypeDeprecatedEvent {
  export type InputTuple = [
    collateralClass: BigNumberish,
    collateralToken: AddressLike,
    validUntil: BigNumberish
  ];
  export type OutputTuple = [
    collateralClass: bigint,
    collateralToken: string,
    validUntil: bigint
  ];
  export interface OutputObject {
    collateralClass: bigint;
    collateralToken: string;
    validUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractChangedEvent {
  export type InputTuple = [name: string, value: AddressLike];
  export type OutputTuple = [name: string, value: string];
  export interface OutputObject {
    name: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurrentUnderlyingBlockUpdatedEvent {
  export type InputTuple = [
    underlyingBlockNumber: BigNumberish,
    underlyingBlockTimestamp: BigNumberish,
    updatedAt: BigNumberish
  ];
  export type OutputTuple = [
    underlyingBlockNumber: bigint,
    underlyingBlockTimestamp: bigint,
    updatedAt: bigint
  ];
  export interface OutputObject {
    underlyingBlockNumber: bigint;
    underlyingBlockTimestamp: bigint;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DuplicatePaymentConfirmedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transactionHash1: BytesLike,
    transactionHash2: BytesLike
  ];
  export type OutputTuple = [
    agentVault: string,
    transactionHash1: string,
    transactionHash2: string
  ];
  export interface OutputObject {
    agentVault: string;
    transactionHash1: string;
    transactionHash2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DustChangedEvent {
  export type InputTuple = [agentVault: AddressLike, dustUBA: BigNumberish];
  export type OutputTuple = [agentVault: string, dustUBA: bigint];
  export interface OutputObject {
    agentVault: string;
    dustUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseCanceledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseTriggeredEvent {
  export type InputTuple = [pausedUntil: BigNumberish];
  export type OutputTuple = [pausedUntil: bigint];
  export interface OutputObject {
    pausedUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FullLiquidationStartedEvent {
  export type InputTuple = [agentVault: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [agentVault: string, timestamp: bigint];
  export interface OutputObject {
    agentVault: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IllegalPaymentConfirmedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transactionHash: BytesLike
  ];
  export type OutputTuple = [agentVault: string, transactionHash: string];
  export interface OutputObject {
    agentVault: string;
    transactionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEndedEvent {
  export type InputTuple = [agentVault: AddressLike];
  export type OutputTuple = [agentVault: string];
  export interface OutputObject {
    agentVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationPerformedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    liquidator: AddressLike,
    valueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    liquidator: string,
    valueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    liquidator: string;
    valueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationStartedEvent {
  export type InputTuple = [agentVault: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [agentVault: string, timestamp: bigint];
  export interface OutputObject {
    agentVault: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintingExecutedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    collateralReservationId: BigNumberish,
    mintedAmountUBA: BigNumberish,
    agentFeeUBA: BigNumberish,
    poolFeeUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    collateralReservationId: bigint,
    mintedAmountUBA: bigint,
    agentFeeUBA: bigint,
    poolFeeUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    collateralReservationId: bigint;
    mintedAmountUBA: bigint;
    agentFeeUBA: bigint;
    poolFeeUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintingPaymentDefaultEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    minter: AddressLike,
    collateralReservationId: BigNumberish,
    reservedAmountUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    minter: string,
    collateralReservationId: bigint,
    reservedAmountUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    minter: string;
    collateralReservationId: bigint;
    reservedAmountUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolTokenRedemptionAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    amountWei: BigNumberish,
    withdrawalAllowedAt: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    amountWei: bigint,
    withdrawalAllowedAt: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    amountWei: bigint;
    withdrawalAllowedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedInCollateralEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    redemptionAmountUBA: BigNumberish,
    paidVaultCollateralWei: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    redemptionAmountUBA: bigint,
    paidVaultCollateralWei: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    redemptionAmountUBA: bigint;
    paidVaultCollateralWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionDefaultEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    redemptionAmountUBA: BigNumberish,
    redeemedVaultCollateralWei: BigNumberish,
    redeemedPoolCollateralWei: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    redemptionAmountUBA: bigint,
    redeemedVaultCollateralWei: bigint,
    redeemedPoolCollateralWei: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    redemptionAmountUBA: bigint;
    redeemedVaultCollateralWei: bigint;
    redeemedPoolCollateralWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionPaymentBlockedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    transactionHash: BytesLike,
    redemptionAmountUBA: BigNumberish,
    spentUnderlyingUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    transactionHash: string,
    redemptionAmountUBA: bigint,
    spentUnderlyingUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    transactionHash: string;
    redemptionAmountUBA: bigint;
    spentUnderlyingUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionPaymentFailedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    transactionHash: BytesLike,
    spentUnderlyingUBA: BigNumberish,
    failureReason: string
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    transactionHash: string,
    spentUnderlyingUBA: bigint,
    failureReason: string
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    transactionHash: string;
    spentUnderlyingUBA: bigint;
    failureReason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionPerformedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    transactionHash: BytesLike,
    redemptionAmountUBA: BigNumberish,
    spentUnderlyingUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    transactionHash: string,
    redemptionAmountUBA: bigint,
    spentUnderlyingUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    transactionHash: string;
    redemptionAmountUBA: bigint;
    spentUnderlyingUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionRejectedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    redemptionAmountUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    redemptionAmountUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    redemptionAmountUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionRequestIncompleteEvent {
  export type InputTuple = [redeemer: AddressLike, remainingLots: BigNumberish];
  export type OutputTuple = [redeemer: string, remainingLots: bigint];
  export interface OutputObject {
    redeemer: string;
    remainingLots: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionRequestedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    paymentAddress: string,
    valueUBA: BigNumberish,
    feeUBA: BigNumberish,
    firstUnderlyingBlock: BigNumberish,
    lastUnderlyingBlock: BigNumberish,
    lastUnderlyingTimestamp: BigNumberish,
    paymentReference: BytesLike,
    executor: AddressLike,
    executorFeeNatWei: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    paymentAddress: string,
    valueUBA: bigint,
    feeUBA: bigint,
    firstUnderlyingBlock: bigint,
    lastUnderlyingBlock: bigint,
    lastUnderlyingTimestamp: bigint,
    paymentReference: string,
    executor: string,
    executorFeeNatWei: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    paymentAddress: string;
    valueUBA: bigint;
    feeUBA: bigint;
    firstUnderlyingBlock: bigint;
    lastUnderlyingBlock: bigint;
    lastUnderlyingTimestamp: bigint;
    paymentReference: string;
    executor: string;
    executorFeeNatWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionTicketCreatedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redemptionTicketId: BigNumberish,
    ticketValueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redemptionTicketId: bigint,
    ticketValueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redemptionTicketId: bigint;
    ticketValueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionTicketDeletedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redemptionTicketId: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, redemptionTicketId: bigint];
  export interface OutputObject {
    agentVault: string;
    redemptionTicketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionTicketUpdatedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redemptionTicketId: BigNumberish,
    ticketValueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redemptionTicketId: bigint,
    ticketValueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redemptionTicketId: bigint;
    ticketValueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelfCloseEvent {
  export type InputTuple = [agentVault: AddressLike, valueUBA: BigNumberish];
  export type OutputTuple = [agentVault: string, valueUBA: bigint];
  export interface OutputObject {
    agentVault: string;
    valueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettingArrayChangedEvent {
  export type InputTuple = [name: string, value: BigNumberish[]];
  export type OutputTuple = [name: string, value: bigint[]];
  export interface OutputObject {
    name: string;
    value: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettingChangedEvent {
  export type InputTuple = [name: string, value: BigNumberish];
  export type OutputTuple = [name: string, value: bigint];
  export interface OutputObject {
    name: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingBalanceChangedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    underlyingBalanceUBA: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, underlyingBalanceUBA: bigint];
  export interface OutputObject {
    agentVault: string;
    underlyingBalanceUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingBalanceTooLowEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    balance: BigNumberish,
    requiredBalance: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    balance: bigint,
    requiredBalance: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    balance: bigint;
    requiredBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingBalanceToppedUpEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transactionHash: BytesLike,
    depositedUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    transactionHash: string,
    depositedUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    transactionHash: string;
    depositedUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingWithdrawalAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    announcementId: BigNumberish,
    paymentReference: BytesLike
  ];
  export type OutputTuple = [
    agentVault: string,
    announcementId: bigint,
    paymentReference: string
  ];
  export interface OutputObject {
    agentVault: string;
    announcementId: bigint;
    paymentReference: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingWithdrawalCancelledEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    announcementId: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, announcementId: bigint];
  export interface OutputObject {
    agentVault: string;
    announcementId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingWithdrawalConfirmedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    announcementId: BigNumberish,
    spentUBA: BigNumberish,
    transactionHash: BytesLike
  ];
  export type OutputTuple = [
    agentVault: string,
    announcementId: bigint,
    spentUBA: bigint,
    transactionHash: string
  ];
  export interface OutputObject {
    agentVault: string;
    announcementId: bigint;
    spentUBA: bigint;
    transactionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCollateralWithdrawalAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    amountWei: BigNumberish,
    withdrawalAllowedAt: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    amountWei: bigint,
    withdrawalAllowedAt: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    amountWei: bigint;
    withdrawalAllowedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAssetManagerEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IAssetManagerEvents;
  waitForDeployment(): Promise<this>;

  interface: IAssetManagerEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AgentAvailable"
  ): TypedContractEvent<
    AgentAvailableEvent.InputTuple,
    AgentAvailableEvent.OutputTuple,
    AgentAvailableEvent.OutputObject
  >;
  getEvent(
    key: "AgentCollateralTypeChanged"
  ): TypedContractEvent<
    AgentCollateralTypeChangedEvent.InputTuple,
    AgentCollateralTypeChangedEvent.OutputTuple,
    AgentCollateralTypeChangedEvent.OutputObject
  >;
  getEvent(
    key: "AgentDestroyAnnounced"
  ): TypedContractEvent<
    AgentDestroyAnnouncedEvent.InputTuple,
    AgentDestroyAnnouncedEvent.OutputTuple,
    AgentDestroyAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "AgentDestroyed"
  ): TypedContractEvent<
    AgentDestroyedEvent.InputTuple,
    AgentDestroyedEvent.OutputTuple,
    AgentDestroyedEvent.OutputObject
  >;
  getEvent(
    key: "AgentInCCB"
  ): TypedContractEvent<
    AgentInCCBEvent.InputTuple,
    AgentInCCBEvent.OutputTuple,
    AgentInCCBEvent.OutputObject
  >;
  getEvent(
    key: "AgentSettingChangeAnnounced"
  ): TypedContractEvent<
    AgentSettingChangeAnnouncedEvent.InputTuple,
    AgentSettingChangeAnnouncedEvent.OutputTuple,
    AgentSettingChangeAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "AgentSettingChanged"
  ): TypedContractEvent<
    AgentSettingChangedEvent.InputTuple,
    AgentSettingChangedEvent.OutputTuple,
    AgentSettingChangedEvent.OutputObject
  >;
  getEvent(
    key: "AgentVaultCreated"
  ): TypedContractEvent<
    AgentVaultCreatedEvent.InputTuple,
    AgentVaultCreatedEvent.OutputTuple,
    AgentVaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AvailableAgentExitAnnounced"
  ): TypedContractEvent<
    AvailableAgentExitAnnouncedEvent.InputTuple,
    AvailableAgentExitAnnouncedEvent.OutputTuple,
    AvailableAgentExitAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "AvailableAgentExited"
  ): TypedContractEvent<
    AvailableAgentExitedEvent.InputTuple,
    AvailableAgentExitedEvent.OutputTuple,
    AvailableAgentExitedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralRatiosChanged"
  ): TypedContractEvent<
    CollateralRatiosChangedEvent.InputTuple,
    CollateralRatiosChangedEvent.OutputTuple,
    CollateralRatiosChangedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralReservationDeleted"
  ): TypedContractEvent<
    CollateralReservationDeletedEvent.InputTuple,
    CollateralReservationDeletedEvent.OutputTuple,
    CollateralReservationDeletedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralReserved"
  ): TypedContractEvent<
    CollateralReservedEvent.InputTuple,
    CollateralReservedEvent.OutputTuple,
    CollateralReservedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralTypeAdded"
  ): TypedContractEvent<
    CollateralTypeAddedEvent.InputTuple,
    CollateralTypeAddedEvent.OutputTuple,
    CollateralTypeAddedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralTypeDeprecated"
  ): TypedContractEvent<
    CollateralTypeDeprecatedEvent.InputTuple,
    CollateralTypeDeprecatedEvent.OutputTuple,
    CollateralTypeDeprecatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractChanged"
  ): TypedContractEvent<
    ContractChangedEvent.InputTuple,
    ContractChangedEvent.OutputTuple,
    ContractChangedEvent.OutputObject
  >;
  getEvent(
    key: "CurrentUnderlyingBlockUpdated"
  ): TypedContractEvent<
    CurrentUnderlyingBlockUpdatedEvent.InputTuple,
    CurrentUnderlyingBlockUpdatedEvent.OutputTuple,
    CurrentUnderlyingBlockUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DuplicatePaymentConfirmed"
  ): TypedContractEvent<
    DuplicatePaymentConfirmedEvent.InputTuple,
    DuplicatePaymentConfirmedEvent.OutputTuple,
    DuplicatePaymentConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "DustChanged"
  ): TypedContractEvent<
    DustChangedEvent.InputTuple,
    DustChangedEvent.OutputTuple,
    DustChangedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseCanceled"
  ): TypedContractEvent<
    EmergencyPauseCanceledEvent.InputTuple,
    EmergencyPauseCanceledEvent.OutputTuple,
    EmergencyPauseCanceledEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseTriggered"
  ): TypedContractEvent<
    EmergencyPauseTriggeredEvent.InputTuple,
    EmergencyPauseTriggeredEvent.OutputTuple,
    EmergencyPauseTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "FullLiquidationStarted"
  ): TypedContractEvent<
    FullLiquidationStartedEvent.InputTuple,
    FullLiquidationStartedEvent.OutputTuple,
    FullLiquidationStartedEvent.OutputObject
  >;
  getEvent(
    key: "IllegalPaymentConfirmed"
  ): TypedContractEvent<
    IllegalPaymentConfirmedEvent.InputTuple,
    IllegalPaymentConfirmedEvent.OutputTuple,
    IllegalPaymentConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationEnded"
  ): TypedContractEvent<
    LiquidationEndedEvent.InputTuple,
    LiquidationEndedEvent.OutputTuple,
    LiquidationEndedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationPerformed"
  ): TypedContractEvent<
    LiquidationPerformedEvent.InputTuple,
    LiquidationPerformedEvent.OutputTuple,
    LiquidationPerformedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationStarted"
  ): TypedContractEvent<
    LiquidationStartedEvent.InputTuple,
    LiquidationStartedEvent.OutputTuple,
    LiquidationStartedEvent.OutputObject
  >;
  getEvent(
    key: "MintingExecuted"
  ): TypedContractEvent<
    MintingExecutedEvent.InputTuple,
    MintingExecutedEvent.OutputTuple,
    MintingExecutedEvent.OutputObject
  >;
  getEvent(
    key: "MintingPaymentDefault"
  ): TypedContractEvent<
    MintingPaymentDefaultEvent.InputTuple,
    MintingPaymentDefaultEvent.OutputTuple,
    MintingPaymentDefaultEvent.OutputObject
  >;
  getEvent(
    key: "PoolTokenRedemptionAnnounced"
  ): TypedContractEvent<
    PoolTokenRedemptionAnnouncedEvent.InputTuple,
    PoolTokenRedemptionAnnouncedEvent.OutputTuple,
    PoolTokenRedemptionAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "RedeemedInCollateral"
  ): TypedContractEvent<
    RedeemedInCollateralEvent.InputTuple,
    RedeemedInCollateralEvent.OutputTuple,
    RedeemedInCollateralEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionDefault"
  ): TypedContractEvent<
    RedemptionDefaultEvent.InputTuple,
    RedemptionDefaultEvent.OutputTuple,
    RedemptionDefaultEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionPaymentBlocked"
  ): TypedContractEvent<
    RedemptionPaymentBlockedEvent.InputTuple,
    RedemptionPaymentBlockedEvent.OutputTuple,
    RedemptionPaymentBlockedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionPaymentFailed"
  ): TypedContractEvent<
    RedemptionPaymentFailedEvent.InputTuple,
    RedemptionPaymentFailedEvent.OutputTuple,
    RedemptionPaymentFailedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionPerformed"
  ): TypedContractEvent<
    RedemptionPerformedEvent.InputTuple,
    RedemptionPerformedEvent.OutputTuple,
    RedemptionPerformedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionRejected"
  ): TypedContractEvent<
    RedemptionRejectedEvent.InputTuple,
    RedemptionRejectedEvent.OutputTuple,
    RedemptionRejectedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionRequestIncomplete"
  ): TypedContractEvent<
    RedemptionRequestIncompleteEvent.InputTuple,
    RedemptionRequestIncompleteEvent.OutputTuple,
    RedemptionRequestIncompleteEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionRequested"
  ): TypedContractEvent<
    RedemptionRequestedEvent.InputTuple,
    RedemptionRequestedEvent.OutputTuple,
    RedemptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionTicketCreated"
  ): TypedContractEvent<
    RedemptionTicketCreatedEvent.InputTuple,
    RedemptionTicketCreatedEvent.OutputTuple,
    RedemptionTicketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionTicketDeleted"
  ): TypedContractEvent<
    RedemptionTicketDeletedEvent.InputTuple,
    RedemptionTicketDeletedEvent.OutputTuple,
    RedemptionTicketDeletedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionTicketUpdated"
  ): TypedContractEvent<
    RedemptionTicketUpdatedEvent.InputTuple,
    RedemptionTicketUpdatedEvent.OutputTuple,
    RedemptionTicketUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SelfClose"
  ): TypedContractEvent<
    SelfCloseEvent.InputTuple,
    SelfCloseEvent.OutputTuple,
    SelfCloseEvent.OutputObject
  >;
  getEvent(
    key: "SettingArrayChanged"
  ): TypedContractEvent<
    SettingArrayChangedEvent.InputTuple,
    SettingArrayChangedEvent.OutputTuple,
    SettingArrayChangedEvent.OutputObject
  >;
  getEvent(
    key: "SettingChanged"
  ): TypedContractEvent<
    SettingChangedEvent.InputTuple,
    SettingChangedEvent.OutputTuple,
    SettingChangedEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingBalanceChanged"
  ): TypedContractEvent<
    UnderlyingBalanceChangedEvent.InputTuple,
    UnderlyingBalanceChangedEvent.OutputTuple,
    UnderlyingBalanceChangedEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingBalanceTooLow"
  ): TypedContractEvent<
    UnderlyingBalanceTooLowEvent.InputTuple,
    UnderlyingBalanceTooLowEvent.OutputTuple,
    UnderlyingBalanceTooLowEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingBalanceToppedUp"
  ): TypedContractEvent<
    UnderlyingBalanceToppedUpEvent.InputTuple,
    UnderlyingBalanceToppedUpEvent.OutputTuple,
    UnderlyingBalanceToppedUpEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingWithdrawalAnnounced"
  ): TypedContractEvent<
    UnderlyingWithdrawalAnnouncedEvent.InputTuple,
    UnderlyingWithdrawalAnnouncedEvent.OutputTuple,
    UnderlyingWithdrawalAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingWithdrawalCancelled"
  ): TypedContractEvent<
    UnderlyingWithdrawalCancelledEvent.InputTuple,
    UnderlyingWithdrawalCancelledEvent.OutputTuple,
    UnderlyingWithdrawalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingWithdrawalConfirmed"
  ): TypedContractEvent<
    UnderlyingWithdrawalConfirmedEvent.InputTuple,
    UnderlyingWithdrawalConfirmedEvent.OutputTuple,
    UnderlyingWithdrawalConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "VaultCollateralWithdrawalAnnounced"
  ): TypedContractEvent<
    VaultCollateralWithdrawalAnnouncedEvent.InputTuple,
    VaultCollateralWithdrawalAnnouncedEvent.OutputTuple,
    VaultCollateralWithdrawalAnnouncedEvent.OutputObject
  >;

  filters: {
    "AgentAvailable(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AgentAvailableEvent.InputTuple,
      AgentAvailableEvent.OutputTuple,
      AgentAvailableEvent.OutputObject
    >;
    AgentAvailable: TypedContractEvent<
      AgentAvailableEvent.InputTuple,
      AgentAvailableEvent.OutputTuple,
      AgentAvailableEvent.OutputObject
    >;

    "AgentCollateralTypeChanged(address,uint8,address)": TypedContractEvent<
      AgentCollateralTypeChangedEvent.InputTuple,
      AgentCollateralTypeChangedEvent.OutputTuple,
      AgentCollateralTypeChangedEvent.OutputObject
    >;
    AgentCollateralTypeChanged: TypedContractEvent<
      AgentCollateralTypeChangedEvent.InputTuple,
      AgentCollateralTypeChangedEvent.OutputTuple,
      AgentCollateralTypeChangedEvent.OutputObject
    >;

    "AgentDestroyAnnounced(address,uint256)": TypedContractEvent<
      AgentDestroyAnnouncedEvent.InputTuple,
      AgentDestroyAnnouncedEvent.OutputTuple,
      AgentDestroyAnnouncedEvent.OutputObject
    >;
    AgentDestroyAnnounced: TypedContractEvent<
      AgentDestroyAnnouncedEvent.InputTuple,
      AgentDestroyAnnouncedEvent.OutputTuple,
      AgentDestroyAnnouncedEvent.OutputObject
    >;

    "AgentDestroyed(address)": TypedContractEvent<
      AgentDestroyedEvent.InputTuple,
      AgentDestroyedEvent.OutputTuple,
      AgentDestroyedEvent.OutputObject
    >;
    AgentDestroyed: TypedContractEvent<
      AgentDestroyedEvent.InputTuple,
      AgentDestroyedEvent.OutputTuple,
      AgentDestroyedEvent.OutputObject
    >;

    "AgentInCCB(address,uint256)": TypedContractEvent<
      AgentInCCBEvent.InputTuple,
      AgentInCCBEvent.OutputTuple,
      AgentInCCBEvent.OutputObject
    >;
    AgentInCCB: TypedContractEvent<
      AgentInCCBEvent.InputTuple,
      AgentInCCBEvent.OutputTuple,
      AgentInCCBEvent.OutputObject
    >;

    "AgentSettingChangeAnnounced(address,string,uint256,uint256)": TypedContractEvent<
      AgentSettingChangeAnnouncedEvent.InputTuple,
      AgentSettingChangeAnnouncedEvent.OutputTuple,
      AgentSettingChangeAnnouncedEvent.OutputObject
    >;
    AgentSettingChangeAnnounced: TypedContractEvent<
      AgentSettingChangeAnnouncedEvent.InputTuple,
      AgentSettingChangeAnnouncedEvent.OutputTuple,
      AgentSettingChangeAnnouncedEvent.OutputObject
    >;

    "AgentSettingChanged(address,string,uint256)": TypedContractEvent<
      AgentSettingChangedEvent.InputTuple,
      AgentSettingChangedEvent.OutputTuple,
      AgentSettingChangedEvent.OutputObject
    >;
    AgentSettingChanged: TypedContractEvent<
      AgentSettingChangedEvent.InputTuple,
      AgentSettingChangedEvent.OutputTuple,
      AgentSettingChangedEvent.OutputObject
    >;

    "AgentVaultCreated(address,address,tuple)": TypedContractEvent<
      AgentVaultCreatedEvent.InputTuple,
      AgentVaultCreatedEvent.OutputTuple,
      AgentVaultCreatedEvent.OutputObject
    >;
    AgentVaultCreated: TypedContractEvent<
      AgentVaultCreatedEvent.InputTuple,
      AgentVaultCreatedEvent.OutputTuple,
      AgentVaultCreatedEvent.OutputObject
    >;

    "AvailableAgentExitAnnounced(address,uint256)": TypedContractEvent<
      AvailableAgentExitAnnouncedEvent.InputTuple,
      AvailableAgentExitAnnouncedEvent.OutputTuple,
      AvailableAgentExitAnnouncedEvent.OutputObject
    >;
    AvailableAgentExitAnnounced: TypedContractEvent<
      AvailableAgentExitAnnouncedEvent.InputTuple,
      AvailableAgentExitAnnouncedEvent.OutputTuple,
      AvailableAgentExitAnnouncedEvent.OutputObject
    >;

    "AvailableAgentExited(address)": TypedContractEvent<
      AvailableAgentExitedEvent.InputTuple,
      AvailableAgentExitedEvent.OutputTuple,
      AvailableAgentExitedEvent.OutputObject
    >;
    AvailableAgentExited: TypedContractEvent<
      AvailableAgentExitedEvent.InputTuple,
      AvailableAgentExitedEvent.OutputTuple,
      AvailableAgentExitedEvent.OutputObject
    >;

    "CollateralRatiosChanged(uint8,address,uint256,uint256,uint256)": TypedContractEvent<
      CollateralRatiosChangedEvent.InputTuple,
      CollateralRatiosChangedEvent.OutputTuple,
      CollateralRatiosChangedEvent.OutputObject
    >;
    CollateralRatiosChanged: TypedContractEvent<
      CollateralRatiosChangedEvent.InputTuple,
      CollateralRatiosChangedEvent.OutputTuple,
      CollateralRatiosChangedEvent.OutputObject
    >;

    "CollateralReservationDeleted(address,address,uint256,uint256)": TypedContractEvent<
      CollateralReservationDeletedEvent.InputTuple,
      CollateralReservationDeletedEvent.OutputTuple,
      CollateralReservationDeletedEvent.OutputObject
    >;
    CollateralReservationDeleted: TypedContractEvent<
      CollateralReservationDeletedEvent.InputTuple,
      CollateralReservationDeletedEvent.OutputTuple,
      CollateralReservationDeletedEvent.OutputObject
    >;

    "CollateralReserved(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,bytes32,address,uint256)": TypedContractEvent<
      CollateralReservedEvent.InputTuple,
      CollateralReservedEvent.OutputTuple,
      CollateralReservedEvent.OutputObject
    >;
    CollateralReserved: TypedContractEvent<
      CollateralReservedEvent.InputTuple,
      CollateralReservedEvent.OutputTuple,
      CollateralReservedEvent.OutputObject
    >;

    "CollateralTypeAdded(uint8,address,uint256,bool,string,string,uint256,uint256,uint256)": TypedContractEvent<
      CollateralTypeAddedEvent.InputTuple,
      CollateralTypeAddedEvent.OutputTuple,
      CollateralTypeAddedEvent.OutputObject
    >;
    CollateralTypeAdded: TypedContractEvent<
      CollateralTypeAddedEvent.InputTuple,
      CollateralTypeAddedEvent.OutputTuple,
      CollateralTypeAddedEvent.OutputObject
    >;

    "CollateralTypeDeprecated(uint8,address,uint256)": TypedContractEvent<
      CollateralTypeDeprecatedEvent.InputTuple,
      CollateralTypeDeprecatedEvent.OutputTuple,
      CollateralTypeDeprecatedEvent.OutputObject
    >;
    CollateralTypeDeprecated: TypedContractEvent<
      CollateralTypeDeprecatedEvent.InputTuple,
      CollateralTypeDeprecatedEvent.OutputTuple,
      CollateralTypeDeprecatedEvent.OutputObject
    >;

    "ContractChanged(string,address)": TypedContractEvent<
      ContractChangedEvent.InputTuple,
      ContractChangedEvent.OutputTuple,
      ContractChangedEvent.OutputObject
    >;
    ContractChanged: TypedContractEvent<
      ContractChangedEvent.InputTuple,
      ContractChangedEvent.OutputTuple,
      ContractChangedEvent.OutputObject
    >;

    "CurrentUnderlyingBlockUpdated(uint256,uint256,uint256)": TypedContractEvent<
      CurrentUnderlyingBlockUpdatedEvent.InputTuple,
      CurrentUnderlyingBlockUpdatedEvent.OutputTuple,
      CurrentUnderlyingBlockUpdatedEvent.OutputObject
    >;
    CurrentUnderlyingBlockUpdated: TypedContractEvent<
      CurrentUnderlyingBlockUpdatedEvent.InputTuple,
      CurrentUnderlyingBlockUpdatedEvent.OutputTuple,
      CurrentUnderlyingBlockUpdatedEvent.OutputObject
    >;

    "DuplicatePaymentConfirmed(address,bytes32,bytes32)": TypedContractEvent<
      DuplicatePaymentConfirmedEvent.InputTuple,
      DuplicatePaymentConfirmedEvent.OutputTuple,
      DuplicatePaymentConfirmedEvent.OutputObject
    >;
    DuplicatePaymentConfirmed: TypedContractEvent<
      DuplicatePaymentConfirmedEvent.InputTuple,
      DuplicatePaymentConfirmedEvent.OutputTuple,
      DuplicatePaymentConfirmedEvent.OutputObject
    >;

    "DustChanged(address,uint256)": TypedContractEvent<
      DustChangedEvent.InputTuple,
      DustChangedEvent.OutputTuple,
      DustChangedEvent.OutputObject
    >;
    DustChanged: TypedContractEvent<
      DustChangedEvent.InputTuple,
      DustChangedEvent.OutputTuple,
      DustChangedEvent.OutputObject
    >;

    "EmergencyPauseCanceled()": TypedContractEvent<
      EmergencyPauseCanceledEvent.InputTuple,
      EmergencyPauseCanceledEvent.OutputTuple,
      EmergencyPauseCanceledEvent.OutputObject
    >;
    EmergencyPauseCanceled: TypedContractEvent<
      EmergencyPauseCanceledEvent.InputTuple,
      EmergencyPauseCanceledEvent.OutputTuple,
      EmergencyPauseCanceledEvent.OutputObject
    >;

    "EmergencyPauseTriggered(uint256)": TypedContractEvent<
      EmergencyPauseTriggeredEvent.InputTuple,
      EmergencyPauseTriggeredEvent.OutputTuple,
      EmergencyPauseTriggeredEvent.OutputObject
    >;
    EmergencyPauseTriggered: TypedContractEvent<
      EmergencyPauseTriggeredEvent.InputTuple,
      EmergencyPauseTriggeredEvent.OutputTuple,
      EmergencyPauseTriggeredEvent.OutputObject
    >;

    "FullLiquidationStarted(address,uint256)": TypedContractEvent<
      FullLiquidationStartedEvent.InputTuple,
      FullLiquidationStartedEvent.OutputTuple,
      FullLiquidationStartedEvent.OutputObject
    >;
    FullLiquidationStarted: TypedContractEvent<
      FullLiquidationStartedEvent.InputTuple,
      FullLiquidationStartedEvent.OutputTuple,
      FullLiquidationStartedEvent.OutputObject
    >;

    "IllegalPaymentConfirmed(address,bytes32)": TypedContractEvent<
      IllegalPaymentConfirmedEvent.InputTuple,
      IllegalPaymentConfirmedEvent.OutputTuple,
      IllegalPaymentConfirmedEvent.OutputObject
    >;
    IllegalPaymentConfirmed: TypedContractEvent<
      IllegalPaymentConfirmedEvent.InputTuple,
      IllegalPaymentConfirmedEvent.OutputTuple,
      IllegalPaymentConfirmedEvent.OutputObject
    >;

    "LiquidationEnded(address)": TypedContractEvent<
      LiquidationEndedEvent.InputTuple,
      LiquidationEndedEvent.OutputTuple,
      LiquidationEndedEvent.OutputObject
    >;
    LiquidationEnded: TypedContractEvent<
      LiquidationEndedEvent.InputTuple,
      LiquidationEndedEvent.OutputTuple,
      LiquidationEndedEvent.OutputObject
    >;

    "LiquidationPerformed(address,address,uint256)": TypedContractEvent<
      LiquidationPerformedEvent.InputTuple,
      LiquidationPerformedEvent.OutputTuple,
      LiquidationPerformedEvent.OutputObject
    >;
    LiquidationPerformed: TypedContractEvent<
      LiquidationPerformedEvent.InputTuple,
      LiquidationPerformedEvent.OutputTuple,
      LiquidationPerformedEvent.OutputObject
    >;

    "LiquidationStarted(address,uint256)": TypedContractEvent<
      LiquidationStartedEvent.InputTuple,
      LiquidationStartedEvent.OutputTuple,
      LiquidationStartedEvent.OutputObject
    >;
    LiquidationStarted: TypedContractEvent<
      LiquidationStartedEvent.InputTuple,
      LiquidationStartedEvent.OutputTuple,
      LiquidationStartedEvent.OutputObject
    >;

    "MintingExecuted(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MintingExecutedEvent.InputTuple,
      MintingExecutedEvent.OutputTuple,
      MintingExecutedEvent.OutputObject
    >;
    MintingExecuted: TypedContractEvent<
      MintingExecutedEvent.InputTuple,
      MintingExecutedEvent.OutputTuple,
      MintingExecutedEvent.OutputObject
    >;

    "MintingPaymentDefault(address,address,uint256,uint256)": TypedContractEvent<
      MintingPaymentDefaultEvent.InputTuple,
      MintingPaymentDefaultEvent.OutputTuple,
      MintingPaymentDefaultEvent.OutputObject
    >;
    MintingPaymentDefault: TypedContractEvent<
      MintingPaymentDefaultEvent.InputTuple,
      MintingPaymentDefaultEvent.OutputTuple,
      MintingPaymentDefaultEvent.OutputObject
    >;

    "PoolTokenRedemptionAnnounced(address,uint256,uint256)": TypedContractEvent<
      PoolTokenRedemptionAnnouncedEvent.InputTuple,
      PoolTokenRedemptionAnnouncedEvent.OutputTuple,
      PoolTokenRedemptionAnnouncedEvent.OutputObject
    >;
    PoolTokenRedemptionAnnounced: TypedContractEvent<
      PoolTokenRedemptionAnnouncedEvent.InputTuple,
      PoolTokenRedemptionAnnouncedEvent.OutputTuple,
      PoolTokenRedemptionAnnouncedEvent.OutputObject
    >;

    "RedeemedInCollateral(address,address,uint256,uint256)": TypedContractEvent<
      RedeemedInCollateralEvent.InputTuple,
      RedeemedInCollateralEvent.OutputTuple,
      RedeemedInCollateralEvent.OutputObject
    >;
    RedeemedInCollateral: TypedContractEvent<
      RedeemedInCollateralEvent.InputTuple,
      RedeemedInCollateralEvent.OutputTuple,
      RedeemedInCollateralEvent.OutputObject
    >;

    "RedemptionDefault(address,address,uint64,uint256,uint256,uint256)": TypedContractEvent<
      RedemptionDefaultEvent.InputTuple,
      RedemptionDefaultEvent.OutputTuple,
      RedemptionDefaultEvent.OutputObject
    >;
    RedemptionDefault: TypedContractEvent<
      RedemptionDefaultEvent.InputTuple,
      RedemptionDefaultEvent.OutputTuple,
      RedemptionDefaultEvent.OutputObject
    >;

    "RedemptionPaymentBlocked(address,address,uint64,bytes32,uint256,int256)": TypedContractEvent<
      RedemptionPaymentBlockedEvent.InputTuple,
      RedemptionPaymentBlockedEvent.OutputTuple,
      RedemptionPaymentBlockedEvent.OutputObject
    >;
    RedemptionPaymentBlocked: TypedContractEvent<
      RedemptionPaymentBlockedEvent.InputTuple,
      RedemptionPaymentBlockedEvent.OutputTuple,
      RedemptionPaymentBlockedEvent.OutputObject
    >;

    "RedemptionPaymentFailed(address,address,uint64,bytes32,int256,string)": TypedContractEvent<
      RedemptionPaymentFailedEvent.InputTuple,
      RedemptionPaymentFailedEvent.OutputTuple,
      RedemptionPaymentFailedEvent.OutputObject
    >;
    RedemptionPaymentFailed: TypedContractEvent<
      RedemptionPaymentFailedEvent.InputTuple,
      RedemptionPaymentFailedEvent.OutputTuple,
      RedemptionPaymentFailedEvent.OutputObject
    >;

    "RedemptionPerformed(address,address,uint64,bytes32,uint256,int256)": TypedContractEvent<
      RedemptionPerformedEvent.InputTuple,
      RedemptionPerformedEvent.OutputTuple,
      RedemptionPerformedEvent.OutputObject
    >;
    RedemptionPerformed: TypedContractEvent<
      RedemptionPerformedEvent.InputTuple,
      RedemptionPerformedEvent.OutputTuple,
      RedemptionPerformedEvent.OutputObject
    >;

    "RedemptionRejected(address,address,uint64,uint256)": TypedContractEvent<
      RedemptionRejectedEvent.InputTuple,
      RedemptionRejectedEvent.OutputTuple,
      RedemptionRejectedEvent.OutputObject
    >;
    RedemptionRejected: TypedContractEvent<
      RedemptionRejectedEvent.InputTuple,
      RedemptionRejectedEvent.OutputTuple,
      RedemptionRejectedEvent.OutputObject
    >;

    "RedemptionRequestIncomplete(address,uint256)": TypedContractEvent<
      RedemptionRequestIncompleteEvent.InputTuple,
      RedemptionRequestIncompleteEvent.OutputTuple,
      RedemptionRequestIncompleteEvent.OutputObject
    >;
    RedemptionRequestIncomplete: TypedContractEvent<
      RedemptionRequestIncompleteEvent.InputTuple,
      RedemptionRequestIncompleteEvent.OutputTuple,
      RedemptionRequestIncompleteEvent.OutputObject
    >;

    "RedemptionRequested(address,address,uint256,string,uint256,uint256,uint256,uint256,uint256,bytes32,address,uint256)": TypedContractEvent<
      RedemptionRequestedEvent.InputTuple,
      RedemptionRequestedEvent.OutputTuple,
      RedemptionRequestedEvent.OutputObject
    >;
    RedemptionRequested: TypedContractEvent<
      RedemptionRequestedEvent.InputTuple,
      RedemptionRequestedEvent.OutputTuple,
      RedemptionRequestedEvent.OutputObject
    >;

    "RedemptionTicketCreated(address,uint256,uint256)": TypedContractEvent<
      RedemptionTicketCreatedEvent.InputTuple,
      RedemptionTicketCreatedEvent.OutputTuple,
      RedemptionTicketCreatedEvent.OutputObject
    >;
    RedemptionTicketCreated: TypedContractEvent<
      RedemptionTicketCreatedEvent.InputTuple,
      RedemptionTicketCreatedEvent.OutputTuple,
      RedemptionTicketCreatedEvent.OutputObject
    >;

    "RedemptionTicketDeleted(address,uint256)": TypedContractEvent<
      RedemptionTicketDeletedEvent.InputTuple,
      RedemptionTicketDeletedEvent.OutputTuple,
      RedemptionTicketDeletedEvent.OutputObject
    >;
    RedemptionTicketDeleted: TypedContractEvent<
      RedemptionTicketDeletedEvent.InputTuple,
      RedemptionTicketDeletedEvent.OutputTuple,
      RedemptionTicketDeletedEvent.OutputObject
    >;

    "RedemptionTicketUpdated(address,uint256,uint256)": TypedContractEvent<
      RedemptionTicketUpdatedEvent.InputTuple,
      RedemptionTicketUpdatedEvent.OutputTuple,
      RedemptionTicketUpdatedEvent.OutputObject
    >;
    RedemptionTicketUpdated: TypedContractEvent<
      RedemptionTicketUpdatedEvent.InputTuple,
      RedemptionTicketUpdatedEvent.OutputTuple,
      RedemptionTicketUpdatedEvent.OutputObject
    >;

    "SelfClose(address,uint256)": TypedContractEvent<
      SelfCloseEvent.InputTuple,
      SelfCloseEvent.OutputTuple,
      SelfCloseEvent.OutputObject
    >;
    SelfClose: TypedContractEvent<
      SelfCloseEvent.InputTuple,
      SelfCloseEvent.OutputTuple,
      SelfCloseEvent.OutputObject
    >;

    "SettingArrayChanged(string,uint256[])": TypedContractEvent<
      SettingArrayChangedEvent.InputTuple,
      SettingArrayChangedEvent.OutputTuple,
      SettingArrayChangedEvent.OutputObject
    >;
    SettingArrayChanged: TypedContractEvent<
      SettingArrayChangedEvent.InputTuple,
      SettingArrayChangedEvent.OutputTuple,
      SettingArrayChangedEvent.OutputObject
    >;

    "SettingChanged(string,uint256)": TypedContractEvent<
      SettingChangedEvent.InputTuple,
      SettingChangedEvent.OutputTuple,
      SettingChangedEvent.OutputObject
    >;
    SettingChanged: TypedContractEvent<
      SettingChangedEvent.InputTuple,
      SettingChangedEvent.OutputTuple,
      SettingChangedEvent.OutputObject
    >;

    "UnderlyingBalanceChanged(address,int256)": TypedContractEvent<
      UnderlyingBalanceChangedEvent.InputTuple,
      UnderlyingBalanceChangedEvent.OutputTuple,
      UnderlyingBalanceChangedEvent.OutputObject
    >;
    UnderlyingBalanceChanged: TypedContractEvent<
      UnderlyingBalanceChangedEvent.InputTuple,
      UnderlyingBalanceChangedEvent.OutputTuple,
      UnderlyingBalanceChangedEvent.OutputObject
    >;

    "UnderlyingBalanceTooLow(address,int256,uint256)": TypedContractEvent<
      UnderlyingBalanceTooLowEvent.InputTuple,
      UnderlyingBalanceTooLowEvent.OutputTuple,
      UnderlyingBalanceTooLowEvent.OutputObject
    >;
    UnderlyingBalanceTooLow: TypedContractEvent<
      UnderlyingBalanceTooLowEvent.InputTuple,
      UnderlyingBalanceTooLowEvent.OutputTuple,
      UnderlyingBalanceTooLowEvent.OutputObject
    >;

    "UnderlyingBalanceToppedUp(address,bytes32,uint256)": TypedContractEvent<
      UnderlyingBalanceToppedUpEvent.InputTuple,
      UnderlyingBalanceToppedUpEvent.OutputTuple,
      UnderlyingBalanceToppedUpEvent.OutputObject
    >;
    UnderlyingBalanceToppedUp: TypedContractEvent<
      UnderlyingBalanceToppedUpEvent.InputTuple,
      UnderlyingBalanceToppedUpEvent.OutputTuple,
      UnderlyingBalanceToppedUpEvent.OutputObject
    >;

    "UnderlyingWithdrawalAnnounced(address,uint64,bytes32)": TypedContractEvent<
      UnderlyingWithdrawalAnnouncedEvent.InputTuple,
      UnderlyingWithdrawalAnnouncedEvent.OutputTuple,
      UnderlyingWithdrawalAnnouncedEvent.OutputObject
    >;
    UnderlyingWithdrawalAnnounced: TypedContractEvent<
      UnderlyingWithdrawalAnnouncedEvent.InputTuple,
      UnderlyingWithdrawalAnnouncedEvent.OutputTuple,
      UnderlyingWithdrawalAnnouncedEvent.OutputObject
    >;

    "UnderlyingWithdrawalCancelled(address,uint64)": TypedContractEvent<
      UnderlyingWithdrawalCancelledEvent.InputTuple,
      UnderlyingWithdrawalCancelledEvent.OutputTuple,
      UnderlyingWithdrawalCancelledEvent.OutputObject
    >;
    UnderlyingWithdrawalCancelled: TypedContractEvent<
      UnderlyingWithdrawalCancelledEvent.InputTuple,
      UnderlyingWithdrawalCancelledEvent.OutputTuple,
      UnderlyingWithdrawalCancelledEvent.OutputObject
    >;

    "UnderlyingWithdrawalConfirmed(address,uint64,int256,bytes32)": TypedContractEvent<
      UnderlyingWithdrawalConfirmedEvent.InputTuple,
      UnderlyingWithdrawalConfirmedEvent.OutputTuple,
      UnderlyingWithdrawalConfirmedEvent.OutputObject
    >;
    UnderlyingWithdrawalConfirmed: TypedContractEvent<
      UnderlyingWithdrawalConfirmedEvent.InputTuple,
      UnderlyingWithdrawalConfirmedEvent.OutputTuple,
      UnderlyingWithdrawalConfirmedEvent.OutputObject
    >;

    "VaultCollateralWithdrawalAnnounced(address,uint256,uint256)": TypedContractEvent<
      VaultCollateralWithdrawalAnnouncedEvent.InputTuple,
      VaultCollateralWithdrawalAnnouncedEvent.OutputTuple,
      VaultCollateralWithdrawalAnnouncedEvent.OutputObject
    >;
    VaultCollateralWithdrawalAnnounced: TypedContractEvent<
      VaultCollateralWithdrawalAnnouncedEvent.InputTuple,
      VaultCollateralWithdrawalAnnouncedEvent.OutputTuple,
      VaultCollateralWithdrawalAnnouncedEvent.OutputObject
    >;
  };
}
