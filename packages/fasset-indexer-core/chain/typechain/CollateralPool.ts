/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CollateralPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agentVault"
      | "claimAirdropDistribution"
      | "claimFtsoRewards"
      | "delegate"
      | "enter"
      | "exit"
      | "exitCollateralRatioBIPS"
      | "fAssetFeeDebtOf"
      | "fAssetFeesOf"
      | "fAssetRequiredForSelfCloseExit"
      | "optOutOfAirdrop"
      | "payFAssetFeeDebt"
      | "poolToken"
      | "selfCloseExit"
      | "topupCollateralRatioBIPS"
      | "topupTokenPriceFactorBIPS"
      | "totalCollateral"
      | "totalFAssetFeeDebt"
      | "totalFAssetFees"
      | "undelegateAll"
      | "withdrawCollateralWhenFAssetTerminated"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Entered" | "Exited" | "IncompleteSelfCloseExit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agentVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAirdropDistribution",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFtsoRewards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enter",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitCollateralRatioBIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fAssetFeeDebtOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fAssetFeesOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fAssetRequiredForSelfCloseExit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optOutOfAirdrop",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payFAssetFeeDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "selfCloseExit",
    values: [BigNumberish, boolean, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "topupCollateralRatioBIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topupTokenPriceFactorBIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFAssetFeeDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFAssetFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateralWhenFAssetTerminated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "agentVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAirdropDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFtsoRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitCollateralRatioBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fAssetFeeDebtOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fAssetFeesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fAssetRequiredForSelfCloseExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optOutOfAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payFAssetFeeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfCloseExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topupCollateralRatioBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topupTokenPriceFactorBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFAssetFeeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFAssetFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateralWhenFAssetTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace EnteredEvent {
  export type InputTuple = [
    tokenHolder: AddressLike,
    amountNatWei: BigNumberish,
    receivedTokensWei: BigNumberish,
    addedFAssetFeesUBA: BigNumberish,
    newFAssetFeeDebt: BigNumberish,
    timelockExpiresAt: BigNumberish
  ];
  export type OutputTuple = [
    tokenHolder: string,
    amountNatWei: bigint,
    receivedTokensWei: bigint,
    addedFAssetFeesUBA: bigint,
    newFAssetFeeDebt: bigint,
    timelockExpiresAt: bigint
  ];
  export interface OutputObject {
    tokenHolder: string;
    amountNatWei: bigint;
    receivedTokensWei: bigint;
    addedFAssetFeesUBA: bigint;
    newFAssetFeeDebt: bigint;
    timelockExpiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitedEvent {
  export type InputTuple = [
    tokenHolder: AddressLike,
    burnedTokensWei: BigNumberish,
    receivedNatWei: BigNumberish,
    receviedFAssetFeesUBA: BigNumberish,
    closedFAssetsUBA: BigNumberish,
    newFAssetFeeDebt: BigNumberish
  ];
  export type OutputTuple = [
    tokenHolder: string,
    burnedTokensWei: bigint,
    receivedNatWei: bigint,
    receviedFAssetFeesUBA: bigint,
    closedFAssetsUBA: bigint,
    newFAssetFeeDebt: bigint
  ];
  export interface OutputObject {
    tokenHolder: string;
    burnedTokensWei: bigint;
    receivedNatWei: bigint;
    receviedFAssetFeesUBA: bigint;
    closedFAssetsUBA: bigint;
    newFAssetFeeDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncompleteSelfCloseExitEvent {
  export type InputTuple = [
    burnedTokensWei: BigNumberish,
    redeemedFAssetUBA: BigNumberish
  ];
  export type OutputTuple = [
    burnedTokensWei: bigint,
    redeemedFAssetUBA: bigint
  ];
  export interface OutputObject {
    burnedTokensWei: bigint;
    redeemedFAssetUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CollateralPool extends BaseContract {
  connect(runner?: ContractRunner | null): CollateralPool;
  waitForDeployment(): Promise<this>;

  interface: CollateralPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentVault: TypedContractMethod<[], [string], "view">;

  claimAirdropDistribution: TypedContractMethod<
    [_distribution: AddressLike, _month: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  claimFtsoRewards: TypedContractMethod<
    [_ftsoRewardManager: AddressLike, _lastRewardEpoch: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  delegate: TypedContractMethod<
    [_to: AddressLike, _bips: BigNumberish],
    [void],
    "nonpayable"
  >;

  enter: TypedContractMethod<
    [_fAssets: BigNumberish, _enterWithFullFassets: boolean],
    [
      [bigint, bigint] & { _receivedTokens: bigint; _timelockExpiresAt: bigint }
    ],
    "payable"
  >;

  exit: TypedContractMethod<
    [_tokenShare: BigNumberish, _exitType: BigNumberish],
    [[bigint, bigint] & { _natShare: bigint; _fassetShare: bigint }],
    "nonpayable"
  >;

  exitCollateralRatioBIPS: TypedContractMethod<[], [bigint], "view">;

  fAssetFeeDebtOf: TypedContractMethod<
    [_account: AddressLike],
    [bigint],
    "view"
  >;

  fAssetFeesOf: TypedContractMethod<[_account: AddressLike], [bigint], "view">;

  fAssetRequiredForSelfCloseExit: TypedContractMethod<
    [_tokenAmountWei: BigNumberish],
    [bigint],
    "view"
  >;

  optOutOfAirdrop: TypedContractMethod<
    [_distribution: AddressLike],
    [void],
    "nonpayable"
  >;

  payFAssetFeeDebt: TypedContractMethod<
    [_fassets: BigNumberish],
    [void],
    "nonpayable"
  >;

  poolToken: TypedContractMethod<[], [string], "view">;

  selfCloseExit: TypedContractMethod<
    [
      _tokenShare: BigNumberish,
      _redeemToCollateral: boolean,
      _redeemerUnderlyingAddress: string,
      _executor: AddressLike
    ],
    [void],
    "payable"
  >;

  topupCollateralRatioBIPS: TypedContractMethod<[], [bigint], "view">;

  topupTokenPriceFactorBIPS: TypedContractMethod<[], [bigint], "view">;

  totalCollateral: TypedContractMethod<[], [bigint], "view">;

  totalFAssetFeeDebt: TypedContractMethod<[], [bigint], "view">;

  totalFAssetFees: TypedContractMethod<[], [bigint], "view">;

  undelegateAll: TypedContractMethod<[], [void], "nonpayable">;

  withdrawCollateralWhenFAssetTerminated: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimAirdropDistribution"
  ): TypedContractMethod<
    [_distribution: AddressLike, _month: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFtsoRewards"
  ): TypedContractMethod<
    [_ftsoRewardManager: AddressLike, _lastRewardEpoch: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<
    [_to: AddressLike, _bips: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enter"
  ): TypedContractMethod<
    [_fAssets: BigNumberish, _enterWithFullFassets: boolean],
    [
      [bigint, bigint] & { _receivedTokens: bigint; _timelockExpiresAt: bigint }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exit"
  ): TypedContractMethod<
    [_tokenShare: BigNumberish, _exitType: BigNumberish],
    [[bigint, bigint] & { _natShare: bigint; _fassetShare: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitCollateralRatioBIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fAssetFeeDebtOf"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "fAssetFeesOf"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "fAssetRequiredForSelfCloseExit"
  ): TypedContractMethod<[_tokenAmountWei: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "optOutOfAirdrop"
  ): TypedContractMethod<[_distribution: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "payFAssetFeeDebt"
  ): TypedContractMethod<[_fassets: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "poolToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "selfCloseExit"
  ): TypedContractMethod<
    [
      _tokenShare: BigNumberish,
      _redeemToCollateral: boolean,
      _redeemerUnderlyingAddress: string,
      _executor: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "topupCollateralRatioBIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "topupTokenPriceFactorBIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFAssetFeeDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFAssetFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "undelegateAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawCollateralWhenFAssetTerminated"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Entered"
  ): TypedContractEvent<
    EnteredEvent.InputTuple,
    EnteredEvent.OutputTuple,
    EnteredEvent.OutputObject
  >;
  getEvent(
    key: "Exited"
  ): TypedContractEvent<
    ExitedEvent.InputTuple,
    ExitedEvent.OutputTuple,
    ExitedEvent.OutputObject
  >;
  getEvent(
    key: "IncompleteSelfCloseExit"
  ): TypedContractEvent<
    IncompleteSelfCloseExitEvent.InputTuple,
    IncompleteSelfCloseExitEvent.OutputTuple,
    IncompleteSelfCloseExitEvent.OutputObject
  >;

  filters: {
    "Entered(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      EnteredEvent.InputTuple,
      EnteredEvent.OutputTuple,
      EnteredEvent.OutputObject
    >;
    Entered: TypedContractEvent<
      EnteredEvent.InputTuple,
      EnteredEvent.OutputTuple,
      EnteredEvent.OutputObject
    >;

    "Exited(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExitedEvent.InputTuple,
      ExitedEvent.OutputTuple,
      ExitedEvent.OutputObject
    >;
    Exited: TypedContractEvent<
      ExitedEvent.InputTuple,
      ExitedEvent.OutputTuple,
      ExitedEvent.OutputObject
    >;

    "IncompleteSelfCloseExit(uint256,uint256)": TypedContractEvent<
      IncompleteSelfCloseExitEvent.InputTuple,
      IncompleteSelfCloseExitEvent.OutputTuple,
      IncompleteSelfCloseExitEvent.OutputObject
    >;
    IncompleteSelfCloseExit: TypedContractEvent<
      IncompleteSelfCloseExitEvent.InputTuple,
      IncompleteSelfCloseExitEvent.OutputTuple,
      IncompleteSelfCloseExitEvent.OutputObject
    >;
  };
}
