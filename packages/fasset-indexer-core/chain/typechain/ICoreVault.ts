/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPayment {
  export type RequestBodyStruct = {
    transactionId: BytesLike;
    inUtxo: BigNumberish;
    utxo: BigNumberish;
  };

  export type RequestBodyStructOutput = [
    transactionId: string,
    inUtxo: bigint,
    utxo: bigint
  ] & { transactionId: string; inUtxo: bigint; utxo: bigint };

  export type ResponseBodyStruct = {
    blockNumber: BigNumberish;
    blockTimestamp: BigNumberish;
    sourceAddressHash: BytesLike;
    sourceAddressesRoot: BytesLike;
    receivingAddressHash: BytesLike;
    intendedReceivingAddressHash: BytesLike;
    spentAmount: BigNumberish;
    intendedSpentAmount: BigNumberish;
    receivedAmount: BigNumberish;
    intendedReceivedAmount: BigNumberish;
    standardPaymentReference: BytesLike;
    oneToOne: boolean;
    status: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    blockNumber: bigint,
    blockTimestamp: bigint,
    sourceAddressHash: string,
    sourceAddressesRoot: string,
    receivingAddressHash: string,
    intendedReceivingAddressHash: string,
    spentAmount: bigint,
    intendedSpentAmount: bigint,
    receivedAmount: bigint,
    intendedReceivedAmount: bigint,
    standardPaymentReference: string,
    oneToOne: boolean,
    status: bigint
  ] & {
    blockNumber: bigint;
    blockTimestamp: bigint;
    sourceAddressHash: string;
    sourceAddressesRoot: string;
    receivingAddressHash: string;
    intendedReceivingAddressHash: string;
    spentAmount: bigint;
    intendedSpentAmount: bigint;
    receivedAmount: bigint;
    intendedReceivedAmount: bigint;
    standardPaymentReference: string;
    oneToOne: boolean;
    status: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IPayment.RequestBodyStruct;
    responseBody: IPayment.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IPayment.RequestBodyStructOutput,
    responseBody: IPayment.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IPayment.RequestBodyStructOutput;
    responseBody: IPayment.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IPayment.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IPayment.ResponseStructOutput
  ] & { merkleProof: string[]; data: IPayment.ResponseStructOutput };
}

export interface ICoreVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelReturnFromCoreVault"
      | "cancelTransferToCoreVault"
      | "confirmReturnFromCoreVault"
      | "maximumTransferToCoreVault"
      | "redeemFromCoreVault"
      | "requestReturnFromCoreVault"
      | "transferToCoreVault"
      | "transferToCoreVaultFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CoreVaultRedemptionRequested"
      | "ReturnFromCoreVaultCancelled"
      | "ReturnFromCoreVaultConfirmed"
      | "ReturnFromCoreVaultRequested"
      | "TransferToCoreVaultCancelled"
      | "TransferToCoreVaultStarted"
      | "TransferToCoreVaultSuccessful"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelReturnFromCoreVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransferToCoreVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmReturnFromCoreVault",
    values: [IPayment.ProofStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumTransferToCoreVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFromCoreVault",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReturnFromCoreVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToCoreVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToCoreVaultFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelReturnFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransferToCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmReturnFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumTransferToCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReturnFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToCoreVaultFee",
    data: BytesLike
  ): Result;
}

export namespace CoreVaultRedemptionRequestedEvent {
  export type InputTuple = [
    redeemer: AddressLike,
    paymentAddress: string,
    valueUBA: BigNumberish,
    feeUBA: BigNumberish
  ];
  export type OutputTuple = [
    redeemer: string,
    paymentAddress: string,
    valueUBA: bigint,
    feeUBA: bigint
  ];
  export interface OutputObject {
    redeemer: string;
    paymentAddress: string;
    valueUBA: bigint;
    feeUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnFromCoreVaultCancelledEvent {
  export type InputTuple = [agentVault: AddressLike, requestId: BigNumberish];
  export type OutputTuple = [agentVault: string, requestId: bigint];
  export interface OutputObject {
    agentVault: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnFromCoreVaultConfirmedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    requestId: BigNumberish,
    receivedUnderlyingUBA: BigNumberish,
    remintedUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    requestId: bigint,
    receivedUnderlyingUBA: bigint,
    remintedUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    requestId: bigint;
    receivedUnderlyingUBA: bigint;
    remintedUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnFromCoreVaultRequestedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    requestId: BigNumberish,
    paymentReference: BytesLike,
    valueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    requestId: bigint,
    paymentReference: string,
    valueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    requestId: bigint;
    paymentReference: string;
    valueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToCoreVaultCancelledEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transferRedemptionRequestId: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    transferRedemptionRequestId: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    transferRedemptionRequestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToCoreVaultStartedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transferRedemptionRequestId: BigNumberish,
    valueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    transferRedemptionRequestId: bigint,
    valueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    transferRedemptionRequestId: bigint;
    valueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToCoreVaultSuccessfulEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transferRedemptionRequestId: BigNumberish,
    valueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    transferRedemptionRequestId: bigint,
    valueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    transferRedemptionRequestId: bigint;
    valueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICoreVault extends BaseContract {
  connect(runner?: ContractRunner | null): ICoreVault;
  waitForDeployment(): Promise<this>;

  interface: ICoreVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelReturnFromCoreVault: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelTransferToCoreVault: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  confirmReturnFromCoreVault: TypedContractMethod<
    [_payment: IPayment.ProofStruct, _agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  maximumTransferToCoreVault: TypedContractMethod<
    [_agentVault: AddressLike],
    [
      [bigint, bigint] & {
        _maximumTransferUBA: bigint;
        _minimumLeftAmountUBA: bigint;
      }
    ],
    "view"
  >;

  redeemFromCoreVault: TypedContractMethod<
    [_lots: BigNumberish, _redeemerUnderlyingAddress: string],
    [void],
    "nonpayable"
  >;

  requestReturnFromCoreVault: TypedContractMethod<
    [_agentVault: AddressLike, _lots: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferToCoreVault: TypedContractMethod<
    [_agentVault: AddressLike, _amountUBA: BigNumberish],
    [void],
    "payable"
  >;

  transferToCoreVaultFee: TypedContractMethod<
    [_amountUBA: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelReturnFromCoreVault"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelTransferToCoreVault"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmReturnFromCoreVault"
  ): TypedContractMethod<
    [_payment: IPayment.ProofStruct, _agentVault: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maximumTransferToCoreVault"
  ): TypedContractMethod<
    [_agentVault: AddressLike],
    [
      [bigint, bigint] & {
        _maximumTransferUBA: bigint;
        _minimumLeftAmountUBA: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "redeemFromCoreVault"
  ): TypedContractMethod<
    [_lots: BigNumberish, _redeemerUnderlyingAddress: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestReturnFromCoreVault"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _lots: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToCoreVault"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _amountUBA: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferToCoreVaultFee"
  ): TypedContractMethod<[_amountUBA: BigNumberish], [bigint], "view">;

  getEvent(
    key: "CoreVaultRedemptionRequested"
  ): TypedContractEvent<
    CoreVaultRedemptionRequestedEvent.InputTuple,
    CoreVaultRedemptionRequestedEvent.OutputTuple,
    CoreVaultRedemptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "ReturnFromCoreVaultCancelled"
  ): TypedContractEvent<
    ReturnFromCoreVaultCancelledEvent.InputTuple,
    ReturnFromCoreVaultCancelledEvent.OutputTuple,
    ReturnFromCoreVaultCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ReturnFromCoreVaultConfirmed"
  ): TypedContractEvent<
    ReturnFromCoreVaultConfirmedEvent.InputTuple,
    ReturnFromCoreVaultConfirmedEvent.OutputTuple,
    ReturnFromCoreVaultConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "ReturnFromCoreVaultRequested"
  ): TypedContractEvent<
    ReturnFromCoreVaultRequestedEvent.InputTuple,
    ReturnFromCoreVaultRequestedEvent.OutputTuple,
    ReturnFromCoreVaultRequestedEvent.OutputObject
  >;
  getEvent(
    key: "TransferToCoreVaultCancelled"
  ): TypedContractEvent<
    TransferToCoreVaultCancelledEvent.InputTuple,
    TransferToCoreVaultCancelledEvent.OutputTuple,
    TransferToCoreVaultCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TransferToCoreVaultStarted"
  ): TypedContractEvent<
    TransferToCoreVaultStartedEvent.InputTuple,
    TransferToCoreVaultStartedEvent.OutputTuple,
    TransferToCoreVaultStartedEvent.OutputObject
  >;
  getEvent(
    key: "TransferToCoreVaultSuccessful"
  ): TypedContractEvent<
    TransferToCoreVaultSuccessfulEvent.InputTuple,
    TransferToCoreVaultSuccessfulEvent.OutputTuple,
    TransferToCoreVaultSuccessfulEvent.OutputObject
  >;

  filters: {
    "CoreVaultRedemptionRequested(address,string,uint256,uint256)": TypedContractEvent<
      CoreVaultRedemptionRequestedEvent.InputTuple,
      CoreVaultRedemptionRequestedEvent.OutputTuple,
      CoreVaultRedemptionRequestedEvent.OutputObject
    >;
    CoreVaultRedemptionRequested: TypedContractEvent<
      CoreVaultRedemptionRequestedEvent.InputTuple,
      CoreVaultRedemptionRequestedEvent.OutputTuple,
      CoreVaultRedemptionRequestedEvent.OutputObject
    >;

    "ReturnFromCoreVaultCancelled(address,uint256)": TypedContractEvent<
      ReturnFromCoreVaultCancelledEvent.InputTuple,
      ReturnFromCoreVaultCancelledEvent.OutputTuple,
      ReturnFromCoreVaultCancelledEvent.OutputObject
    >;
    ReturnFromCoreVaultCancelled: TypedContractEvent<
      ReturnFromCoreVaultCancelledEvent.InputTuple,
      ReturnFromCoreVaultCancelledEvent.OutputTuple,
      ReturnFromCoreVaultCancelledEvent.OutputObject
    >;

    "ReturnFromCoreVaultConfirmed(address,uint256,uint256,uint256)": TypedContractEvent<
      ReturnFromCoreVaultConfirmedEvent.InputTuple,
      ReturnFromCoreVaultConfirmedEvent.OutputTuple,
      ReturnFromCoreVaultConfirmedEvent.OutputObject
    >;
    ReturnFromCoreVaultConfirmed: TypedContractEvent<
      ReturnFromCoreVaultConfirmedEvent.InputTuple,
      ReturnFromCoreVaultConfirmedEvent.OutputTuple,
      ReturnFromCoreVaultConfirmedEvent.OutputObject
    >;

    "ReturnFromCoreVaultRequested(address,uint256,bytes32,uint256)": TypedContractEvent<
      ReturnFromCoreVaultRequestedEvent.InputTuple,
      ReturnFromCoreVaultRequestedEvent.OutputTuple,
      ReturnFromCoreVaultRequestedEvent.OutputObject
    >;
    ReturnFromCoreVaultRequested: TypedContractEvent<
      ReturnFromCoreVaultRequestedEvent.InputTuple,
      ReturnFromCoreVaultRequestedEvent.OutputTuple,
      ReturnFromCoreVaultRequestedEvent.OutputObject
    >;

    "TransferToCoreVaultCancelled(address,uint256)": TypedContractEvent<
      TransferToCoreVaultCancelledEvent.InputTuple,
      TransferToCoreVaultCancelledEvent.OutputTuple,
      TransferToCoreVaultCancelledEvent.OutputObject
    >;
    TransferToCoreVaultCancelled: TypedContractEvent<
      TransferToCoreVaultCancelledEvent.InputTuple,
      TransferToCoreVaultCancelledEvent.OutputTuple,
      TransferToCoreVaultCancelledEvent.OutputObject
    >;

    "TransferToCoreVaultStarted(address,uint256,uint256)": TypedContractEvent<
      TransferToCoreVaultStartedEvent.InputTuple,
      TransferToCoreVaultStartedEvent.OutputTuple,
      TransferToCoreVaultStartedEvent.OutputObject
    >;
    TransferToCoreVaultStarted: TypedContractEvent<
      TransferToCoreVaultStartedEvent.InputTuple,
      TransferToCoreVaultStartedEvent.OutputTuple,
      TransferToCoreVaultStartedEvent.OutputObject
    >;

    "TransferToCoreVaultSuccessful(address,uint256,uint256)": TypedContractEvent<
      TransferToCoreVaultSuccessfulEvent.InputTuple,
      TransferToCoreVaultSuccessfulEvent.OutputTuple,
      TransferToCoreVaultSuccessfulEvent.OutputObject
    >;
    TransferToCoreVaultSuccessful: TypedContractEvent<
      TransferToCoreVaultSuccessfulEvent.InputTuple,
      TransferToCoreVaultSuccessfulEvent.OutputTuple,
      TransferToCoreVaultSuccessfulEvent.OutputObject
    >;
  };
}
