/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "./common";

export interface IPriceChangeEmitterInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "PriceEpochFinalized" | "PricesPublished"
  ): EventFragment;
}

export namespace PriceEpochFinalizedEvent {
  export type InputTuple = [arg0: AddressLike, arg1: BigNumberish];
  export type OutputTuple = [arg0: string, arg1: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PricesPublishedEvent {
  export type InputTuple = [votingRoundId: BigNumberish];
  export type OutputTuple = [votingRoundId: bigint];
  export interface OutputObject {
    votingRoundId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPriceChangeEmitter extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceChangeEmitter;
  waitForDeployment(): Promise<this>;

  interface: IPriceChangeEmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "PriceEpochFinalized"
  ): TypedContractEvent<
    PriceEpochFinalizedEvent.InputTuple,
    PriceEpochFinalizedEvent.OutputTuple,
    PriceEpochFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "PricesPublished"
  ): TypedContractEvent<
    PricesPublishedEvent.InputTuple,
    PricesPublishedEvent.OutputTuple,
    PricesPublishedEvent.OutputObject
  >;

  filters: {
    "PriceEpochFinalized(address,uint256)": TypedContractEvent<
      PriceEpochFinalizedEvent.InputTuple,
      PriceEpochFinalizedEvent.OutputTuple,
      PriceEpochFinalizedEvent.OutputObject
    >;
    PriceEpochFinalized: TypedContractEvent<
      PriceEpochFinalizedEvent.InputTuple,
      PriceEpochFinalizedEvent.OutputTuple,
      PriceEpochFinalizedEvent.OutputObject
    >;

    "PricesPublished(uint32)": TypedContractEvent<
      PricesPublishedEvent.InputTuple,
      PricesPublishedEvent.OutputTuple,
      PricesPublishedEvent.OutputObject
    >;
    PricesPublished: TypedContractEvent<
      PricesPublishedEvent.InputTuple,
      PricesPublishedEvent.OutputTuple,
      PricesPublishedEvent.OutputObject
    >;
  };
}
