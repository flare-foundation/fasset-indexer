/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IAssetManagerEvents {
  export type AgentVaultCreationDataStruct = {
    collateralPool: AddressLike;
    collateralPoolToken: AddressLike;
    underlyingAddress: string;
    vaultCollateralToken: AddressLike;
    poolWNatToken: AddressLike;
    feeBIPS: BigNumberish;
    poolFeeShareBIPS: BigNumberish;
    mintingVaultCollateralRatioBIPS: BigNumberish;
    mintingPoolCollateralRatioBIPS: BigNumberish;
    buyFAssetByAgentFactorBIPS: BigNumberish;
    poolExitCollateralRatioBIPS: BigNumberish;
    redemptionPoolFeeShareBIPS: BigNumberish;
  };

  export type AgentVaultCreationDataStructOutput = [
    collateralPool: string,
    collateralPoolToken: string,
    underlyingAddress: string,
    vaultCollateralToken: string,
    poolWNatToken: string,
    feeBIPS: bigint,
    poolFeeShareBIPS: bigint,
    mintingVaultCollateralRatioBIPS: bigint,
    mintingPoolCollateralRatioBIPS: bigint,
    buyFAssetByAgentFactorBIPS: bigint,
    poolExitCollateralRatioBIPS: bigint,
    redemptionPoolFeeShareBIPS: bigint
  ] & {
    collateralPool: string;
    collateralPoolToken: string;
    underlyingAddress: string;
    vaultCollateralToken: string;
    poolWNatToken: string;
    feeBIPS: bigint;
    poolFeeShareBIPS: bigint;
    mintingVaultCollateralRatioBIPS: bigint;
    mintingPoolCollateralRatioBIPS: bigint;
    buyFAssetByAgentFactorBIPS: bigint;
    poolExitCollateralRatioBIPS: bigint;
    redemptionPoolFeeShareBIPS: bigint;
  };
}

export declare namespace IDiamond {
  export type FacetCutStruct = {
    facetAddress: AddressLike;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [
    facetAddress: string,
    action: bigint,
    functionSelectors: string[]
  ] & { facetAddress: string; action: bigint; functionSelectors: string[] };
}

export declare namespace CollateralType {
  export type DataStruct = {
    collateralClass: BigNumberish;
    token: AddressLike;
    decimals: BigNumberish;
    validUntil: BigNumberish;
    directPricePair: boolean;
    assetFtsoSymbol: string;
    tokenFtsoSymbol: string;
    minCollateralRatioBIPS: BigNumberish;
    safetyMinCollateralRatioBIPS: BigNumberish;
  };

  export type DataStructOutput = [
    collateralClass: bigint,
    token: string,
    decimals: bigint,
    validUntil: bigint,
    directPricePair: boolean,
    assetFtsoSymbol: string,
    tokenFtsoSymbol: string,
    minCollateralRatioBIPS: bigint,
    safetyMinCollateralRatioBIPS: bigint
  ] & {
    collateralClass: bigint;
    token: string;
    decimals: bigint;
    validUntil: bigint;
    directPricePair: boolean;
    assetFtsoSymbol: string;
    tokenFtsoSymbol: string;
    minCollateralRatioBIPS: bigint;
    safetyMinCollateralRatioBIPS: bigint;
  };
}

export declare namespace RedemptionTicketInfo {
  export type DataStruct = {
    redemptionTicketId: BigNumberish;
    agentVault: AddressLike;
    ticketValueUBA: BigNumberish;
  };

  export type DataStructOutput = [
    redemptionTicketId: bigint,
    agentVault: string,
    ticketValueUBA: bigint
  ] & {
    redemptionTicketId: bigint;
    agentVault: string;
    ticketValueUBA: bigint;
  };
}

export declare namespace CollateralReservationInfo {
  export type DataStruct = {
    collateralReservationId: BigNumberish;
    agentVault: AddressLike;
    minter: AddressLike;
    paymentAddress: string;
    paymentReference: BytesLike;
    valueUBA: BigNumberish;
    mintingFeeUBA: BigNumberish;
    reservationFeeNatWei: BigNumberish;
    poolFeeShareBIPS: BigNumberish;
    firstUnderlyingBlock: BigNumberish;
    lastUnderlyingBlock: BigNumberish;
    lastUnderlyingTimestamp: BigNumberish;
    executor: AddressLike;
    executorFeeNatWei: BigNumberish;
    status: BigNumberish;
  };

  export type DataStructOutput = [
    collateralReservationId: bigint,
    agentVault: string,
    minter: string,
    paymentAddress: string,
    paymentReference: string,
    valueUBA: bigint,
    mintingFeeUBA: bigint,
    reservationFeeNatWei: bigint,
    poolFeeShareBIPS: bigint,
    firstUnderlyingBlock: bigint,
    lastUnderlyingBlock: bigint,
    lastUnderlyingTimestamp: bigint,
    executor: string,
    executorFeeNatWei: bigint,
    status: bigint
  ] & {
    collateralReservationId: bigint;
    agentVault: string;
    minter: string;
    paymentAddress: string;
    paymentReference: string;
    valueUBA: bigint;
    mintingFeeUBA: bigint;
    reservationFeeNatWei: bigint;
    poolFeeShareBIPS: bigint;
    firstUnderlyingBlock: bigint;
    lastUnderlyingBlock: bigint;
    lastUnderlyingTimestamp: bigint;
    executor: string;
    executorFeeNatWei: bigint;
    status: bigint;
  };
}

export declare namespace IPayment {
  export type RequestBodyStruct = {
    transactionId: BytesLike;
    inUtxo: BigNumberish;
    utxo: BigNumberish;
  };

  export type RequestBodyStructOutput = [
    transactionId: string,
    inUtxo: bigint,
    utxo: bigint
  ] & { transactionId: string; inUtxo: bigint; utxo: bigint };

  export type ResponseBodyStruct = {
    blockNumber: BigNumberish;
    blockTimestamp: BigNumberish;
    sourceAddressHash: BytesLike;
    sourceAddressesRoot: BytesLike;
    receivingAddressHash: BytesLike;
    intendedReceivingAddressHash: BytesLike;
    spentAmount: BigNumberish;
    intendedSpentAmount: BigNumberish;
    receivedAmount: BigNumberish;
    intendedReceivedAmount: BigNumberish;
    standardPaymentReference: BytesLike;
    oneToOne: boolean;
    status: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    blockNumber: bigint,
    blockTimestamp: bigint,
    sourceAddressHash: string,
    sourceAddressesRoot: string,
    receivingAddressHash: string,
    intendedReceivingAddressHash: string,
    spentAmount: bigint,
    intendedSpentAmount: bigint,
    receivedAmount: bigint,
    intendedReceivedAmount: bigint,
    standardPaymentReference: string,
    oneToOne: boolean,
    status: bigint
  ] & {
    blockNumber: bigint;
    blockTimestamp: bigint;
    sourceAddressHash: string;
    sourceAddressesRoot: string;
    receivingAddressHash: string;
    intendedReceivingAddressHash: string;
    spentAmount: bigint;
    intendedSpentAmount: bigint;
    receivedAmount: bigint;
    intendedReceivedAmount: bigint;
    standardPaymentReference: string;
    oneToOne: boolean;
    status: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IPayment.RequestBodyStruct;
    responseBody: IPayment.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IPayment.RequestBodyStructOutput,
    responseBody: IPayment.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IPayment.RequestBodyStructOutput;
    responseBody: IPayment.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IPayment.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IPayment.ResponseStructOutput
  ] & { merkleProof: string[]; data: IPayment.ResponseStructOutput };
}

export declare namespace IAddressValidity {
  export type RequestBodyStruct = { addressStr: string };

  export type RequestBodyStructOutput = [addressStr: string] & {
    addressStr: string;
  };

  export type ResponseBodyStruct = {
    isValid: boolean;
    standardAddress: string;
    standardAddressHash: BytesLike;
  };

  export type ResponseBodyStructOutput = [
    isValid: boolean,
    standardAddress: string,
    standardAddressHash: string
  ] & {
    isValid: boolean;
    standardAddress: string;
    standardAddressHash: string;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IAddressValidity.RequestBodyStruct;
    responseBody: IAddressValidity.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IAddressValidity.RequestBodyStructOutput,
    responseBody: IAddressValidity.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IAddressValidity.RequestBodyStructOutput;
    responseBody: IAddressValidity.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IAddressValidity.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IAddressValidity.ResponseStructOutput
  ] & { merkleProof: string[]; data: IAddressValidity.ResponseStructOutput };
}

export declare namespace AgentSettings {
  export type DataStruct = {
    vaultCollateralToken: AddressLike;
    poolTokenSuffix: string;
    feeBIPS: BigNumberish;
    poolFeeShareBIPS: BigNumberish;
    mintingVaultCollateralRatioBIPS: BigNumberish;
    mintingPoolCollateralRatioBIPS: BigNumberish;
    buyFAssetByAgentFactorBIPS: BigNumberish;
    poolExitCollateralRatioBIPS: BigNumberish;
    redemptionPoolFeeShareBIPS: BigNumberish;
  };

  export type DataStructOutput = [
    vaultCollateralToken: string,
    poolTokenSuffix: string,
    feeBIPS: bigint,
    poolFeeShareBIPS: bigint,
    mintingVaultCollateralRatioBIPS: bigint,
    mintingPoolCollateralRatioBIPS: bigint,
    buyFAssetByAgentFactorBIPS: bigint,
    poolExitCollateralRatioBIPS: bigint,
    redemptionPoolFeeShareBIPS: bigint
  ] & {
    vaultCollateralToken: string;
    poolTokenSuffix: string;
    feeBIPS: bigint;
    poolFeeShareBIPS: bigint;
    mintingVaultCollateralRatioBIPS: bigint;
    mintingPoolCollateralRatioBIPS: bigint;
    buyFAssetByAgentFactorBIPS: bigint;
    poolExitCollateralRatioBIPS: bigint;
    redemptionPoolFeeShareBIPS: bigint;
  };
}

export declare namespace IBalanceDecreasingTransaction {
  export type RequestBodyStruct = {
    transactionId: BytesLike;
    sourceAddressIndicator: BytesLike;
  };

  export type RequestBodyStructOutput = [
    transactionId: string,
    sourceAddressIndicator: string
  ] & { transactionId: string; sourceAddressIndicator: string };

  export type ResponseBodyStruct = {
    blockNumber: BigNumberish;
    blockTimestamp: BigNumberish;
    sourceAddressHash: BytesLike;
    spentAmount: BigNumberish;
    standardPaymentReference: BytesLike;
  };

  export type ResponseBodyStructOutput = [
    blockNumber: bigint,
    blockTimestamp: bigint,
    sourceAddressHash: string,
    spentAmount: bigint,
    standardPaymentReference: string
  ] & {
    blockNumber: bigint;
    blockTimestamp: bigint;
    sourceAddressHash: string;
    spentAmount: bigint;
    standardPaymentReference: string;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IBalanceDecreasingTransaction.RequestBodyStruct;
    responseBody: IBalanceDecreasingTransaction.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IBalanceDecreasingTransaction.RequestBodyStructOutput,
    responseBody: IBalanceDecreasingTransaction.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IBalanceDecreasingTransaction.RequestBodyStructOutput;
    responseBody: IBalanceDecreasingTransaction.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IBalanceDecreasingTransaction.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IBalanceDecreasingTransaction.ResponseStructOutput
  ] & {
    merkleProof: string[];
    data: IBalanceDecreasingTransaction.ResponseStructOutput;
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: AddressLike;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [
    facetAddress: string,
    functionSelectors: string[]
  ] & { facetAddress: string; functionSelectors: string[] };
}

export declare namespace IConfirmedBlockHeightExists {
  export type RequestBodyStruct = {
    blockNumber: BigNumberish;
    queryWindow: BigNumberish;
  };

  export type RequestBodyStructOutput = [
    blockNumber: bigint,
    queryWindow: bigint
  ] & { blockNumber: bigint; queryWindow: bigint };

  export type ResponseBodyStruct = {
    blockTimestamp: BigNumberish;
    numberOfConfirmations: BigNumberish;
    lowestQueryWindowBlockNumber: BigNumberish;
    lowestQueryWindowBlockTimestamp: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    blockTimestamp: bigint,
    numberOfConfirmations: bigint,
    lowestQueryWindowBlockNumber: bigint,
    lowestQueryWindowBlockTimestamp: bigint
  ] & {
    blockTimestamp: bigint;
    numberOfConfirmations: bigint;
    lowestQueryWindowBlockNumber: bigint;
    lowestQueryWindowBlockTimestamp: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IConfirmedBlockHeightExists.RequestBodyStruct;
    responseBody: IConfirmedBlockHeightExists.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IConfirmedBlockHeightExists.RequestBodyStructOutput,
    responseBody: IConfirmedBlockHeightExists.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IConfirmedBlockHeightExists.RequestBodyStructOutput;
    responseBody: IConfirmedBlockHeightExists.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IConfirmedBlockHeightExists.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IConfirmedBlockHeightExists.ResponseStructOutput
  ] & {
    merkleProof: string[];
    data: IConfirmedBlockHeightExists.ResponseStructOutput;
  };
}

export declare namespace AgentInfo {
  export type InfoStruct = {
    status: BigNumberish;
    ownerManagementAddress: AddressLike;
    ownerWorkAddress: AddressLike;
    collateralPool: AddressLike;
    collateralPoolToken: AddressLike;
    underlyingAddressString: string;
    publiclyAvailable: boolean;
    feeBIPS: BigNumberish;
    poolFeeShareBIPS: BigNumberish;
    vaultCollateralToken: AddressLike;
    mintingVaultCollateralRatioBIPS: BigNumberish;
    mintingPoolCollateralRatioBIPS: BigNumberish;
    freeCollateralLots: BigNumberish;
    totalVaultCollateralWei: BigNumberish;
    freeVaultCollateralWei: BigNumberish;
    vaultCollateralRatioBIPS: BigNumberish;
    poolWNatToken: AddressLike;
    totalPoolCollateralNATWei: BigNumberish;
    freePoolCollateralNATWei: BigNumberish;
    poolCollateralRatioBIPS: BigNumberish;
    totalAgentPoolTokensWei: BigNumberish;
    announcedVaultCollateralWithdrawalWei: BigNumberish;
    announcedPoolTokensWithdrawalWei: BigNumberish;
    freeAgentPoolTokensWei: BigNumberish;
    mintedUBA: BigNumberish;
    reservedUBA: BigNumberish;
    redeemingUBA: BigNumberish;
    poolRedeemingUBA: BigNumberish;
    dustUBA: BigNumberish;
    liquidationStartTimestamp: BigNumberish;
    maxLiquidationAmountUBA: BigNumberish;
    liquidationPaymentFactorVaultBIPS: BigNumberish;
    liquidationPaymentFactorPoolBIPS: BigNumberish;
    underlyingBalanceUBA: BigNumberish;
    requiredUnderlyingBalanceUBA: BigNumberish;
    freeUnderlyingBalanceUBA: BigNumberish;
    announcedUnderlyingWithdrawalId: BigNumberish;
    buyFAssetByAgentFactorBIPS: BigNumberish;
    poolExitCollateralRatioBIPS: BigNumberish;
    redemptionPoolFeeShareBIPS: BigNumberish;
  };

  export type InfoStructOutput = [
    status: bigint,
    ownerManagementAddress: string,
    ownerWorkAddress: string,
    collateralPool: string,
    collateralPoolToken: string,
    underlyingAddressString: string,
    publiclyAvailable: boolean,
    feeBIPS: bigint,
    poolFeeShareBIPS: bigint,
    vaultCollateralToken: string,
    mintingVaultCollateralRatioBIPS: bigint,
    mintingPoolCollateralRatioBIPS: bigint,
    freeCollateralLots: bigint,
    totalVaultCollateralWei: bigint,
    freeVaultCollateralWei: bigint,
    vaultCollateralRatioBIPS: bigint,
    poolWNatToken: string,
    totalPoolCollateralNATWei: bigint,
    freePoolCollateralNATWei: bigint,
    poolCollateralRatioBIPS: bigint,
    totalAgentPoolTokensWei: bigint,
    announcedVaultCollateralWithdrawalWei: bigint,
    announcedPoolTokensWithdrawalWei: bigint,
    freeAgentPoolTokensWei: bigint,
    mintedUBA: bigint,
    reservedUBA: bigint,
    redeemingUBA: bigint,
    poolRedeemingUBA: bigint,
    dustUBA: bigint,
    liquidationStartTimestamp: bigint,
    maxLiquidationAmountUBA: bigint,
    liquidationPaymentFactorVaultBIPS: bigint,
    liquidationPaymentFactorPoolBIPS: bigint,
    underlyingBalanceUBA: bigint,
    requiredUnderlyingBalanceUBA: bigint,
    freeUnderlyingBalanceUBA: bigint,
    announcedUnderlyingWithdrawalId: bigint,
    buyFAssetByAgentFactorBIPS: bigint,
    poolExitCollateralRatioBIPS: bigint,
    redemptionPoolFeeShareBIPS: bigint
  ] & {
    status: bigint;
    ownerManagementAddress: string;
    ownerWorkAddress: string;
    collateralPool: string;
    collateralPoolToken: string;
    underlyingAddressString: string;
    publiclyAvailable: boolean;
    feeBIPS: bigint;
    poolFeeShareBIPS: bigint;
    vaultCollateralToken: string;
    mintingVaultCollateralRatioBIPS: bigint;
    mintingPoolCollateralRatioBIPS: bigint;
    freeCollateralLots: bigint;
    totalVaultCollateralWei: bigint;
    freeVaultCollateralWei: bigint;
    vaultCollateralRatioBIPS: bigint;
    poolWNatToken: string;
    totalPoolCollateralNATWei: bigint;
    freePoolCollateralNATWei: bigint;
    poolCollateralRatioBIPS: bigint;
    totalAgentPoolTokensWei: bigint;
    announcedVaultCollateralWithdrawalWei: bigint;
    announcedPoolTokensWithdrawalWei: bigint;
    freeAgentPoolTokensWei: bigint;
    mintedUBA: bigint;
    reservedUBA: bigint;
    redeemingUBA: bigint;
    poolRedeemingUBA: bigint;
    dustUBA: bigint;
    liquidationStartTimestamp: bigint;
    maxLiquidationAmountUBA: bigint;
    liquidationPaymentFactorVaultBIPS: bigint;
    liquidationPaymentFactorPoolBIPS: bigint;
    underlyingBalanceUBA: bigint;
    requiredUnderlyingBalanceUBA: bigint;
    freeUnderlyingBalanceUBA: bigint;
    announcedUnderlyingWithdrawalId: bigint;
    buyFAssetByAgentFactorBIPS: bigint;
    poolExitCollateralRatioBIPS: bigint;
    redemptionPoolFeeShareBIPS: bigint;
  };
}

export declare namespace AvailableAgentInfo {
  export type DataStruct = {
    agentVault: AddressLike;
    ownerManagementAddress: AddressLike;
    feeBIPS: BigNumberish;
    mintingVaultCollateralRatioBIPS: BigNumberish;
    mintingPoolCollateralRatioBIPS: BigNumberish;
    freeCollateralLots: BigNumberish;
    status: BigNumberish;
  };

  export type DataStructOutput = [
    agentVault: string,
    ownerManagementAddress: string,
    feeBIPS: bigint,
    mintingVaultCollateralRatioBIPS: bigint,
    mintingPoolCollateralRatioBIPS: bigint,
    freeCollateralLots: bigint,
    status: bigint
  ] & {
    agentVault: string;
    ownerManagementAddress: string;
    feeBIPS: bigint;
    mintingVaultCollateralRatioBIPS: bigint;
    mintingPoolCollateralRatioBIPS: bigint;
    freeCollateralLots: bigint;
    status: bigint;
  };
}

export declare namespace AssetManagerSettings {
  export type DataStruct = {
    assetManagerController: AddressLike;
    fAsset: AddressLike;
    agentVaultFactory: AddressLike;
    collateralPoolFactory: AddressLike;
    collateralPoolTokenFactory: AddressLike;
    poolTokenSuffix: string;
    __whitelist: AddressLike;
    agentOwnerRegistry: AddressLike;
    fdcVerification: AddressLike;
    burnAddress: AddressLike;
    priceReader: AddressLike;
    assetDecimals: BigNumberish;
    assetMintingDecimals: BigNumberish;
    chainId: BytesLike;
    averageBlockTimeMS: BigNumberish;
    mintingPoolHoldingsRequiredBIPS: BigNumberish;
    collateralReservationFeeBIPS: BigNumberish;
    assetUnitUBA: BigNumberish;
    assetMintingGranularityUBA: BigNumberish;
    lotSizeAMG: BigNumberish;
    __minUnderlyingBackingBIPS: BigNumberish;
    __requireEOAAddressProof: boolean;
    mintingCapAMG: BigNumberish;
    underlyingBlocksForPayment: BigNumberish;
    underlyingSecondsForPayment: BigNumberish;
    redemptionFeeBIPS: BigNumberish;
    redemptionDefaultFactorVaultCollateralBIPS: BigNumberish;
    __redemptionDefaultFactorPoolBIPS: BigNumberish;
    confirmationByOthersAfterSeconds: BigNumberish;
    confirmationByOthersRewardUSD5: BigNumberish;
    maxRedeemedTickets: BigNumberish;
    paymentChallengeRewardBIPS: BigNumberish;
    paymentChallengeRewardUSD5: BigNumberish;
    withdrawalWaitMinSeconds: BigNumberish;
    maxTrustedPriceAgeSeconds: BigNumberish;
    __ccbTimeSeconds: BigNumberish;
    attestationWindowSeconds: BigNumberish;
    minUpdateRepeatTimeSeconds: BigNumberish;
    __buybackCollateralFactorBIPS: BigNumberish;
    __announcedUnderlyingConfirmationMinSeconds: BigNumberish;
    tokenInvalidationTimeMinSeconds: BigNumberish;
    vaultCollateralBuyForFlareFactorBIPS: BigNumberish;
    agentExitAvailableTimelockSeconds: BigNumberish;
    agentFeeChangeTimelockSeconds: BigNumberish;
    agentMintingCRChangeTimelockSeconds: BigNumberish;
    poolExitCRChangeTimelockSeconds: BigNumberish;
    agentTimelockedOperationWindowSeconds: BigNumberish;
    collateralPoolTokenTimelockSeconds: BigNumberish;
    liquidationStepSeconds: BigNumberish;
    liquidationCollateralFactorBIPS: BigNumberish[];
    liquidationFactorVaultCollateralBIPS: BigNumberish[];
    diamondCutMinTimelockSeconds: BigNumberish;
    maxEmergencyPauseDurationSeconds: BigNumberish;
    emergencyPauseDurationResetAfterSeconds: BigNumberish;
    __cancelCollateralReservationAfterSeconds: BigNumberish;
    __rejectOrCancelCollateralReservationReturnFactorBIPS: BigNumberish;
    __rejectRedemptionRequestWindowSeconds: BigNumberish;
    __takeOverRedemptionRequestWindowSeconds: BigNumberish;
    __rejectedRedemptionDefaultFactorVaultCollateralBIPS: BigNumberish;
    __rejectedRedemptionDefaultFactorPoolBIPS: BigNumberish;
  };

  export type DataStructOutput = [
    assetManagerController: string,
    fAsset: string,
    agentVaultFactory: string,
    collateralPoolFactory: string,
    collateralPoolTokenFactory: string,
    poolTokenSuffix: string,
    __whitelist: string,
    agentOwnerRegistry: string,
    fdcVerification: string,
    burnAddress: string,
    priceReader: string,
    assetDecimals: bigint,
    assetMintingDecimals: bigint,
    chainId: string,
    averageBlockTimeMS: bigint,
    mintingPoolHoldingsRequiredBIPS: bigint,
    collateralReservationFeeBIPS: bigint,
    assetUnitUBA: bigint,
    assetMintingGranularityUBA: bigint,
    lotSizeAMG: bigint,
    __minUnderlyingBackingBIPS: bigint,
    __requireEOAAddressProof: boolean,
    mintingCapAMG: bigint,
    underlyingBlocksForPayment: bigint,
    underlyingSecondsForPayment: bigint,
    redemptionFeeBIPS: bigint,
    redemptionDefaultFactorVaultCollateralBIPS: bigint,
    __redemptionDefaultFactorPoolBIPS: bigint,
    confirmationByOthersAfterSeconds: bigint,
    confirmationByOthersRewardUSD5: bigint,
    maxRedeemedTickets: bigint,
    paymentChallengeRewardBIPS: bigint,
    paymentChallengeRewardUSD5: bigint,
    withdrawalWaitMinSeconds: bigint,
    maxTrustedPriceAgeSeconds: bigint,
    __ccbTimeSeconds: bigint,
    attestationWindowSeconds: bigint,
    minUpdateRepeatTimeSeconds: bigint,
    __buybackCollateralFactorBIPS: bigint,
    __announcedUnderlyingConfirmationMinSeconds: bigint,
    tokenInvalidationTimeMinSeconds: bigint,
    vaultCollateralBuyForFlareFactorBIPS: bigint,
    agentExitAvailableTimelockSeconds: bigint,
    agentFeeChangeTimelockSeconds: bigint,
    agentMintingCRChangeTimelockSeconds: bigint,
    poolExitCRChangeTimelockSeconds: bigint,
    agentTimelockedOperationWindowSeconds: bigint,
    collateralPoolTokenTimelockSeconds: bigint,
    liquidationStepSeconds: bigint,
    liquidationCollateralFactorBIPS: bigint[],
    liquidationFactorVaultCollateralBIPS: bigint[],
    diamondCutMinTimelockSeconds: bigint,
    maxEmergencyPauseDurationSeconds: bigint,
    emergencyPauseDurationResetAfterSeconds: bigint,
    __cancelCollateralReservationAfterSeconds: bigint,
    __rejectOrCancelCollateralReservationReturnFactorBIPS: bigint,
    __rejectRedemptionRequestWindowSeconds: bigint,
    __takeOverRedemptionRequestWindowSeconds: bigint,
    __rejectedRedemptionDefaultFactorVaultCollateralBIPS: bigint,
    __rejectedRedemptionDefaultFactorPoolBIPS: bigint
  ] & {
    assetManagerController: string;
    fAsset: string;
    agentVaultFactory: string;
    collateralPoolFactory: string;
    collateralPoolTokenFactory: string;
    poolTokenSuffix: string;
    __whitelist: string;
    agentOwnerRegistry: string;
    fdcVerification: string;
    burnAddress: string;
    priceReader: string;
    assetDecimals: bigint;
    assetMintingDecimals: bigint;
    chainId: string;
    averageBlockTimeMS: bigint;
    mintingPoolHoldingsRequiredBIPS: bigint;
    collateralReservationFeeBIPS: bigint;
    assetUnitUBA: bigint;
    assetMintingGranularityUBA: bigint;
    lotSizeAMG: bigint;
    __minUnderlyingBackingBIPS: bigint;
    __requireEOAAddressProof: boolean;
    mintingCapAMG: bigint;
    underlyingBlocksForPayment: bigint;
    underlyingSecondsForPayment: bigint;
    redemptionFeeBIPS: bigint;
    redemptionDefaultFactorVaultCollateralBIPS: bigint;
    __redemptionDefaultFactorPoolBIPS: bigint;
    confirmationByOthersAfterSeconds: bigint;
    confirmationByOthersRewardUSD5: bigint;
    maxRedeemedTickets: bigint;
    paymentChallengeRewardBIPS: bigint;
    paymentChallengeRewardUSD5: bigint;
    withdrawalWaitMinSeconds: bigint;
    maxTrustedPriceAgeSeconds: bigint;
    __ccbTimeSeconds: bigint;
    attestationWindowSeconds: bigint;
    minUpdateRepeatTimeSeconds: bigint;
    __buybackCollateralFactorBIPS: bigint;
    __announcedUnderlyingConfirmationMinSeconds: bigint;
    tokenInvalidationTimeMinSeconds: bigint;
    vaultCollateralBuyForFlareFactorBIPS: bigint;
    agentExitAvailableTimelockSeconds: bigint;
    agentFeeChangeTimelockSeconds: bigint;
    agentMintingCRChangeTimelockSeconds: bigint;
    poolExitCRChangeTimelockSeconds: bigint;
    agentTimelockedOperationWindowSeconds: bigint;
    collateralPoolTokenTimelockSeconds: bigint;
    liquidationStepSeconds: bigint;
    liquidationCollateralFactorBIPS: bigint[];
    liquidationFactorVaultCollateralBIPS: bigint[];
    diamondCutMinTimelockSeconds: bigint;
    maxEmergencyPauseDurationSeconds: bigint;
    emergencyPauseDurationResetAfterSeconds: bigint;
    __cancelCollateralReservationAfterSeconds: bigint;
    __rejectOrCancelCollateralReservationReturnFactorBIPS: bigint;
    __rejectRedemptionRequestWindowSeconds: bigint;
    __takeOverRedemptionRequestWindowSeconds: bigint;
    __rejectedRedemptionDefaultFactorVaultCollateralBIPS: bigint;
    __rejectedRedemptionDefaultFactorPoolBIPS: bigint;
  };
}

export declare namespace IReferencedPaymentNonexistence {
  export type RequestBodyStruct = {
    minimalBlockNumber: BigNumberish;
    deadlineBlockNumber: BigNumberish;
    deadlineTimestamp: BigNumberish;
    destinationAddressHash: BytesLike;
    amount: BigNumberish;
    standardPaymentReference: BytesLike;
    checkSourceAddresses: boolean;
    sourceAddressesRoot: BytesLike;
  };

  export type RequestBodyStructOutput = [
    minimalBlockNumber: bigint,
    deadlineBlockNumber: bigint,
    deadlineTimestamp: bigint,
    destinationAddressHash: string,
    amount: bigint,
    standardPaymentReference: string,
    checkSourceAddresses: boolean,
    sourceAddressesRoot: string
  ] & {
    minimalBlockNumber: bigint;
    deadlineBlockNumber: bigint;
    deadlineTimestamp: bigint;
    destinationAddressHash: string;
    amount: bigint;
    standardPaymentReference: string;
    checkSourceAddresses: boolean;
    sourceAddressesRoot: string;
  };

  export type ResponseBodyStruct = {
    minimalBlockTimestamp: BigNumberish;
    firstOverflowBlockNumber: BigNumberish;
    firstOverflowBlockTimestamp: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    minimalBlockTimestamp: bigint,
    firstOverflowBlockNumber: bigint,
    firstOverflowBlockTimestamp: bigint
  ] & {
    minimalBlockTimestamp: bigint;
    firstOverflowBlockNumber: bigint;
    firstOverflowBlockTimestamp: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IReferencedPaymentNonexistence.RequestBodyStruct;
    responseBody: IReferencedPaymentNonexistence.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IReferencedPaymentNonexistence.RequestBodyStructOutput,
    responseBody: IReferencedPaymentNonexistence.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IReferencedPaymentNonexistence.RequestBodyStructOutput;
    responseBody: IReferencedPaymentNonexistence.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IReferencedPaymentNonexistence.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IReferencedPaymentNonexistence.ResponseStructOutput
  ] & {
    merkleProof: string[];
    data: IReferencedPaymentNonexistence.ResponseStructOutput;
  };
}

export declare namespace RedemptionRequestInfo {
  export type DataStruct = {
    redemptionRequestId: BigNumberish;
    status: BigNumberish;
    agentVault: AddressLike;
    redeemer: AddressLike;
    paymentAddress: string;
    paymentReference: BytesLike;
    valueUBA: BigNumberish;
    feeUBA: BigNumberish;
    poolFeeShareBIPS: BigNumberish;
    firstUnderlyingBlock: BigNumberish;
    lastUnderlyingBlock: BigNumberish;
    lastUnderlyingTimestamp: BigNumberish;
    timestamp: BigNumberish;
    poolSelfClose: boolean;
    transferToCoreVault: boolean;
    executor: AddressLike;
    executorFeeNatWei: BigNumberish;
  };

  export type DataStructOutput = [
    redemptionRequestId: bigint,
    status: bigint,
    agentVault: string,
    redeemer: string,
    paymentAddress: string,
    paymentReference: string,
    valueUBA: bigint,
    feeUBA: bigint,
    poolFeeShareBIPS: bigint,
    firstUnderlyingBlock: bigint,
    lastUnderlyingBlock: bigint,
    lastUnderlyingTimestamp: bigint,
    timestamp: bigint,
    poolSelfClose: boolean,
    transferToCoreVault: boolean,
    executor: string,
    executorFeeNatWei: bigint
  ] & {
    redemptionRequestId: bigint;
    status: bigint;
    agentVault: string;
    redeemer: string;
    paymentAddress: string;
    paymentReference: string;
    valueUBA: bigint;
    feeUBA: bigint;
    poolFeeShareBIPS: bigint;
    firstUnderlyingBlock: bigint;
    lastUnderlyingBlock: bigint;
    lastUnderlyingTimestamp: bigint;
    timestamp: bigint;
    poolSelfClose: boolean;
    transferToCoreVault: boolean;
    executor: string;
    executorFeeNatWei: bigint;
  };
}

export interface IAssetManager__latestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAlwaysAllowedMinterForAgent"
      | "addCollateralType"
      | "agentPing"
      | "agentPingResponse"
      | "agentRedemptionQueue"
      | "alwaysAllowedMintersForAgent"
      | "announceAgentPoolTokenRedemption"
      | "announceAgentSettingUpdate"
      | "announceDestroyAgent"
      | "announceExitAvailableAgentList"
      | "announceUnderlyingWithdrawal"
      | "announceVaultCollateralWithdrawal"
      | "assetManagerController"
      | "assetMintingDecimals"
      | "assetMintingGranularityUBA"
      | "assetPriceNatWei"
      | "attachController"
      | "beforeCollateralWithdrawal"
      | "cancelGovernanceCall"
      | "cancelReturnFromCoreVault"
      | "cancelUnderlyingWithdrawal"
      | "collateralReservationFee"
      | "collateralReservationInfo"
      | "confirmRedemptionPayment"
      | "confirmReturnFromCoreVault"
      | "confirmTopupPayment"
      | "confirmUnderlyingWithdrawal"
      | "controllerAttached"
      | "convertDustToTicket"
      | "coreVaultAvailableAmount"
      | "createAgentVault"
      | "currentUnderlyingBlock"
      | "deprecateCollateralType"
      | "destroyAgent"
      | "diamondCut"
      | "doublePaymentChallenge"
      | "emergencyPause"
      | "emergencyPauseDetails"
      | "emergencyPauseLevel"
      | "emergencyPaused"
      | "emergencyPausedUntil"
      | "endLiquidation"
      | "executeAgentSettingUpdate"
      | "executeGovernanceCall"
      | "executeMinting"
      | "exitAvailableAgentList"
      | "fAsset"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "finishRedemptionWithoutPayment"
      | "freeBalanceNegativeChallenge"
      | "getAgentFullPoolCollateral"
      | "getAgentFullVaultCollateral"
      | "getAgentInfo"
      | "getAgentLiquidationFactorsAndMaxAmount"
      | "getAgentMinPoolCollateralRatioBIPS"
      | "getAgentMinVaultCollateralRatioBIPS"
      | "getAgentSetting"
      | "getAgentVaultCollateralToken"
      | "getAgentVaultOwner"
      | "getAllAgents"
      | "getAvailableAgentsDetailedList"
      | "getAvailableAgentsList"
      | "getCollateralPool"
      | "getCollateralPoolTokenTimelockSeconds"
      | "getCollateralType"
      | "getCollateralTypes"
      | "getCoreVaultManager"
      | "getCoreVaultMinimumAmountLeftBIPS"
      | "getCoreVaultMinimumRedeemLots"
      | "getCoreVaultNativeAddress"
      | "getCoreVaultRedemptionFeeBIPS"
      | "getCoreVaultTransferTimeExtensionSeconds"
      | "getFAssetsBackedByPool"
      | "getSettings"
      | "getWNat"
      | "getWorkAddress"
      | "governance"
      | "governanceSettings"
      | "illegalPaymentChallenge"
      | "isAgentVaultOwner"
      | "isExecutor"
      | "isLockedVaultToken"
      | "isPoolTokenSuffixReserved"
      | "isVaultCollateralToken"
      | "liquidate"
      | "lotSize"
      | "makeAgentAvailable"
      | "maxRedemptionFromAgent"
      | "maximumTransferToCoreVault"
      | "mintFromFreeUnderlying"
      | "mintingPaused"
      | "mintingPaymentDefault"
      | "pauseMinting"
      | "priceReader"
      | "productionMode"
      | "redeem"
      | "redeemFromAgent"
      | "redeemFromAgentInCollateral"
      | "redeemFromCoreVault"
      | "redemptionPaymentDefault"
      | "redemptionPaymentExtensionSeconds"
      | "redemptionQueue"
      | "redemptionRequestInfo"
      | "rejectInvalidRedemption"
      | "removeAlwaysAllowedMinterForAgent"
      | "requestReturnFromCoreVault"
      | "reserveCollateral"
      | "selfClose"
      | "selfMint"
      | "setAgentExitAvailableTimelockSeconds"
      | "setAgentFeeChangeTimelockSeconds"
      | "setAgentMintingCRChangeTimelockSeconds"
      | "setAgentOwnerRegistry"
      | "setAgentTimelockedOperationWindowSeconds"
      | "setAgentVaultFactory"
      | "setAttestationWindowSeconds"
      | "setAverageBlockTimeMS"
      | "setCleanerContract"
      | "setCleanupBlockNumberManager"
      | "setCollateralPoolFactory"
      | "setCollateralPoolTokenFactory"
      | "setCollateralPoolTokenTimelockSeconds"
      | "setCollateralRatiosForToken"
      | "setCollateralReservationFeeBips"
      | "setConfirmationByOthersAfterSeconds"
      | "setConfirmationByOthersRewardUSD5"
      | "setCoreVaultManager"
      | "setCoreVaultMinimumAmountLeftBIPS"
      | "setCoreVaultMinimumRedeemLots"
      | "setCoreVaultNativeAddress"
      | "setCoreVaultRedemptionFeeBIPS"
      | "setCoreVaultTransferTimeExtensionSeconds"
      | "setEmergencyPauseDurationResetAfterSeconds"
      | "setFdcVerification"
      | "setLiquidationPaymentFactors"
      | "setLiquidationStepSeconds"
      | "setLotSizeAmg"
      | "setMaxEmergencyPauseDurationSeconds"
      | "setMaxRedeemedTickets"
      | "setMaxTrustedPriceAgeSeconds"
      | "setMinUpdateRepeatTimeSeconds"
      | "setMintingCapAmg"
      | "setMintingPoolHoldingsRequiredBIPS"
      | "setPaymentChallengeReward"
      | "setPoolExitCRChangeTimelockSeconds"
      | "setPriceReader"
      | "setRedemptionDefaultFactorVaultCollateralBIPS"
      | "setRedemptionFeeBips"
      | "setRedemptionPaymentExtensionSeconds"
      | "setTimeForPayment"
      | "setTokenInvalidationTimeMinSeconds"
      | "setVaultCollateralBuyForFlareFactorBIPS"
      | "setWithdrawalOrDestroyWaitMinSeconds"
      | "startLiquidation"
      | "supportsInterface"
      | "switchToProductionMode"
      | "switchVaultCollateral"
      | "transferToCoreVault"
      | "unpauseMinting"
      | "unstickMinting"
      | "updateCollateral"
      | "updateCurrentBlock"
      | "updateSystemContracts"
      | "upgradeAgentVaultAndPool"
      | "upgradeAgentVaultsAndPools"
      | "upgradeFAssetImplementation"
      | "upgradeWNatContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentAvailable"
      | "AgentCollateralTypeChanged"
      | "AgentDestroyAnnounced"
      | "AgentDestroyed"
      | "AgentPing"
      | "AgentPingResponse"
      | "AgentSettingChangeAnnounced"
      | "AgentSettingChanged"
      | "AgentVaultCreated"
      | "AvailableAgentExitAnnounced"
      | "AvailableAgentExited"
      | "CollateralRatiosChanged"
      | "CollateralReservationDeleted"
      | "CollateralReserved"
      | "CollateralTypeAdded"
      | "CollateralTypeDeprecated"
      | "ContractChanged"
      | "CoreVaultRedemptionRequested"
      | "CurrentUnderlyingBlockUpdated"
      | "DiamondCut"
      | "DuplicatePaymentConfirmed"
      | "DustChanged"
      | "EmergencyPauseCanceled"
      | "EmergencyPauseTransfersCanceled"
      | "EmergencyPauseTransfersTriggered"
      | "EmergencyPauseTriggered"
      | "FullLiquidationStarted"
      | "GovernanceCallTimelocked"
      | "GovernanceInitialised"
      | "GovernedProductionModeEntered"
      | "IllegalPaymentConfirmed"
      | "LiquidationEnded"
      | "LiquidationPerformed"
      | "LiquidationStarted"
      | "MintingExecuted"
      | "MintingPaymentDefault"
      | "PoolTokenRedemptionAnnounced"
      | "RedeemedInCollateral"
      | "RedemptionDefault"
      | "RedemptionPaymentBlocked"
      | "RedemptionPaymentFailed"
      | "RedemptionPerformed"
      | "RedemptionPoolFeeMinted"
      | "RedemptionRejected"
      | "RedemptionRequestIncomplete"
      | "RedemptionRequested"
      | "RedemptionTicketCreated"
      | "RedemptionTicketDeleted"
      | "RedemptionTicketUpdated"
      | "ReturnFromCoreVaultCancelled"
      | "ReturnFromCoreVaultConfirmed"
      | "ReturnFromCoreVaultRequested"
      | "SelfClose"
      | "SelfMint"
      | "SettingArrayChanged"
      | "SettingChanged"
      | "TimelockedGovernanceCallCanceled"
      | "TimelockedGovernanceCallExecuted"
      | "TransferToCoreVaultDefaulted"
      | "TransferToCoreVaultStarted"
      | "TransferToCoreVaultSuccessful"
      | "UnderlyingBalanceChanged"
      | "UnderlyingBalanceTooLow"
      | "UnderlyingBalanceToppedUp"
      | "UnderlyingWithdrawalAnnounced"
      | "UnderlyingWithdrawalCancelled"
      | "UnderlyingWithdrawalConfirmed"
      | "VaultCollateralWithdrawalAnnounced"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAlwaysAllowedMinterForAgent",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateralType",
    values: [CollateralType.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "agentPing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agentPingResponse",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "agentRedemptionQueue",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "alwaysAllowedMintersForAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "announceAgentPoolTokenRedemption",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "announceAgentSettingUpdate",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "announceDestroyAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "announceExitAvailableAgentList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "announceUnderlyingWithdrawal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "announceVaultCollateralWithdrawal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetManagerController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetMintingDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetMintingGranularityUBA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetPriceNatWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attachController",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeCollateralWithdrawal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelReturnFromCoreVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUnderlyingWithdrawal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralReservationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralReservationInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmRedemptionPayment",
    values: [IPayment.ProofStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmReturnFromCoreVault",
    values: [IPayment.ProofStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTopupPayment",
    values: [IPayment.ProofStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmUnderlyingWithdrawal",
    values: [IPayment.ProofStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerAttached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertDustToTicket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "coreVaultAvailableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAgentVault",
    values: [IAddressValidity.ProofStruct, AgentSettings.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "currentUnderlyingBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateCollateralType",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyAgent",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [IDiamond.FacetCutStruct[], AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doublePaymentChallenge",
    values: [
      IBalanceDecreasingTransaction.ProofStruct,
      IBalanceDecreasingTransaction.ProofStruct,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPauseDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPauseLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPausedUntil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endLiquidation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAgentSettingUpdate",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMinting",
    values: [IPayment.ProofStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitAvailableAgentList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "fAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finishRedemptionWithoutPayment",
    values: [IConfirmedBlockHeightExists.ProofStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeBalanceNegativeChallenge",
    values: [IBalanceDecreasingTransaction.ProofStruct[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentFullPoolCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentFullVaultCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentLiquidationFactorsAndMaxAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentMinPoolCollateralRatioBIPS",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentMinVaultCollateralRatioBIPS",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentSetting",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentVaultCollateralToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentVaultOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAgents",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAgentsDetailedList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAgentsList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralPoolTokenTimelockSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralType",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultMinimumAmountLeftBIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultMinimumRedeemLots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultNativeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultRedemptionFeeBIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultTransferTimeExtensionSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFAssetsBackedByPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWNat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWorkAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "illegalPaymentChallenge",
    values: [IBalanceDecreasingTransaction.ProofStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgentVaultOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExecutor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLockedVaultToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolTokenSuffixReserved",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultCollateralToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lotSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeAgentAvailable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedemptionFromAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumTransferToCoreVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromFreeUnderlying",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintingPaymentDefault",
    values: [IReferencedPaymentNonexistence.ProofStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceReader",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFromAgent",
    values: [AddressLike, AddressLike, BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFromAgentInCollateral",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFromCoreVault",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionPaymentDefault",
    values: [IReferencedPaymentNonexistence.ProofStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionPaymentExtensionSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionQueue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionRequestInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectInvalidRedemption",
    values: [IAddressValidity.ProofStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAlwaysAllowedMinterForAgent",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReturnFromCoreVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveCollateral",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selfClose",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfMint",
    values: [IPayment.ProofStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgentExitAvailableTimelockSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgentFeeChangeTimelockSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgentMintingCRChangeTimelockSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgentOwnerRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgentTimelockedOperationWindowSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgentVaultFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttestationWindowSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAverageBlockTimeMS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanerContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanupBlockNumberManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralPoolFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralPoolTokenFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralPoolTokenTimelockSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralRatiosForToken",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralReservationFeeBips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfirmationByOthersAfterSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfirmationByOthersRewardUSD5",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultMinimumAmountLeftBIPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultMinimumRedeemLots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultNativeAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultRedemptionFeeBIPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultTransferTimeExtensionSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPauseDurationResetAfterSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFdcVerification",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationPaymentFactors",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationStepSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotSizeAmg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxEmergencyPauseDurationSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRedeemedTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTrustedPriceAgeSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinUpdateRepeatTimeSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingCapAmg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingPoolHoldingsRequiredBIPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentChallengeReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolExitCRChangeTimelockSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceReader",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionDefaultFactorVaultCollateralBIPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFeeBips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionPaymentExtensionSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeForPayment",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenInvalidationTimeMinSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultCollateralBuyForFlareFactorBIPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalOrDestroyWaitMinSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startLiquidation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProductionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchVaultCollateral",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToCoreVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstickMinting",
    values: [IConfirmedBlockHeightExists.ProofStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateral",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCurrentBlock",
    values: [IConfirmedBlockHeightExists.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSystemContracts",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAgentVaultAndPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAgentVaultsAndPools",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeFAssetImplementation",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeWNatContract",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAlwaysAllowedMinterForAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agentPing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agentPingResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentRedemptionQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alwaysAllowedMintersForAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceAgentPoolTokenRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceAgentSettingUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceDestroyAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceExitAvailableAgentList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceUnderlyingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceVaultCollateralWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetManagerController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetMintingDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetMintingGranularityUBA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetPriceNatWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attachController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeCollateralWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelReturnFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUnderlyingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralReservationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralReservationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmRedemptionPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmReturnFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTopupPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmUnderlyingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerAttached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDustToTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreVaultAvailableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAgentVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentUnderlyingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doublePaymentChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPauseDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPauseLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPausedUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAgentSettingUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitAvailableAgentList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishRedemptionWithoutPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeBalanceNegativeChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentFullPoolCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentFullVaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentLiquidationFactorsAndMaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentMinPoolCollateralRatioBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentMinVaultCollateralRatioBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentSetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentVaultCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentVaultOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAgentsDetailedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAgentsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralPoolTokenTimelockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultMinimumAmountLeftBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultMinimumRedeemLots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultNativeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultRedemptionFeeBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultTransferTimeExtensionSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFAssetsBackedByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWNat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "illegalPaymentChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAgentVaultOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExecutor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLockedVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolTokenSuffixReserved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lotSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeAgentAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRedemptionFromAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumTransferToCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromFreeUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintingPaymentDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceReader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemFromAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFromAgentInCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionPaymentDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionPaymentExtensionSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionRequestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectInvalidRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAlwaysAllowedMinterForAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReturnFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "selfClose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selfMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAgentExitAvailableTimelockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgentFeeChangeTimelockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgentMintingCRChangeTimelockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgentOwnerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgentTimelockedOperationWindowSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgentVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttestationWindowSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAverageBlockTimeMS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanupBlockNumberManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralPoolTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralPoolTokenTimelockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralRatiosForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralReservationFeeBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfirmationByOthersAfterSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfirmationByOthersRewardUSD5",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultMinimumAmountLeftBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultMinimumRedeemLots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultNativeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultRedemptionFeeBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultTransferTimeExtensionSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPauseDurationResetAfterSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFdcVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationPaymentFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationStepSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLotSizeAmg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxEmergencyPauseDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRedeemedTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTrustedPriceAgeSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinUpdateRepeatTimeSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingCapAmg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingPoolHoldingsRequiredBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentChallengeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolExitCRChangeTimelockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceReader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionDefaultFactorVaultCollateralBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFeeBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionPaymentExtensionSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeForPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenInvalidationTimeMinSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultCollateralBuyForFlareFactorBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalOrDestroyWaitMinSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToProductionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchVaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstickMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCurrentBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSystemContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAgentVaultAndPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAgentVaultsAndPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeFAssetImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeWNatContract",
    data: BytesLike
  ): Result;
}

export namespace AgentAvailableEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    feeBIPS: BigNumberish,
    mintingVaultCollateralRatioBIPS: BigNumberish,
    mintingPoolCollateralRatioBIPS: BigNumberish,
    freeCollateralLots: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    feeBIPS: bigint,
    mintingVaultCollateralRatioBIPS: bigint,
    mintingPoolCollateralRatioBIPS: bigint,
    freeCollateralLots: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    feeBIPS: bigint;
    mintingVaultCollateralRatioBIPS: bigint;
    mintingPoolCollateralRatioBIPS: bigint;
    freeCollateralLots: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentCollateralTypeChangedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    collateralClass: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    agentVault: string,
    collateralClass: bigint,
    token: string
  ];
  export interface OutputObject {
    agentVault: string;
    collateralClass: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentDestroyAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    destroyAllowedAt: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, destroyAllowedAt: bigint];
  export interface OutputObject {
    agentVault: string;
    destroyAllowedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentDestroyedEvent {
  export type InputTuple = [agentVault: AddressLike];
  export type OutputTuple = [agentVault: string];
  export interface OutputObject {
    agentVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentPingEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    sender: AddressLike,
    query: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, sender: string, query: bigint];
  export interface OutputObject {
    agentVault: string;
    sender: string;
    query: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentPingResponseEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    owner: AddressLike,
    query: BigNumberish,
    response: string
  ];
  export type OutputTuple = [
    agentVault: string,
    owner: string,
    query: bigint,
    response: string
  ];
  export interface OutputObject {
    agentVault: string;
    owner: string;
    query: bigint;
    response: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentSettingChangeAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    name: string,
    value: BigNumberish,
    validAt: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    name: string,
    value: bigint,
    validAt: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    name: string;
    value: bigint;
    validAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentSettingChangedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    name: string,
    value: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, name: string, value: bigint];
  export interface OutputObject {
    agentVault: string;
    name: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentVaultCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    agentVault: AddressLike,
    creationData: IAssetManagerEvents.AgentVaultCreationDataStruct
  ];
  export type OutputTuple = [
    owner: string,
    agentVault: string,
    creationData: IAssetManagerEvents.AgentVaultCreationDataStructOutput
  ];
  export interface OutputObject {
    owner: string;
    agentVault: string;
    creationData: IAssetManagerEvents.AgentVaultCreationDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvailableAgentExitAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    exitAllowedAt: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, exitAllowedAt: bigint];
  export interface OutputObject {
    agentVault: string;
    exitAllowedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvailableAgentExitedEvent {
  export type InputTuple = [agentVault: AddressLike];
  export type OutputTuple = [agentVault: string];
  export interface OutputObject {
    agentVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralRatiosChangedEvent {
  export type InputTuple = [
    collateralClass: BigNumberish,
    collateralToken: AddressLike,
    minCollateralRatioBIPS: BigNumberish,
    safetyMinCollateralRatioBIPS: BigNumberish
  ];
  export type OutputTuple = [
    collateralClass: bigint,
    collateralToken: string,
    minCollateralRatioBIPS: bigint,
    safetyMinCollateralRatioBIPS: bigint
  ];
  export interface OutputObject {
    collateralClass: bigint;
    collateralToken: string;
    minCollateralRatioBIPS: bigint;
    safetyMinCollateralRatioBIPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralReservationDeletedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    minter: AddressLike,
    collateralReservationId: BigNumberish,
    reservedAmountUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    minter: string,
    collateralReservationId: bigint,
    reservedAmountUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    minter: string;
    collateralReservationId: bigint;
    reservedAmountUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralReservedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    minter: AddressLike,
    collateralReservationId: BigNumberish,
    valueUBA: BigNumberish,
    feeUBA: BigNumberish,
    firstUnderlyingBlock: BigNumberish,
    lastUnderlyingBlock: BigNumberish,
    lastUnderlyingTimestamp: BigNumberish,
    paymentAddress: string,
    paymentReference: BytesLike,
    executor: AddressLike,
    executorFeeNatWei: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    minter: string,
    collateralReservationId: bigint,
    valueUBA: bigint,
    feeUBA: bigint,
    firstUnderlyingBlock: bigint,
    lastUnderlyingBlock: bigint,
    lastUnderlyingTimestamp: bigint,
    paymentAddress: string,
    paymentReference: string,
    executor: string,
    executorFeeNatWei: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    minter: string;
    collateralReservationId: bigint;
    valueUBA: bigint;
    feeUBA: bigint;
    firstUnderlyingBlock: bigint;
    lastUnderlyingBlock: bigint;
    lastUnderlyingTimestamp: bigint;
    paymentAddress: string;
    paymentReference: string;
    executor: string;
    executorFeeNatWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralTypeAddedEvent {
  export type InputTuple = [
    collateralClass: BigNumberish,
    token: AddressLike,
    decimals: BigNumberish,
    directPricePair: boolean,
    assetFtsoSymbol: string,
    tokenFtsoSymbol: string,
    minCollateralRatioBIPS: BigNumberish,
    safetyMinCollateralRatioBIPS: BigNumberish
  ];
  export type OutputTuple = [
    collateralClass: bigint,
    token: string,
    decimals: bigint,
    directPricePair: boolean,
    assetFtsoSymbol: string,
    tokenFtsoSymbol: string,
    minCollateralRatioBIPS: bigint,
    safetyMinCollateralRatioBIPS: bigint
  ];
  export interface OutputObject {
    collateralClass: bigint;
    token: string;
    decimals: bigint;
    directPricePair: boolean;
    assetFtsoSymbol: string;
    tokenFtsoSymbol: string;
    minCollateralRatioBIPS: bigint;
    safetyMinCollateralRatioBIPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralTypeDeprecatedEvent {
  export type InputTuple = [
    collateralClass: BigNumberish,
    collateralToken: AddressLike,
    validUntil: BigNumberish
  ];
  export type OutputTuple = [
    collateralClass: bigint,
    collateralToken: string,
    validUntil: bigint
  ];
  export interface OutputObject {
    collateralClass: bigint;
    collateralToken: string;
    validUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractChangedEvent {
  export type InputTuple = [name: string, value: AddressLike];
  export type OutputTuple = [name: string, value: string];
  export interface OutputObject {
    name: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoreVaultRedemptionRequestedEvent {
  export type InputTuple = [
    redeemer: AddressLike,
    paymentAddress: string,
    paymentReference: BytesLike,
    valueUBA: BigNumberish,
    feeUBA: BigNumberish
  ];
  export type OutputTuple = [
    redeemer: string,
    paymentAddress: string,
    paymentReference: string,
    valueUBA: bigint,
    feeUBA: bigint
  ];
  export interface OutputObject {
    redeemer: string;
    paymentAddress: string;
    paymentReference: string;
    valueUBA: bigint;
    feeUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurrentUnderlyingBlockUpdatedEvent {
  export type InputTuple = [
    underlyingBlockNumber: BigNumberish,
    underlyingBlockTimestamp: BigNumberish,
    updatedAt: BigNumberish
  ];
  export type OutputTuple = [
    underlyingBlockNumber: bigint,
    underlyingBlockTimestamp: bigint,
    updatedAt: bigint
  ];
  export interface OutputObject {
    underlyingBlockNumber: bigint;
    underlyingBlockTimestamp: bigint;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiamondCutEvent {
  export type InputTuple = [
    _diamondCut: IDiamond.FacetCutStruct[],
    _init: AddressLike,
    _calldata: BytesLike
  ];
  export type OutputTuple = [
    _diamondCut: IDiamond.FacetCutStructOutput[],
    _init: string,
    _calldata: string
  ];
  export interface OutputObject {
    _diamondCut: IDiamond.FacetCutStructOutput[];
    _init: string;
    _calldata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DuplicatePaymentConfirmedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transactionHash1: BytesLike,
    transactionHash2: BytesLike
  ];
  export type OutputTuple = [
    agentVault: string,
    transactionHash1: string,
    transactionHash2: string
  ];
  export interface OutputObject {
    agentVault: string;
    transactionHash1: string;
    transactionHash2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DustChangedEvent {
  export type InputTuple = [agentVault: AddressLike, dustUBA: BigNumberish];
  export type OutputTuple = [agentVault: string, dustUBA: bigint];
  export interface OutputObject {
    agentVault: string;
    dustUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseCanceledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseTransfersCanceledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseTransfersTriggeredEvent {
  export type InputTuple = [pausedUntil: BigNumberish];
  export type OutputTuple = [pausedUntil: bigint];
  export interface OutputObject {
    pausedUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseTriggeredEvent {
  export type InputTuple = [level: BigNumberish, pausedUntil: BigNumberish];
  export type OutputTuple = [level: bigint, pausedUntil: bigint];
  export interface OutputObject {
    level: bigint;
    pausedUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FullLiquidationStartedEvent {
  export type InputTuple = [agentVault: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [agentVault: string, timestamp: bigint];
  export interface OutputObject {
    agentVault: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceCallTimelockedEvent {
  export type InputTuple = [
    encodedCall: BytesLike,
    encodedCallHash: BytesLike,
    allowedAfterTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    encodedCall: string,
    encodedCallHash: string,
    allowedAfterTimestamp: bigint
  ];
  export interface OutputObject {
    encodedCall: string;
    encodedCallHash: string;
    allowedAfterTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceInitialisedEvent {
  export type InputTuple = [initialGovernance: AddressLike];
  export type OutputTuple = [initialGovernance: string];
  export interface OutputObject {
    initialGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernedProductionModeEnteredEvent {
  export type InputTuple = [governanceSettings: AddressLike];
  export type OutputTuple = [governanceSettings: string];
  export interface OutputObject {
    governanceSettings: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IllegalPaymentConfirmedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transactionHash: BytesLike
  ];
  export type OutputTuple = [agentVault: string, transactionHash: string];
  export interface OutputObject {
    agentVault: string;
    transactionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEndedEvent {
  export type InputTuple = [agentVault: AddressLike];
  export type OutputTuple = [agentVault: string];
  export interface OutputObject {
    agentVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationPerformedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    liquidator: AddressLike,
    valueUBA: BigNumberish,
    paidVaultCollateralWei: BigNumberish,
    paidPoolCollateralWei: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    liquidator: string,
    valueUBA: bigint,
    paidVaultCollateralWei: bigint,
    paidPoolCollateralWei: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    liquidator: string;
    valueUBA: bigint;
    paidVaultCollateralWei: bigint;
    paidPoolCollateralWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationStartedEvent {
  export type InputTuple = [agentVault: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [agentVault: string, timestamp: bigint];
  export interface OutputObject {
    agentVault: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintingExecutedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    collateralReservationId: BigNumberish,
    mintedAmountUBA: BigNumberish,
    agentFeeUBA: BigNumberish,
    poolFeeUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    collateralReservationId: bigint,
    mintedAmountUBA: bigint,
    agentFeeUBA: bigint,
    poolFeeUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    collateralReservationId: bigint;
    mintedAmountUBA: bigint;
    agentFeeUBA: bigint;
    poolFeeUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintingPaymentDefaultEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    minter: AddressLike,
    collateralReservationId: BigNumberish,
    reservedAmountUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    minter: string,
    collateralReservationId: bigint,
    reservedAmountUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    minter: string;
    collateralReservationId: bigint;
    reservedAmountUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolTokenRedemptionAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    amountWei: BigNumberish,
    withdrawalAllowedAt: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    amountWei: bigint,
    withdrawalAllowedAt: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    amountWei: bigint;
    withdrawalAllowedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedInCollateralEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    redemptionAmountUBA: BigNumberish,
    paidVaultCollateralWei: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    redemptionAmountUBA: bigint,
    paidVaultCollateralWei: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    redemptionAmountUBA: bigint;
    paidVaultCollateralWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionDefaultEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    redemptionAmountUBA: BigNumberish,
    redeemedVaultCollateralWei: BigNumberish,
    redeemedPoolCollateralWei: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    redemptionAmountUBA: bigint,
    redeemedVaultCollateralWei: bigint,
    redeemedPoolCollateralWei: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    redemptionAmountUBA: bigint;
    redeemedVaultCollateralWei: bigint;
    redeemedPoolCollateralWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionPaymentBlockedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    transactionHash: BytesLike,
    redemptionAmountUBA: BigNumberish,
    spentUnderlyingUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    transactionHash: string,
    redemptionAmountUBA: bigint,
    spentUnderlyingUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    transactionHash: string;
    redemptionAmountUBA: bigint;
    spentUnderlyingUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionPaymentFailedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    transactionHash: BytesLike,
    spentUnderlyingUBA: BigNumberish,
    failureReason: string
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    transactionHash: string,
    spentUnderlyingUBA: bigint,
    failureReason: string
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    transactionHash: string;
    spentUnderlyingUBA: bigint;
    failureReason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionPerformedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    transactionHash: BytesLike,
    redemptionAmountUBA: BigNumberish,
    spentUnderlyingUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    transactionHash: string,
    redemptionAmountUBA: bigint,
    spentUnderlyingUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    transactionHash: string;
    redemptionAmountUBA: bigint;
    spentUnderlyingUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionPoolFeeMintedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    requestId: BigNumberish,
    poolFeeUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    requestId: bigint,
    poolFeeUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    requestId: bigint;
    poolFeeUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionRejectedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    redemptionAmountUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    redemptionAmountUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    redemptionAmountUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionRequestIncompleteEvent {
  export type InputTuple = [redeemer: AddressLike, remainingLots: BigNumberish];
  export type OutputTuple = [redeemer: string, remainingLots: bigint];
  export interface OutputObject {
    redeemer: string;
    remainingLots: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionRequestedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redeemer: AddressLike,
    requestId: BigNumberish,
    paymentAddress: string,
    valueUBA: BigNumberish,
    feeUBA: BigNumberish,
    firstUnderlyingBlock: BigNumberish,
    lastUnderlyingBlock: BigNumberish,
    lastUnderlyingTimestamp: BigNumberish,
    paymentReference: BytesLike,
    executor: AddressLike,
    executorFeeNatWei: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redeemer: string,
    requestId: bigint,
    paymentAddress: string,
    valueUBA: bigint,
    feeUBA: bigint,
    firstUnderlyingBlock: bigint,
    lastUnderlyingBlock: bigint,
    lastUnderlyingTimestamp: bigint,
    paymentReference: string,
    executor: string,
    executorFeeNatWei: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redeemer: string;
    requestId: bigint;
    paymentAddress: string;
    valueUBA: bigint;
    feeUBA: bigint;
    firstUnderlyingBlock: bigint;
    lastUnderlyingBlock: bigint;
    lastUnderlyingTimestamp: bigint;
    paymentReference: string;
    executor: string;
    executorFeeNatWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionTicketCreatedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redemptionTicketId: BigNumberish,
    ticketValueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redemptionTicketId: bigint,
    ticketValueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redemptionTicketId: bigint;
    ticketValueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionTicketDeletedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redemptionTicketId: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, redemptionTicketId: bigint];
  export interface OutputObject {
    agentVault: string;
    redemptionTicketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionTicketUpdatedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    redemptionTicketId: BigNumberish,
    ticketValueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    redemptionTicketId: bigint,
    ticketValueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    redemptionTicketId: bigint;
    ticketValueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnFromCoreVaultCancelledEvent {
  export type InputTuple = [agentVault: AddressLike, requestId: BigNumberish];
  export type OutputTuple = [agentVault: string, requestId: bigint];
  export interface OutputObject {
    agentVault: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnFromCoreVaultConfirmedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    requestId: BigNumberish,
    receivedUnderlyingUBA: BigNumberish,
    remintedUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    requestId: bigint,
    receivedUnderlyingUBA: bigint,
    remintedUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    requestId: bigint;
    receivedUnderlyingUBA: bigint;
    remintedUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnFromCoreVaultRequestedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    requestId: BigNumberish,
    paymentReference: BytesLike,
    valueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    requestId: bigint,
    paymentReference: string,
    valueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    requestId: bigint;
    paymentReference: string;
    valueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelfCloseEvent {
  export type InputTuple = [agentVault: AddressLike, valueUBA: BigNumberish];
  export type OutputTuple = [agentVault: string, valueUBA: bigint];
  export interface OutputObject {
    agentVault: string;
    valueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelfMintEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    mintFromFreeUnderlying: boolean,
    mintedAmountUBA: BigNumberish,
    depositedAmountUBA: BigNumberish,
    poolFeeUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    mintFromFreeUnderlying: boolean,
    mintedAmountUBA: bigint,
    depositedAmountUBA: bigint,
    poolFeeUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    mintFromFreeUnderlying: boolean;
    mintedAmountUBA: bigint;
    depositedAmountUBA: bigint;
    poolFeeUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettingArrayChangedEvent {
  export type InputTuple = [name: string, value: BigNumberish[]];
  export type OutputTuple = [name: string, value: bigint[]];
  export interface OutputObject {
    name: string;
    value: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettingChangedEvent {
  export type InputTuple = [name: string, value: BigNumberish];
  export type OutputTuple = [name: string, value: bigint];
  export interface OutputObject {
    name: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallCanceledEvent {
  export type InputTuple = [encodedCallHash: BytesLike];
  export type OutputTuple = [encodedCallHash: string];
  export interface OutputObject {
    encodedCallHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallExecutedEvent {
  export type InputTuple = [encodedCallHash: BytesLike];
  export type OutputTuple = [encodedCallHash: string];
  export interface OutputObject {
    encodedCallHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToCoreVaultDefaultedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transferRedemptionRequestId: BigNumberish,
    remintedUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    transferRedemptionRequestId: bigint,
    remintedUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    transferRedemptionRequestId: bigint;
    remintedUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToCoreVaultStartedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transferRedemptionRequestId: BigNumberish,
    valueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    transferRedemptionRequestId: bigint,
    valueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    transferRedemptionRequestId: bigint;
    valueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToCoreVaultSuccessfulEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transferRedemptionRequestId: BigNumberish,
    valueUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    transferRedemptionRequestId: bigint,
    valueUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    transferRedemptionRequestId: bigint;
    valueUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingBalanceChangedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    underlyingBalanceUBA: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, underlyingBalanceUBA: bigint];
  export interface OutputObject {
    agentVault: string;
    underlyingBalanceUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingBalanceTooLowEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    balance: BigNumberish,
    requiredBalance: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    balance: bigint,
    requiredBalance: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    balance: bigint;
    requiredBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingBalanceToppedUpEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    transactionHash: BytesLike,
    depositedUBA: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    transactionHash: string,
    depositedUBA: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    transactionHash: string;
    depositedUBA: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingWithdrawalAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    announcementId: BigNumberish,
    paymentReference: BytesLike
  ];
  export type OutputTuple = [
    agentVault: string,
    announcementId: bigint,
    paymentReference: string
  ];
  export interface OutputObject {
    agentVault: string;
    announcementId: bigint;
    paymentReference: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingWithdrawalCancelledEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    announcementId: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, announcementId: bigint];
  export interface OutputObject {
    agentVault: string;
    announcementId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingWithdrawalConfirmedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    announcementId: BigNumberish,
    spentUBA: BigNumberish,
    transactionHash: BytesLike
  ];
  export type OutputTuple = [
    agentVault: string,
    announcementId: bigint,
    spentUBA: bigint,
    transactionHash: string
  ];
  export interface OutputObject {
    agentVault: string;
    announcementId: bigint;
    spentUBA: bigint;
    transactionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCollateralWithdrawalAnnouncedEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    amountWei: BigNumberish,
    withdrawalAllowedAt: BigNumberish
  ];
  export type OutputTuple = [
    agentVault: string,
    amountWei: bigint,
    withdrawalAllowedAt: bigint
  ];
  export interface OutputObject {
    agentVault: string;
    amountWei: bigint;
    withdrawalAllowedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAssetManager__latest extends BaseContract {
  connect(runner?: ContractRunner | null): IAssetManager__latest;
  waitForDeployment(): Promise<this>;

  interface: IAssetManager__latestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAlwaysAllowedMinterForAgent: TypedContractMethod<
    [_agentVault: AddressLike, _minter: AddressLike],
    [void],
    "nonpayable"
  >;

  addCollateralType: TypedContractMethod<
    [_data: CollateralType.DataStruct],
    [void],
    "nonpayable"
  >;

  agentPing: TypedContractMethod<
    [_agentVault: AddressLike, _query: BigNumberish],
    [void],
    "nonpayable"
  >;

  agentPingResponse: TypedContractMethod<
    [_agentVault: AddressLike, _query: BigNumberish, _response: string],
    [void],
    "nonpayable"
  >;

  agentRedemptionQueue: TypedContractMethod<
    [
      _agentVault: AddressLike,
      _firstRedemptionTicketId: BigNumberish,
      _pageSize: BigNumberish
    ],
    [
      [RedemptionTicketInfo.DataStructOutput[], bigint] & {
        _queue: RedemptionTicketInfo.DataStructOutput[];
        _nextRedemptionTicketId: bigint;
      }
    ],
    "view"
  >;

  alwaysAllowedMintersForAgent: TypedContractMethod<
    [_agentVault: AddressLike],
    [string[]],
    "view"
  >;

  announceAgentPoolTokenRedemption: TypedContractMethod<
    [_agentVault: AddressLike, _valueNATWei: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  announceAgentSettingUpdate: TypedContractMethod<
    [_agentVault: AddressLike, _name: string, _value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  announceDestroyAgent: TypedContractMethod<
    [_agentVault: AddressLike],
    [bigint],
    "nonpayable"
  >;

  announceExitAvailableAgentList: TypedContractMethod<
    [_agentVault: AddressLike],
    [bigint],
    "nonpayable"
  >;

  announceUnderlyingWithdrawal: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  announceVaultCollateralWithdrawal: TypedContractMethod<
    [_agentVault: AddressLike, _valueNATWei: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  assetManagerController: TypedContractMethod<[], [string], "view">;

  assetMintingDecimals: TypedContractMethod<[], [bigint], "view">;

  assetMintingGranularityUBA: TypedContractMethod<[], [bigint], "view">;

  assetPriceNatWei: TypedContractMethod<
    [],
    [[bigint, bigint] & { _multiplier: bigint; _divisor: bigint }],
    "view"
  >;

  attachController: TypedContractMethod<
    [attached: boolean],
    [void],
    "nonpayable"
  >;

  beforeCollateralWithdrawal: TypedContractMethod<
    [_token: AddressLike, _valueNATWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelGovernanceCall: TypedContractMethod<
    [_encodedCall: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelReturnFromCoreVault: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelUnderlyingWithdrawal: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  collateralReservationFee: TypedContractMethod<
    [_lots: BigNumberish],
    [bigint],
    "view"
  >;

  collateralReservationInfo: TypedContractMethod<
    [_collateralReservationId: BigNumberish],
    [CollateralReservationInfo.DataStructOutput],
    "view"
  >;

  confirmRedemptionPayment: TypedContractMethod<
    [_payment: IPayment.ProofStruct, _redemptionRequestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmReturnFromCoreVault: TypedContractMethod<
    [_payment: IPayment.ProofStruct, _agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  confirmTopupPayment: TypedContractMethod<
    [_payment: IPayment.ProofStruct, _agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  confirmUnderlyingWithdrawal: TypedContractMethod<
    [_payment: IPayment.ProofStruct, _agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  controllerAttached: TypedContractMethod<[], [boolean], "view">;

  convertDustToTicket: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  coreVaultAvailableAmount: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _immediatelyAvailableUBA: bigint;
        _totalAvailableUBA: bigint;
      }
    ],
    "view"
  >;

  createAgentVault: TypedContractMethod<
    [
      _addressProof: IAddressValidity.ProofStruct,
      _settings: AgentSettings.DataStruct
    ],
    [string],
    "nonpayable"
  >;

  currentUnderlyingBlock: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _blockNumber: bigint;
        _blockTimestamp: bigint;
        _lastUpdateTs: bigint;
      }
    ],
    "view"
  >;

  deprecateCollateralType: TypedContractMethod<
    [
      _collateralClass: BigNumberish,
      _token: AddressLike,
      _invalidationTimeSec: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  destroyAgent: TypedContractMethod<
    [_agentVault: AddressLike, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  diamondCut: TypedContractMethod<
    [
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: AddressLike,
      _calldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  doublePaymentChallenge: TypedContractMethod<
    [
      _payment1: IBalanceDecreasingTransaction.ProofStruct,
      _payment2: IBalanceDecreasingTransaction.ProofStruct,
      _agentVault: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<
    [_level: BigNumberish, _byGovernance: boolean, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyPauseDetails: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        _level: bigint;
        _pausedUntil: bigint;
        _totalPauseDuration: bigint;
        _pausedByGovernance: boolean;
      }
    ],
    "view"
  >;

  emergencyPauseLevel: TypedContractMethod<[], [bigint], "view">;

  emergencyPaused: TypedContractMethod<[], [boolean], "view">;

  emergencyPausedUntil: TypedContractMethod<[], [bigint], "view">;

  endLiquidation: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  executeAgentSettingUpdate: TypedContractMethod<
    [_agentVault: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;

  executeGovernanceCall: TypedContractMethod<
    [_encodedCall: BytesLike],
    [void],
    "nonpayable"
  >;

  executeMinting: TypedContractMethod<
    [_payment: IPayment.ProofStruct, _collateralReservationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  exitAvailableAgentList: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  fAsset: TypedContractMethod<[], [string], "view">;

  facetAddress: TypedContractMethod<
    [_functionSelector: BytesLike],
    [string],
    "view"
  >;

  facetAddresses: TypedContractMethod<[], [string[]], "view">;

  facetFunctionSelectors: TypedContractMethod<
    [_facet: AddressLike],
    [string[]],
    "view"
  >;

  facets: TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;

  finishRedemptionWithoutPayment: TypedContractMethod<
    [
      _proof: IConfirmedBlockHeightExists.ProofStruct,
      _redemptionRequestId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  freeBalanceNegativeChallenge: TypedContractMethod<
    [
      _payments: IBalanceDecreasingTransaction.ProofStruct[],
      _agentVault: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getAgentFullPoolCollateral: TypedContractMethod<
    [_agentVault: AddressLike],
    [bigint],
    "view"
  >;

  getAgentFullVaultCollateral: TypedContractMethod<
    [_agentVault: AddressLike],
    [bigint],
    "view"
  >;

  getAgentInfo: TypedContractMethod<
    [_agentVault: AddressLike],
    [AgentInfo.InfoStructOutput],
    "view"
  >;

  getAgentLiquidationFactorsAndMaxAmount: TypedContractMethod<
    [_agentVault: AddressLike],
    [
      [bigint, bigint, bigint] & {
        liquidationPaymentFactorVaultBIPS: bigint;
        liquidationPaymentFactorPoolBIPS: bigint;
        maxLiquidationAmountUBA: bigint;
      }
    ],
    "view"
  >;

  getAgentMinPoolCollateralRatioBIPS: TypedContractMethod<
    [_agentVault: AddressLike],
    [bigint],
    "view"
  >;

  getAgentMinVaultCollateralRatioBIPS: TypedContractMethod<
    [_agentVault: AddressLike],
    [bigint],
    "view"
  >;

  getAgentSetting: TypedContractMethod<
    [_agentVault: AddressLike, _name: string],
    [bigint],
    "view"
  >;

  getAgentVaultCollateralToken: TypedContractMethod<
    [_agentVault: AddressLike],
    [string],
    "view"
  >;

  getAgentVaultOwner: TypedContractMethod<
    [_agentVault: AddressLike],
    [string],
    "view"
  >;

  getAllAgents: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [[string[], bigint] & { _agents: string[]; _totalLength: bigint }],
    "view"
  >;

  getAvailableAgentsDetailedList: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [
      [AvailableAgentInfo.DataStructOutput[], bigint] & {
        _agents: AvailableAgentInfo.DataStructOutput[];
        _totalLength: bigint;
      }
    ],
    "view"
  >;

  getAvailableAgentsList: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [[string[], bigint] & { _agents: string[]; _totalLength: bigint }],
    "view"
  >;

  getCollateralPool: TypedContractMethod<
    [_agentVault: AddressLike],
    [string],
    "view"
  >;

  getCollateralPoolTokenTimelockSeconds: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  getCollateralType: TypedContractMethod<
    [_collateralClass: BigNumberish, _token: AddressLike],
    [CollateralType.DataStructOutput],
    "view"
  >;

  getCollateralTypes: TypedContractMethod<
    [],
    [CollateralType.DataStructOutput[]],
    "view"
  >;

  getCoreVaultManager: TypedContractMethod<[], [string], "view">;

  getCoreVaultMinimumAmountLeftBIPS: TypedContractMethod<[], [bigint], "view">;

  getCoreVaultMinimumRedeemLots: TypedContractMethod<[], [bigint], "view">;

  getCoreVaultNativeAddress: TypedContractMethod<[], [string], "view">;

  getCoreVaultRedemptionFeeBIPS: TypedContractMethod<[], [bigint], "view">;

  getCoreVaultTransferTimeExtensionSeconds: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  getFAssetsBackedByPool: TypedContractMethod<
    [_agentVault: AddressLike],
    [bigint],
    "view"
  >;

  getSettings: TypedContractMethod<
    [],
    [AssetManagerSettings.DataStructOutput],
    "view"
  >;

  getWNat: TypedContractMethod<[], [string], "view">;

  getWorkAddress: TypedContractMethod<
    [_managementAddress: AddressLike],
    [string],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  governanceSettings: TypedContractMethod<[], [string], "view">;

  illegalPaymentChallenge: TypedContractMethod<
    [
      _payment: IBalanceDecreasingTransaction.ProofStruct,
      _agentVault: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isAgentVaultOwner: TypedContractMethod<
    [_agentVault: AddressLike, _address: AddressLike],
    [boolean],
    "view"
  >;

  isExecutor: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  isLockedVaultToken: TypedContractMethod<
    [_agentVault: AddressLike, _token: AddressLike],
    [boolean],
    "view"
  >;

  isPoolTokenSuffixReserved: TypedContractMethod<
    [_suffix: string],
    [boolean],
    "view"
  >;

  isVaultCollateralToken: TypedContractMethod<
    [_token: AddressLike],
    [boolean],
    "view"
  >;

  liquidate: TypedContractMethod<
    [_agentVault: AddressLike, _amountUBA: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        _liquidatedAmountUBA: bigint;
        _amountPaidVault: bigint;
        _amountPaidPool: bigint;
      }
    ],
    "nonpayable"
  >;

  lotSize: TypedContractMethod<[], [bigint], "view">;

  makeAgentAvailable: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  maxRedemptionFromAgent: TypedContractMethod<
    [_agentVault: AddressLike],
    [bigint],
    "view"
  >;

  maximumTransferToCoreVault: TypedContractMethod<
    [_agentVault: AddressLike],
    [
      [bigint, bigint] & {
        _maximumTransferUBA: bigint;
        _minimumLeftAmountUBA: bigint;
      }
    ],
    "view"
  >;

  mintFromFreeUnderlying: TypedContractMethod<
    [_agentVault: AddressLike, _lots: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintingPaused: TypedContractMethod<[], [boolean], "view">;

  mintingPaymentDefault: TypedContractMethod<
    [
      _proof: IReferencedPaymentNonexistence.ProofStruct,
      _collateralReservationId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  pauseMinting: TypedContractMethod<[], [void], "nonpayable">;

  priceReader: TypedContractMethod<[], [string], "view">;

  productionMode: TypedContractMethod<[], [boolean], "view">;

  redeem: TypedContractMethod<
    [
      _lots: BigNumberish,
      _redeemerUnderlyingAddressString: string,
      _executor: AddressLike
    ],
    [bigint],
    "payable"
  >;

  redeemFromAgent: TypedContractMethod<
    [
      _agentVault: AddressLike,
      _receiver: AddressLike,
      _amountUBA: BigNumberish,
      _receiverUnderlyingAddress: string,
      _executor: AddressLike
    ],
    [void],
    "payable"
  >;

  redeemFromAgentInCollateral: TypedContractMethod<
    [
      _agentVault: AddressLike,
      _receiver: AddressLike,
      _amountUBA: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  redeemFromCoreVault: TypedContractMethod<
    [_lots: BigNumberish, _redeemerUnderlyingAddress: string],
    [void],
    "nonpayable"
  >;

  redemptionPaymentDefault: TypedContractMethod<
    [
      _proof: IReferencedPaymentNonexistence.ProofStruct,
      _redemptionRequestId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  redemptionPaymentExtensionSeconds: TypedContractMethod<[], [bigint], "view">;

  redemptionQueue: TypedContractMethod<
    [_firstRedemptionTicketId: BigNumberish, _pageSize: BigNumberish],
    [
      [RedemptionTicketInfo.DataStructOutput[], bigint] & {
        _queue: RedemptionTicketInfo.DataStructOutput[];
        _nextRedemptionTicketId: bigint;
      }
    ],
    "view"
  >;

  redemptionRequestInfo: TypedContractMethod<
    [_redemptionRequestId: BigNumberish],
    [RedemptionRequestInfo.DataStructOutput],
    "view"
  >;

  rejectInvalidRedemption: TypedContractMethod<
    [_proof: IAddressValidity.ProofStruct, _redemptionRequestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeAlwaysAllowedMinterForAgent: TypedContractMethod<
    [_agentVault: AddressLike, _minter: AddressLike],
    [void],
    "nonpayable"
  >;

  requestReturnFromCoreVault: TypedContractMethod<
    [_agentVault: AddressLike, _lots: BigNumberish],
    [void],
    "nonpayable"
  >;

  reserveCollateral: TypedContractMethod<
    [
      _agentVault: AddressLike,
      _lots: BigNumberish,
      _maxMintingFeeBIPS: BigNumberish,
      _executor: AddressLike
    ],
    [bigint],
    "payable"
  >;

  selfClose: TypedContractMethod<
    [_agentVault: AddressLike, _amountUBA: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  selfMint: TypedContractMethod<
    [
      _payment: IPayment.ProofStruct,
      _agentVault: AddressLike,
      _lots: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setAgentExitAvailableTimelockSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAgentFeeChangeTimelockSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAgentMintingCRChangeTimelockSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAgentOwnerRegistry: TypedContractMethod<
    [_value: AddressLike],
    [void],
    "nonpayable"
  >;

  setAgentTimelockedOperationWindowSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAgentVaultFactory: TypedContractMethod<
    [_value: AddressLike],
    [void],
    "nonpayable"
  >;

  setAttestationWindowSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAverageBlockTimeMS: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCleanerContract: TypedContractMethod<
    [_value: AddressLike],
    [void],
    "nonpayable"
  >;

  setCleanupBlockNumberManager: TypedContractMethod<
    [_value: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollateralPoolFactory: TypedContractMethod<
    [_value: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollateralPoolTokenFactory: TypedContractMethod<
    [_value: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollateralPoolTokenTimelockSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCollateralRatiosForToken: TypedContractMethod<
    [
      _collateralClass: BigNumberish,
      _token: AddressLike,
      _minCollateralRatioBIPS: BigNumberish,
      _safetyMinCollateralRatioBIPS: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setCollateralReservationFeeBips: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setConfirmationByOthersAfterSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setConfirmationByOthersRewardUSD5: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCoreVaultManager: TypedContractMethod<
    [_coreVaultManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setCoreVaultMinimumAmountLeftBIPS: TypedContractMethod<
    [_minimumAmountLeftBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCoreVaultMinimumRedeemLots: TypedContractMethod<
    [_minimumRedeemLots: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCoreVaultNativeAddress: TypedContractMethod<
    [_nativeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setCoreVaultRedemptionFeeBIPS: TypedContractMethod<
    [_redemptionFeeBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCoreVaultTransferTimeExtensionSeconds: TypedContractMethod<
    [_transferTimeExtensionSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEmergencyPauseDurationResetAfterSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFdcVerification: TypedContractMethod<
    [_value: AddressLike],
    [void],
    "nonpayable"
  >;

  setLiquidationPaymentFactors: TypedContractMethod<
    [
      _liquidationFactors: BigNumberish[],
      _vaultCollateralFactors: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setLiquidationStepSeconds: TypedContractMethod<
    [_stepSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLotSizeAmg: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxEmergencyPauseDurationSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxRedeemedTickets: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxTrustedPriceAgeSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinUpdateRepeatTimeSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMintingCapAmg: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMintingPoolHoldingsRequiredBIPS: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPaymentChallengeReward: TypedContractMethod<
    [_rewardNATWei: BigNumberish, _rewardBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPoolExitCRChangeTimelockSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceReader: TypedContractMethod<
    [_value: AddressLike],
    [void],
    "nonpayable"
  >;

  setRedemptionDefaultFactorVaultCollateralBIPS: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRedemptionFeeBips: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRedemptionPaymentExtensionSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimeForPayment: TypedContractMethod<
    [_underlyingBlocks: BigNumberish, _underlyingSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenInvalidationTimeMinSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVaultCollateralBuyForFlareFactorBIPS: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawalOrDestroyWaitMinSeconds: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  startLiquidation: TypedContractMethod<
    [_agentVault: AddressLike],
    [bigint],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  switchToProductionMode: TypedContractMethod<[], [void], "nonpayable">;

  switchVaultCollateral: TypedContractMethod<
    [_agentVault: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  transferToCoreVault: TypedContractMethod<
    [_agentVault: AddressLike, _amountUBA: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpauseMinting: TypedContractMethod<[], [void], "nonpayable">;

  unstickMinting: TypedContractMethod<
    [
      _proof: IConfirmedBlockHeightExists.ProofStruct,
      _collateralReservationId: BigNumberish
    ],
    [void],
    "payable"
  >;

  updateCollateral: TypedContractMethod<
    [_agentVault: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCurrentBlock: TypedContractMethod<
    [_proof: IConfirmedBlockHeightExists.ProofStruct],
    [void],
    "nonpayable"
  >;

  updateSystemContracts: TypedContractMethod<
    [_controller: AddressLike, _wNat: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeAgentVaultAndPool: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeAgentVaultsAndPools: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeFAssetImplementation: TypedContractMethod<
    [_value: AddressLike, callData: BytesLike],
    [void],
    "nonpayable"
  >;

  upgradeWNatContract: TypedContractMethod<
    [_agentVault: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAlwaysAllowedMinterForAgent"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _minter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCollateralType"
  ): TypedContractMethod<
    [_data: CollateralType.DataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agentPing"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _query: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agentPingResponse"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _query: BigNumberish, _response: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agentRedemptionQueue"
  ): TypedContractMethod<
    [
      _agentVault: AddressLike,
      _firstRedemptionTicketId: BigNumberish,
      _pageSize: BigNumberish
    ],
    [
      [RedemptionTicketInfo.DataStructOutput[], bigint] & {
        _queue: RedemptionTicketInfo.DataStructOutput[];
        _nextRedemptionTicketId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "alwaysAllowedMintersForAgent"
  ): TypedContractMethod<[_agentVault: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "announceAgentPoolTokenRedemption"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _valueNATWei: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "announceAgentSettingUpdate"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _name: string, _value: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "announceDestroyAgent"
  ): TypedContractMethod<[_agentVault: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "announceExitAvailableAgentList"
  ): TypedContractMethod<[_agentVault: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "announceUnderlyingWithdrawal"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "announceVaultCollateralWithdrawal"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _valueNATWei: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetManagerController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetMintingDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetMintingGranularityUBA"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetPriceNatWei"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _multiplier: bigint; _divisor: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "attachController"
  ): TypedContractMethod<[attached: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "beforeCollateralWithdrawal"
  ): TypedContractMethod<
    [_token: AddressLike, _valueNATWei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelGovernanceCall"
  ): TypedContractMethod<[_encodedCall: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelReturnFromCoreVault"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelUnderlyingWithdrawal"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collateralReservationFee"
  ): TypedContractMethod<[_lots: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralReservationInfo"
  ): TypedContractMethod<
    [_collateralReservationId: BigNumberish],
    [CollateralReservationInfo.DataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "confirmRedemptionPayment"
  ): TypedContractMethod<
    [_payment: IPayment.ProofStruct, _redemptionRequestId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmReturnFromCoreVault"
  ): TypedContractMethod<
    [_payment: IPayment.ProofStruct, _agentVault: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmTopupPayment"
  ): TypedContractMethod<
    [_payment: IPayment.ProofStruct, _agentVault: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmUnderlyingWithdrawal"
  ): TypedContractMethod<
    [_payment: IPayment.ProofStruct, _agentVault: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "controllerAttached"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "convertDustToTicket"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "coreVaultAvailableAmount"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _immediatelyAvailableUBA: bigint;
        _totalAvailableUBA: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAgentVault"
  ): TypedContractMethod<
    [
      _addressProof: IAddressValidity.ProofStruct,
      _settings: AgentSettings.DataStruct
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentUnderlyingBlock"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _blockNumber: bigint;
        _blockTimestamp: bigint;
        _lastUpdateTs: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deprecateCollateralType"
  ): TypedContractMethod<
    [
      _collateralClass: BigNumberish,
      _token: AddressLike,
      _invalidationTimeSec: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "destroyAgent"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "diamondCut"
  ): TypedContractMethod<
    [
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: AddressLike,
      _calldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "doublePaymentChallenge"
  ): TypedContractMethod<
    [
      _payment1: IBalanceDecreasingTransaction.ProofStruct,
      _payment2: IBalanceDecreasingTransaction.ProofStruct,
      _agentVault: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<
    [_level: BigNumberish, _byGovernance: boolean, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyPauseDetails"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        _level: bigint;
        _pausedUntil: bigint;
        _totalPauseDuration: bigint;
        _pausedByGovernance: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyPauseLevel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyPausedUntil"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endLiquidation"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeAgentSettingUpdate"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeGovernanceCall"
  ): TypedContractMethod<[_encodedCall: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeMinting"
  ): TypedContractMethod<
    [_payment: IPayment.ProofStruct, _collateralReservationId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitAvailableAgentList"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddress"
  ): TypedContractMethod<[_functionSelector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facets"
  ): TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "finishRedemptionWithoutPayment"
  ): TypedContractMethod<
    [
      _proof: IConfirmedBlockHeightExists.ProofStruct,
      _redemptionRequestId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freeBalanceNegativeChallenge"
  ): TypedContractMethod<
    [
      _payments: IBalanceDecreasingTransaction.ProofStruct[],
      _agentVault: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAgentFullPoolCollateral"
  ): TypedContractMethod<[_agentVault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgentFullVaultCollateral"
  ): TypedContractMethod<[_agentVault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgentInfo"
  ): TypedContractMethod<
    [_agentVault: AddressLike],
    [AgentInfo.InfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentLiquidationFactorsAndMaxAmount"
  ): TypedContractMethod<
    [_agentVault: AddressLike],
    [
      [bigint, bigint, bigint] & {
        liquidationPaymentFactorVaultBIPS: bigint;
        liquidationPaymentFactorPoolBIPS: bigint;
        maxLiquidationAmountUBA: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentMinPoolCollateralRatioBIPS"
  ): TypedContractMethod<[_agentVault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgentMinVaultCollateralRatioBIPS"
  ): TypedContractMethod<[_agentVault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgentSetting"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _name: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentVaultCollateralToken"
  ): TypedContractMethod<[_agentVault: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAgentVaultOwner"
  ): TypedContractMethod<[_agentVault: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAllAgents"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [[string[], bigint] & { _agents: string[]; _totalLength: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableAgentsDetailedList"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [
      [AvailableAgentInfo.DataStructOutput[], bigint] & {
        _agents: AvailableAgentInfo.DataStructOutput[];
        _totalLength: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableAgentsList"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [[string[], bigint] & { _agents: string[]; _totalLength: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollateralPool"
  ): TypedContractMethod<[_agentVault: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getCollateralPoolTokenTimelockSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollateralType"
  ): TypedContractMethod<
    [_collateralClass: BigNumberish, _token: AddressLike],
    [CollateralType.DataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollateralTypes"
  ): TypedContractMethod<[], [CollateralType.DataStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultMinimumAmountLeftBIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultMinimumRedeemLots"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultNativeAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultRedemptionFeeBIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultTransferTimeExtensionSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFAssetsBackedByPool"
  ): TypedContractMethod<[_agentVault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSettings"
  ): TypedContractMethod<[], [AssetManagerSettings.DataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getWNat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWorkAddress"
  ): TypedContractMethod<[_managementAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceSettings"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "illegalPaymentChallenge"
  ): TypedContractMethod<
    [
      _payment: IBalanceDecreasingTransaction.ProofStruct,
      _agentVault: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAgentVaultOwner"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _address: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isExecutor"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLockedVaultToken"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _token: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPoolTokenSuffixReserved"
  ): TypedContractMethod<[_suffix: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVaultCollateralToken"
  ): TypedContractMethod<[_token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _amountUBA: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        _liquidatedAmountUBA: bigint;
        _amountPaidVault: bigint;
        _amountPaidPool: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lotSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "makeAgentAvailable"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxRedemptionFromAgent"
  ): TypedContractMethod<[_agentVault: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maximumTransferToCoreVault"
  ): TypedContractMethod<
    [_agentVault: AddressLike],
    [
      [bigint, bigint] & {
        _maximumTransferUBA: bigint;
        _minimumLeftAmountUBA: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintFromFreeUnderlying"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _lots: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintingPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintingPaymentDefault"
  ): TypedContractMethod<
    [
      _proof: IReferencedPaymentNonexistence.ProofStruct,
      _collateralReservationId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pauseMinting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "priceReader"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "productionMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [
      _lots: BigNumberish,
      _redeemerUnderlyingAddressString: string,
      _executor: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "redeemFromAgent"
  ): TypedContractMethod<
    [
      _agentVault: AddressLike,
      _receiver: AddressLike,
      _amountUBA: BigNumberish,
      _receiverUnderlyingAddress: string,
      _executor: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "redeemFromAgentInCollateral"
  ): TypedContractMethod<
    [
      _agentVault: AddressLike,
      _receiver: AddressLike,
      _amountUBA: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemFromCoreVault"
  ): TypedContractMethod<
    [_lots: BigNumberish, _redeemerUnderlyingAddress: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redemptionPaymentDefault"
  ): TypedContractMethod<
    [
      _proof: IReferencedPaymentNonexistence.ProofStruct,
      _redemptionRequestId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redemptionPaymentExtensionSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redemptionQueue"
  ): TypedContractMethod<
    [_firstRedemptionTicketId: BigNumberish, _pageSize: BigNumberish],
    [
      [RedemptionTicketInfo.DataStructOutput[], bigint] & {
        _queue: RedemptionTicketInfo.DataStructOutput[];
        _nextRedemptionTicketId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "redemptionRequestInfo"
  ): TypedContractMethod<
    [_redemptionRequestId: BigNumberish],
    [RedemptionRequestInfo.DataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "rejectInvalidRedemption"
  ): TypedContractMethod<
    [_proof: IAddressValidity.ProofStruct, _redemptionRequestId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAlwaysAllowedMinterForAgent"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _minter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestReturnFromCoreVault"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _lots: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveCollateral"
  ): TypedContractMethod<
    [
      _agentVault: AddressLike,
      _lots: BigNumberish,
      _maxMintingFeeBIPS: BigNumberish,
      _executor: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "selfClose"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _amountUBA: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selfMint"
  ): TypedContractMethod<
    [
      _payment: IPayment.ProofStruct,
      _agentVault: AddressLike,
      _lots: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAgentExitAvailableTimelockSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAgentFeeChangeTimelockSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAgentMintingCRChangeTimelockSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAgentOwnerRegistry"
  ): TypedContractMethod<[_value: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAgentTimelockedOperationWindowSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAgentVaultFactory"
  ): TypedContractMethod<[_value: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAttestationWindowSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAverageBlockTimeMS"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCleanerContract"
  ): TypedContractMethod<[_value: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCleanupBlockNumberManager"
  ): TypedContractMethod<[_value: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralPoolFactory"
  ): TypedContractMethod<[_value: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralPoolTokenFactory"
  ): TypedContractMethod<[_value: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralPoolTokenTimelockSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralRatiosForToken"
  ): TypedContractMethod<
    [
      _collateralClass: BigNumberish,
      _token: AddressLike,
      _minCollateralRatioBIPS: BigNumberish,
      _safetyMinCollateralRatioBIPS: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCollateralReservationFeeBips"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConfirmationByOthersAfterSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConfirmationByOthersRewardUSD5"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCoreVaultManager"
  ): TypedContractMethod<
    [_coreVaultManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCoreVaultMinimumAmountLeftBIPS"
  ): TypedContractMethod<
    [_minimumAmountLeftBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCoreVaultMinimumRedeemLots"
  ): TypedContractMethod<
    [_minimumRedeemLots: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCoreVaultNativeAddress"
  ): TypedContractMethod<[_nativeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCoreVaultRedemptionFeeBIPS"
  ): TypedContractMethod<
    [_redemptionFeeBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCoreVaultTransferTimeExtensionSeconds"
  ): TypedContractMethod<
    [_transferTimeExtensionSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmergencyPauseDurationResetAfterSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFdcVerification"
  ): TypedContractMethod<[_value: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidationPaymentFactors"
  ): TypedContractMethod<
    [
      _liquidationFactors: BigNumberish[],
      _vaultCollateralFactors: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationStepSeconds"
  ): TypedContractMethod<[_stepSeconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLotSizeAmg"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxEmergencyPauseDurationSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxRedeemedTickets"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxTrustedPriceAgeSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinUpdateRepeatTimeSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintingCapAmg"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintingPoolHoldingsRequiredBIPS"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaymentChallengeReward"
  ): TypedContractMethod<
    [_rewardNATWei: BigNumberish, _rewardBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolExitCRChangeTimelockSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceReader"
  ): TypedContractMethod<[_value: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRedemptionDefaultFactorVaultCollateralBIPS"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRedemptionFeeBips"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRedemptionPaymentExtensionSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimeForPayment"
  ): TypedContractMethod<
    [_underlyingBlocks: BigNumberish, _underlyingSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenInvalidationTimeMinSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVaultCollateralBuyForFlareFactorBIPS"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawalOrDestroyWaitMinSeconds"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startLiquidation"
  ): TypedContractMethod<[_agentVault: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "switchToProductionMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "switchVaultCollateral"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToCoreVault"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _amountUBA: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpauseMinting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstickMinting"
  ): TypedContractMethod<
    [
      _proof: IConfirmedBlockHeightExists.ProofStruct,
      _collateralReservationId: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateCollateral"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCurrentBlock"
  ): TypedContractMethod<
    [_proof: IConfirmedBlockHeightExists.ProofStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSystemContracts"
  ): TypedContractMethod<
    [_controller: AddressLike, _wNat: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeAgentVaultAndPool"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeAgentVaultsAndPools"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeFAssetImplementation"
  ): TypedContractMethod<
    [_value: AddressLike, callData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeWNatContract"
  ): TypedContractMethod<[_agentVault: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AgentAvailable"
  ): TypedContractEvent<
    AgentAvailableEvent.InputTuple,
    AgentAvailableEvent.OutputTuple,
    AgentAvailableEvent.OutputObject
  >;
  getEvent(
    key: "AgentCollateralTypeChanged"
  ): TypedContractEvent<
    AgentCollateralTypeChangedEvent.InputTuple,
    AgentCollateralTypeChangedEvent.OutputTuple,
    AgentCollateralTypeChangedEvent.OutputObject
  >;
  getEvent(
    key: "AgentDestroyAnnounced"
  ): TypedContractEvent<
    AgentDestroyAnnouncedEvent.InputTuple,
    AgentDestroyAnnouncedEvent.OutputTuple,
    AgentDestroyAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "AgentDestroyed"
  ): TypedContractEvent<
    AgentDestroyedEvent.InputTuple,
    AgentDestroyedEvent.OutputTuple,
    AgentDestroyedEvent.OutputObject
  >;
  getEvent(
    key: "AgentPing"
  ): TypedContractEvent<
    AgentPingEvent.InputTuple,
    AgentPingEvent.OutputTuple,
    AgentPingEvent.OutputObject
  >;
  getEvent(
    key: "AgentPingResponse"
  ): TypedContractEvent<
    AgentPingResponseEvent.InputTuple,
    AgentPingResponseEvent.OutputTuple,
    AgentPingResponseEvent.OutputObject
  >;
  getEvent(
    key: "AgentSettingChangeAnnounced"
  ): TypedContractEvent<
    AgentSettingChangeAnnouncedEvent.InputTuple,
    AgentSettingChangeAnnouncedEvent.OutputTuple,
    AgentSettingChangeAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "AgentSettingChanged"
  ): TypedContractEvent<
    AgentSettingChangedEvent.InputTuple,
    AgentSettingChangedEvent.OutputTuple,
    AgentSettingChangedEvent.OutputObject
  >;
  getEvent(
    key: "AgentVaultCreated"
  ): TypedContractEvent<
    AgentVaultCreatedEvent.InputTuple,
    AgentVaultCreatedEvent.OutputTuple,
    AgentVaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AvailableAgentExitAnnounced"
  ): TypedContractEvent<
    AvailableAgentExitAnnouncedEvent.InputTuple,
    AvailableAgentExitAnnouncedEvent.OutputTuple,
    AvailableAgentExitAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "AvailableAgentExited"
  ): TypedContractEvent<
    AvailableAgentExitedEvent.InputTuple,
    AvailableAgentExitedEvent.OutputTuple,
    AvailableAgentExitedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralRatiosChanged"
  ): TypedContractEvent<
    CollateralRatiosChangedEvent.InputTuple,
    CollateralRatiosChangedEvent.OutputTuple,
    CollateralRatiosChangedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralReservationDeleted"
  ): TypedContractEvent<
    CollateralReservationDeletedEvent.InputTuple,
    CollateralReservationDeletedEvent.OutputTuple,
    CollateralReservationDeletedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralReserved"
  ): TypedContractEvent<
    CollateralReservedEvent.InputTuple,
    CollateralReservedEvent.OutputTuple,
    CollateralReservedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralTypeAdded"
  ): TypedContractEvent<
    CollateralTypeAddedEvent.InputTuple,
    CollateralTypeAddedEvent.OutputTuple,
    CollateralTypeAddedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralTypeDeprecated"
  ): TypedContractEvent<
    CollateralTypeDeprecatedEvent.InputTuple,
    CollateralTypeDeprecatedEvent.OutputTuple,
    CollateralTypeDeprecatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractChanged"
  ): TypedContractEvent<
    ContractChangedEvent.InputTuple,
    ContractChangedEvent.OutputTuple,
    ContractChangedEvent.OutputObject
  >;
  getEvent(
    key: "CoreVaultRedemptionRequested"
  ): TypedContractEvent<
    CoreVaultRedemptionRequestedEvent.InputTuple,
    CoreVaultRedemptionRequestedEvent.OutputTuple,
    CoreVaultRedemptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "CurrentUnderlyingBlockUpdated"
  ): TypedContractEvent<
    CurrentUnderlyingBlockUpdatedEvent.InputTuple,
    CurrentUnderlyingBlockUpdatedEvent.OutputTuple,
    CurrentUnderlyingBlockUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DiamondCut"
  ): TypedContractEvent<
    DiamondCutEvent.InputTuple,
    DiamondCutEvent.OutputTuple,
    DiamondCutEvent.OutputObject
  >;
  getEvent(
    key: "DuplicatePaymentConfirmed"
  ): TypedContractEvent<
    DuplicatePaymentConfirmedEvent.InputTuple,
    DuplicatePaymentConfirmedEvent.OutputTuple,
    DuplicatePaymentConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "DustChanged"
  ): TypedContractEvent<
    DustChangedEvent.InputTuple,
    DustChangedEvent.OutputTuple,
    DustChangedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseCanceled"
  ): TypedContractEvent<
    EmergencyPauseCanceledEvent.InputTuple,
    EmergencyPauseCanceledEvent.OutputTuple,
    EmergencyPauseCanceledEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseTransfersCanceled"
  ): TypedContractEvent<
    EmergencyPauseTransfersCanceledEvent.InputTuple,
    EmergencyPauseTransfersCanceledEvent.OutputTuple,
    EmergencyPauseTransfersCanceledEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseTransfersTriggered"
  ): TypedContractEvent<
    EmergencyPauseTransfersTriggeredEvent.InputTuple,
    EmergencyPauseTransfersTriggeredEvent.OutputTuple,
    EmergencyPauseTransfersTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseTriggered"
  ): TypedContractEvent<
    EmergencyPauseTriggeredEvent.InputTuple,
    EmergencyPauseTriggeredEvent.OutputTuple,
    EmergencyPauseTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "FullLiquidationStarted"
  ): TypedContractEvent<
    FullLiquidationStartedEvent.InputTuple,
    FullLiquidationStartedEvent.OutputTuple,
    FullLiquidationStartedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceCallTimelocked"
  ): TypedContractEvent<
    GovernanceCallTimelockedEvent.InputTuple,
    GovernanceCallTimelockedEvent.OutputTuple,
    GovernanceCallTimelockedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceInitialised"
  ): TypedContractEvent<
    GovernanceInitialisedEvent.InputTuple,
    GovernanceInitialisedEvent.OutputTuple,
    GovernanceInitialisedEvent.OutputObject
  >;
  getEvent(
    key: "GovernedProductionModeEntered"
  ): TypedContractEvent<
    GovernedProductionModeEnteredEvent.InputTuple,
    GovernedProductionModeEnteredEvent.OutputTuple,
    GovernedProductionModeEnteredEvent.OutputObject
  >;
  getEvent(
    key: "IllegalPaymentConfirmed"
  ): TypedContractEvent<
    IllegalPaymentConfirmedEvent.InputTuple,
    IllegalPaymentConfirmedEvent.OutputTuple,
    IllegalPaymentConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationEnded"
  ): TypedContractEvent<
    LiquidationEndedEvent.InputTuple,
    LiquidationEndedEvent.OutputTuple,
    LiquidationEndedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationPerformed"
  ): TypedContractEvent<
    LiquidationPerformedEvent.InputTuple,
    LiquidationPerformedEvent.OutputTuple,
    LiquidationPerformedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationStarted"
  ): TypedContractEvent<
    LiquidationStartedEvent.InputTuple,
    LiquidationStartedEvent.OutputTuple,
    LiquidationStartedEvent.OutputObject
  >;
  getEvent(
    key: "MintingExecuted"
  ): TypedContractEvent<
    MintingExecutedEvent.InputTuple,
    MintingExecutedEvent.OutputTuple,
    MintingExecutedEvent.OutputObject
  >;
  getEvent(
    key: "MintingPaymentDefault"
  ): TypedContractEvent<
    MintingPaymentDefaultEvent.InputTuple,
    MintingPaymentDefaultEvent.OutputTuple,
    MintingPaymentDefaultEvent.OutputObject
  >;
  getEvent(
    key: "PoolTokenRedemptionAnnounced"
  ): TypedContractEvent<
    PoolTokenRedemptionAnnouncedEvent.InputTuple,
    PoolTokenRedemptionAnnouncedEvent.OutputTuple,
    PoolTokenRedemptionAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "RedeemedInCollateral"
  ): TypedContractEvent<
    RedeemedInCollateralEvent.InputTuple,
    RedeemedInCollateralEvent.OutputTuple,
    RedeemedInCollateralEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionDefault"
  ): TypedContractEvent<
    RedemptionDefaultEvent.InputTuple,
    RedemptionDefaultEvent.OutputTuple,
    RedemptionDefaultEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionPaymentBlocked"
  ): TypedContractEvent<
    RedemptionPaymentBlockedEvent.InputTuple,
    RedemptionPaymentBlockedEvent.OutputTuple,
    RedemptionPaymentBlockedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionPaymentFailed"
  ): TypedContractEvent<
    RedemptionPaymentFailedEvent.InputTuple,
    RedemptionPaymentFailedEvent.OutputTuple,
    RedemptionPaymentFailedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionPerformed"
  ): TypedContractEvent<
    RedemptionPerformedEvent.InputTuple,
    RedemptionPerformedEvent.OutputTuple,
    RedemptionPerformedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionPoolFeeMinted"
  ): TypedContractEvent<
    RedemptionPoolFeeMintedEvent.InputTuple,
    RedemptionPoolFeeMintedEvent.OutputTuple,
    RedemptionPoolFeeMintedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionRejected"
  ): TypedContractEvent<
    RedemptionRejectedEvent.InputTuple,
    RedemptionRejectedEvent.OutputTuple,
    RedemptionRejectedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionRequestIncomplete"
  ): TypedContractEvent<
    RedemptionRequestIncompleteEvent.InputTuple,
    RedemptionRequestIncompleteEvent.OutputTuple,
    RedemptionRequestIncompleteEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionRequested"
  ): TypedContractEvent<
    RedemptionRequestedEvent.InputTuple,
    RedemptionRequestedEvent.OutputTuple,
    RedemptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionTicketCreated"
  ): TypedContractEvent<
    RedemptionTicketCreatedEvent.InputTuple,
    RedemptionTicketCreatedEvent.OutputTuple,
    RedemptionTicketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionTicketDeleted"
  ): TypedContractEvent<
    RedemptionTicketDeletedEvent.InputTuple,
    RedemptionTicketDeletedEvent.OutputTuple,
    RedemptionTicketDeletedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionTicketUpdated"
  ): TypedContractEvent<
    RedemptionTicketUpdatedEvent.InputTuple,
    RedemptionTicketUpdatedEvent.OutputTuple,
    RedemptionTicketUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReturnFromCoreVaultCancelled"
  ): TypedContractEvent<
    ReturnFromCoreVaultCancelledEvent.InputTuple,
    ReturnFromCoreVaultCancelledEvent.OutputTuple,
    ReturnFromCoreVaultCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ReturnFromCoreVaultConfirmed"
  ): TypedContractEvent<
    ReturnFromCoreVaultConfirmedEvent.InputTuple,
    ReturnFromCoreVaultConfirmedEvent.OutputTuple,
    ReturnFromCoreVaultConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "ReturnFromCoreVaultRequested"
  ): TypedContractEvent<
    ReturnFromCoreVaultRequestedEvent.InputTuple,
    ReturnFromCoreVaultRequestedEvent.OutputTuple,
    ReturnFromCoreVaultRequestedEvent.OutputObject
  >;
  getEvent(
    key: "SelfClose"
  ): TypedContractEvent<
    SelfCloseEvent.InputTuple,
    SelfCloseEvent.OutputTuple,
    SelfCloseEvent.OutputObject
  >;
  getEvent(
    key: "SelfMint"
  ): TypedContractEvent<
    SelfMintEvent.InputTuple,
    SelfMintEvent.OutputTuple,
    SelfMintEvent.OutputObject
  >;
  getEvent(
    key: "SettingArrayChanged"
  ): TypedContractEvent<
    SettingArrayChangedEvent.InputTuple,
    SettingArrayChangedEvent.OutputTuple,
    SettingArrayChangedEvent.OutputObject
  >;
  getEvent(
    key: "SettingChanged"
  ): TypedContractEvent<
    SettingChangedEvent.InputTuple,
    SettingChangedEvent.OutputTuple,
    SettingChangedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallCanceled"
  ): TypedContractEvent<
    TimelockedGovernanceCallCanceledEvent.InputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallExecuted"
  ): TypedContractEvent<
    TimelockedGovernanceCallExecutedEvent.InputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransferToCoreVaultDefaulted"
  ): TypedContractEvent<
    TransferToCoreVaultDefaultedEvent.InputTuple,
    TransferToCoreVaultDefaultedEvent.OutputTuple,
    TransferToCoreVaultDefaultedEvent.OutputObject
  >;
  getEvent(
    key: "TransferToCoreVaultStarted"
  ): TypedContractEvent<
    TransferToCoreVaultStartedEvent.InputTuple,
    TransferToCoreVaultStartedEvent.OutputTuple,
    TransferToCoreVaultStartedEvent.OutputObject
  >;
  getEvent(
    key: "TransferToCoreVaultSuccessful"
  ): TypedContractEvent<
    TransferToCoreVaultSuccessfulEvent.InputTuple,
    TransferToCoreVaultSuccessfulEvent.OutputTuple,
    TransferToCoreVaultSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingBalanceChanged"
  ): TypedContractEvent<
    UnderlyingBalanceChangedEvent.InputTuple,
    UnderlyingBalanceChangedEvent.OutputTuple,
    UnderlyingBalanceChangedEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingBalanceTooLow"
  ): TypedContractEvent<
    UnderlyingBalanceTooLowEvent.InputTuple,
    UnderlyingBalanceTooLowEvent.OutputTuple,
    UnderlyingBalanceTooLowEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingBalanceToppedUp"
  ): TypedContractEvent<
    UnderlyingBalanceToppedUpEvent.InputTuple,
    UnderlyingBalanceToppedUpEvent.OutputTuple,
    UnderlyingBalanceToppedUpEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingWithdrawalAnnounced"
  ): TypedContractEvent<
    UnderlyingWithdrawalAnnouncedEvent.InputTuple,
    UnderlyingWithdrawalAnnouncedEvent.OutputTuple,
    UnderlyingWithdrawalAnnouncedEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingWithdrawalCancelled"
  ): TypedContractEvent<
    UnderlyingWithdrawalCancelledEvent.InputTuple,
    UnderlyingWithdrawalCancelledEvent.OutputTuple,
    UnderlyingWithdrawalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingWithdrawalConfirmed"
  ): TypedContractEvent<
    UnderlyingWithdrawalConfirmedEvent.InputTuple,
    UnderlyingWithdrawalConfirmedEvent.OutputTuple,
    UnderlyingWithdrawalConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "VaultCollateralWithdrawalAnnounced"
  ): TypedContractEvent<
    VaultCollateralWithdrawalAnnouncedEvent.InputTuple,
    VaultCollateralWithdrawalAnnouncedEvent.OutputTuple,
    VaultCollateralWithdrawalAnnouncedEvent.OutputObject
  >;

  filters: {
    "AgentAvailable(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AgentAvailableEvent.InputTuple,
      AgentAvailableEvent.OutputTuple,
      AgentAvailableEvent.OutputObject
    >;
    AgentAvailable: TypedContractEvent<
      AgentAvailableEvent.InputTuple,
      AgentAvailableEvent.OutputTuple,
      AgentAvailableEvent.OutputObject
    >;

    "AgentCollateralTypeChanged(address,uint8,address)": TypedContractEvent<
      AgentCollateralTypeChangedEvent.InputTuple,
      AgentCollateralTypeChangedEvent.OutputTuple,
      AgentCollateralTypeChangedEvent.OutputObject
    >;
    AgentCollateralTypeChanged: TypedContractEvent<
      AgentCollateralTypeChangedEvent.InputTuple,
      AgentCollateralTypeChangedEvent.OutputTuple,
      AgentCollateralTypeChangedEvent.OutputObject
    >;

    "AgentDestroyAnnounced(address,uint256)": TypedContractEvent<
      AgentDestroyAnnouncedEvent.InputTuple,
      AgentDestroyAnnouncedEvent.OutputTuple,
      AgentDestroyAnnouncedEvent.OutputObject
    >;
    AgentDestroyAnnounced: TypedContractEvent<
      AgentDestroyAnnouncedEvent.InputTuple,
      AgentDestroyAnnouncedEvent.OutputTuple,
      AgentDestroyAnnouncedEvent.OutputObject
    >;

    "AgentDestroyed(address)": TypedContractEvent<
      AgentDestroyedEvent.InputTuple,
      AgentDestroyedEvent.OutputTuple,
      AgentDestroyedEvent.OutputObject
    >;
    AgentDestroyed: TypedContractEvent<
      AgentDestroyedEvent.InputTuple,
      AgentDestroyedEvent.OutputTuple,
      AgentDestroyedEvent.OutputObject
    >;

    "AgentPing(address,address,uint256)": TypedContractEvent<
      AgentPingEvent.InputTuple,
      AgentPingEvent.OutputTuple,
      AgentPingEvent.OutputObject
    >;
    AgentPing: TypedContractEvent<
      AgentPingEvent.InputTuple,
      AgentPingEvent.OutputTuple,
      AgentPingEvent.OutputObject
    >;

    "AgentPingResponse(address,address,uint256,string)": TypedContractEvent<
      AgentPingResponseEvent.InputTuple,
      AgentPingResponseEvent.OutputTuple,
      AgentPingResponseEvent.OutputObject
    >;
    AgentPingResponse: TypedContractEvent<
      AgentPingResponseEvent.InputTuple,
      AgentPingResponseEvent.OutputTuple,
      AgentPingResponseEvent.OutputObject
    >;

    "AgentSettingChangeAnnounced(address,string,uint256,uint256)": TypedContractEvent<
      AgentSettingChangeAnnouncedEvent.InputTuple,
      AgentSettingChangeAnnouncedEvent.OutputTuple,
      AgentSettingChangeAnnouncedEvent.OutputObject
    >;
    AgentSettingChangeAnnounced: TypedContractEvent<
      AgentSettingChangeAnnouncedEvent.InputTuple,
      AgentSettingChangeAnnouncedEvent.OutputTuple,
      AgentSettingChangeAnnouncedEvent.OutputObject
    >;

    "AgentSettingChanged(address,string,uint256)": TypedContractEvent<
      AgentSettingChangedEvent.InputTuple,
      AgentSettingChangedEvent.OutputTuple,
      AgentSettingChangedEvent.OutputObject
    >;
    AgentSettingChanged: TypedContractEvent<
      AgentSettingChangedEvent.InputTuple,
      AgentSettingChangedEvent.OutputTuple,
      AgentSettingChangedEvent.OutputObject
    >;

    "AgentVaultCreated(address,address,tuple)": TypedContractEvent<
      AgentVaultCreatedEvent.InputTuple,
      AgentVaultCreatedEvent.OutputTuple,
      AgentVaultCreatedEvent.OutputObject
    >;
    AgentVaultCreated: TypedContractEvent<
      AgentVaultCreatedEvent.InputTuple,
      AgentVaultCreatedEvent.OutputTuple,
      AgentVaultCreatedEvent.OutputObject
    >;

    "AvailableAgentExitAnnounced(address,uint256)": TypedContractEvent<
      AvailableAgentExitAnnouncedEvent.InputTuple,
      AvailableAgentExitAnnouncedEvent.OutputTuple,
      AvailableAgentExitAnnouncedEvent.OutputObject
    >;
    AvailableAgentExitAnnounced: TypedContractEvent<
      AvailableAgentExitAnnouncedEvent.InputTuple,
      AvailableAgentExitAnnouncedEvent.OutputTuple,
      AvailableAgentExitAnnouncedEvent.OutputObject
    >;

    "AvailableAgentExited(address)": TypedContractEvent<
      AvailableAgentExitedEvent.InputTuple,
      AvailableAgentExitedEvent.OutputTuple,
      AvailableAgentExitedEvent.OutputObject
    >;
    AvailableAgentExited: TypedContractEvent<
      AvailableAgentExitedEvent.InputTuple,
      AvailableAgentExitedEvent.OutputTuple,
      AvailableAgentExitedEvent.OutputObject
    >;

    "CollateralRatiosChanged(uint8,address,uint256,uint256)": TypedContractEvent<
      CollateralRatiosChangedEvent.InputTuple,
      CollateralRatiosChangedEvent.OutputTuple,
      CollateralRatiosChangedEvent.OutputObject
    >;
    CollateralRatiosChanged: TypedContractEvent<
      CollateralRatiosChangedEvent.InputTuple,
      CollateralRatiosChangedEvent.OutputTuple,
      CollateralRatiosChangedEvent.OutputObject
    >;

    "CollateralReservationDeleted(address,address,uint256,uint256)": TypedContractEvent<
      CollateralReservationDeletedEvent.InputTuple,
      CollateralReservationDeletedEvent.OutputTuple,
      CollateralReservationDeletedEvent.OutputObject
    >;
    CollateralReservationDeleted: TypedContractEvent<
      CollateralReservationDeletedEvent.InputTuple,
      CollateralReservationDeletedEvent.OutputTuple,
      CollateralReservationDeletedEvent.OutputObject
    >;

    "CollateralReserved(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,bytes32,address,uint256)": TypedContractEvent<
      CollateralReservedEvent.InputTuple,
      CollateralReservedEvent.OutputTuple,
      CollateralReservedEvent.OutputObject
    >;
    CollateralReserved: TypedContractEvent<
      CollateralReservedEvent.InputTuple,
      CollateralReservedEvent.OutputTuple,
      CollateralReservedEvent.OutputObject
    >;

    "CollateralTypeAdded(uint8,address,uint256,bool,string,string,uint256,uint256)": TypedContractEvent<
      CollateralTypeAddedEvent.InputTuple,
      CollateralTypeAddedEvent.OutputTuple,
      CollateralTypeAddedEvent.OutputObject
    >;
    CollateralTypeAdded: TypedContractEvent<
      CollateralTypeAddedEvent.InputTuple,
      CollateralTypeAddedEvent.OutputTuple,
      CollateralTypeAddedEvent.OutputObject
    >;

    "CollateralTypeDeprecated(uint8,address,uint256)": TypedContractEvent<
      CollateralTypeDeprecatedEvent.InputTuple,
      CollateralTypeDeprecatedEvent.OutputTuple,
      CollateralTypeDeprecatedEvent.OutputObject
    >;
    CollateralTypeDeprecated: TypedContractEvent<
      CollateralTypeDeprecatedEvent.InputTuple,
      CollateralTypeDeprecatedEvent.OutputTuple,
      CollateralTypeDeprecatedEvent.OutputObject
    >;

    "ContractChanged(string,address)": TypedContractEvent<
      ContractChangedEvent.InputTuple,
      ContractChangedEvent.OutputTuple,
      ContractChangedEvent.OutputObject
    >;
    ContractChanged: TypedContractEvent<
      ContractChangedEvent.InputTuple,
      ContractChangedEvent.OutputTuple,
      ContractChangedEvent.OutputObject
    >;

    "CoreVaultRedemptionRequested(address,string,bytes32,uint256,uint256)": TypedContractEvent<
      CoreVaultRedemptionRequestedEvent.InputTuple,
      CoreVaultRedemptionRequestedEvent.OutputTuple,
      CoreVaultRedemptionRequestedEvent.OutputObject
    >;
    CoreVaultRedemptionRequested: TypedContractEvent<
      CoreVaultRedemptionRequestedEvent.InputTuple,
      CoreVaultRedemptionRequestedEvent.OutputTuple,
      CoreVaultRedemptionRequestedEvent.OutputObject
    >;

    "CurrentUnderlyingBlockUpdated(uint256,uint256,uint256)": TypedContractEvent<
      CurrentUnderlyingBlockUpdatedEvent.InputTuple,
      CurrentUnderlyingBlockUpdatedEvent.OutputTuple,
      CurrentUnderlyingBlockUpdatedEvent.OutputObject
    >;
    CurrentUnderlyingBlockUpdated: TypedContractEvent<
      CurrentUnderlyingBlockUpdatedEvent.InputTuple,
      CurrentUnderlyingBlockUpdatedEvent.OutputTuple,
      CurrentUnderlyingBlockUpdatedEvent.OutputObject
    >;

    "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
      DiamondCutEvent.InputTuple,
      DiamondCutEvent.OutputTuple,
      DiamondCutEvent.OutputObject
    >;
    DiamondCut: TypedContractEvent<
      DiamondCutEvent.InputTuple,
      DiamondCutEvent.OutputTuple,
      DiamondCutEvent.OutputObject
    >;

    "DuplicatePaymentConfirmed(address,bytes32,bytes32)": TypedContractEvent<
      DuplicatePaymentConfirmedEvent.InputTuple,
      DuplicatePaymentConfirmedEvent.OutputTuple,
      DuplicatePaymentConfirmedEvent.OutputObject
    >;
    DuplicatePaymentConfirmed: TypedContractEvent<
      DuplicatePaymentConfirmedEvent.InputTuple,
      DuplicatePaymentConfirmedEvent.OutputTuple,
      DuplicatePaymentConfirmedEvent.OutputObject
    >;

    "DustChanged(address,uint256)": TypedContractEvent<
      DustChangedEvent.InputTuple,
      DustChangedEvent.OutputTuple,
      DustChangedEvent.OutputObject
    >;
    DustChanged: TypedContractEvent<
      DustChangedEvent.InputTuple,
      DustChangedEvent.OutputTuple,
      DustChangedEvent.OutputObject
    >;

    "EmergencyPauseCanceled()": TypedContractEvent<
      EmergencyPauseCanceledEvent.InputTuple,
      EmergencyPauseCanceledEvent.OutputTuple,
      EmergencyPauseCanceledEvent.OutputObject
    >;
    EmergencyPauseCanceled: TypedContractEvent<
      EmergencyPauseCanceledEvent.InputTuple,
      EmergencyPauseCanceledEvent.OutputTuple,
      EmergencyPauseCanceledEvent.OutputObject
    >;

    "EmergencyPauseTransfersCanceled()": TypedContractEvent<
      EmergencyPauseTransfersCanceledEvent.InputTuple,
      EmergencyPauseTransfersCanceledEvent.OutputTuple,
      EmergencyPauseTransfersCanceledEvent.OutputObject
    >;
    EmergencyPauseTransfersCanceled: TypedContractEvent<
      EmergencyPauseTransfersCanceledEvent.InputTuple,
      EmergencyPauseTransfersCanceledEvent.OutputTuple,
      EmergencyPauseTransfersCanceledEvent.OutputObject
    >;

    "EmergencyPauseTransfersTriggered(uint256)": TypedContractEvent<
      EmergencyPauseTransfersTriggeredEvent.InputTuple,
      EmergencyPauseTransfersTriggeredEvent.OutputTuple,
      EmergencyPauseTransfersTriggeredEvent.OutputObject
    >;
    EmergencyPauseTransfersTriggered: TypedContractEvent<
      EmergencyPauseTransfersTriggeredEvent.InputTuple,
      EmergencyPauseTransfersTriggeredEvent.OutputTuple,
      EmergencyPauseTransfersTriggeredEvent.OutputObject
    >;

    "EmergencyPauseTriggered(uint8,uint256)": TypedContractEvent<
      EmergencyPauseTriggeredEvent.InputTuple,
      EmergencyPauseTriggeredEvent.OutputTuple,
      EmergencyPauseTriggeredEvent.OutputObject
    >;
    EmergencyPauseTriggered: TypedContractEvent<
      EmergencyPauseTriggeredEvent.InputTuple,
      EmergencyPauseTriggeredEvent.OutputTuple,
      EmergencyPauseTriggeredEvent.OutputObject
    >;

    "FullLiquidationStarted(address,uint256)": TypedContractEvent<
      FullLiquidationStartedEvent.InputTuple,
      FullLiquidationStartedEvent.OutputTuple,
      FullLiquidationStartedEvent.OutputObject
    >;
    FullLiquidationStarted: TypedContractEvent<
      FullLiquidationStartedEvent.InputTuple,
      FullLiquidationStartedEvent.OutputTuple,
      FullLiquidationStartedEvent.OutputObject
    >;

    "GovernanceCallTimelocked(bytes,bytes32,uint256)": TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;
    GovernanceCallTimelocked: TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;

    "GovernanceInitialised(address)": TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;
    GovernanceInitialised: TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;

    "GovernedProductionModeEntered(address)": TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;
    GovernedProductionModeEntered: TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;

    "IllegalPaymentConfirmed(address,bytes32)": TypedContractEvent<
      IllegalPaymentConfirmedEvent.InputTuple,
      IllegalPaymentConfirmedEvent.OutputTuple,
      IllegalPaymentConfirmedEvent.OutputObject
    >;
    IllegalPaymentConfirmed: TypedContractEvent<
      IllegalPaymentConfirmedEvent.InputTuple,
      IllegalPaymentConfirmedEvent.OutputTuple,
      IllegalPaymentConfirmedEvent.OutputObject
    >;

    "LiquidationEnded(address)": TypedContractEvent<
      LiquidationEndedEvent.InputTuple,
      LiquidationEndedEvent.OutputTuple,
      LiquidationEndedEvent.OutputObject
    >;
    LiquidationEnded: TypedContractEvent<
      LiquidationEndedEvent.InputTuple,
      LiquidationEndedEvent.OutputTuple,
      LiquidationEndedEvent.OutputObject
    >;

    "LiquidationPerformed(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidationPerformedEvent.InputTuple,
      LiquidationPerformedEvent.OutputTuple,
      LiquidationPerformedEvent.OutputObject
    >;
    LiquidationPerformed: TypedContractEvent<
      LiquidationPerformedEvent.InputTuple,
      LiquidationPerformedEvent.OutputTuple,
      LiquidationPerformedEvent.OutputObject
    >;

    "LiquidationStarted(address,uint256)": TypedContractEvent<
      LiquidationStartedEvent.InputTuple,
      LiquidationStartedEvent.OutputTuple,
      LiquidationStartedEvent.OutputObject
    >;
    LiquidationStarted: TypedContractEvent<
      LiquidationStartedEvent.InputTuple,
      LiquidationStartedEvent.OutputTuple,
      LiquidationStartedEvent.OutputObject
    >;

    "MintingExecuted(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MintingExecutedEvent.InputTuple,
      MintingExecutedEvent.OutputTuple,
      MintingExecutedEvent.OutputObject
    >;
    MintingExecuted: TypedContractEvent<
      MintingExecutedEvent.InputTuple,
      MintingExecutedEvent.OutputTuple,
      MintingExecutedEvent.OutputObject
    >;

    "MintingPaymentDefault(address,address,uint256,uint256)": TypedContractEvent<
      MintingPaymentDefaultEvent.InputTuple,
      MintingPaymentDefaultEvent.OutputTuple,
      MintingPaymentDefaultEvent.OutputObject
    >;
    MintingPaymentDefault: TypedContractEvent<
      MintingPaymentDefaultEvent.InputTuple,
      MintingPaymentDefaultEvent.OutputTuple,
      MintingPaymentDefaultEvent.OutputObject
    >;

    "PoolTokenRedemptionAnnounced(address,uint256,uint256)": TypedContractEvent<
      PoolTokenRedemptionAnnouncedEvent.InputTuple,
      PoolTokenRedemptionAnnouncedEvent.OutputTuple,
      PoolTokenRedemptionAnnouncedEvent.OutputObject
    >;
    PoolTokenRedemptionAnnounced: TypedContractEvent<
      PoolTokenRedemptionAnnouncedEvent.InputTuple,
      PoolTokenRedemptionAnnouncedEvent.OutputTuple,
      PoolTokenRedemptionAnnouncedEvent.OutputObject
    >;

    "RedeemedInCollateral(address,address,uint256,uint256)": TypedContractEvent<
      RedeemedInCollateralEvent.InputTuple,
      RedeemedInCollateralEvent.OutputTuple,
      RedeemedInCollateralEvent.OutputObject
    >;
    RedeemedInCollateral: TypedContractEvent<
      RedeemedInCollateralEvent.InputTuple,
      RedeemedInCollateralEvent.OutputTuple,
      RedeemedInCollateralEvent.OutputObject
    >;

    "RedemptionDefault(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RedemptionDefaultEvent.InputTuple,
      RedemptionDefaultEvent.OutputTuple,
      RedemptionDefaultEvent.OutputObject
    >;
    RedemptionDefault: TypedContractEvent<
      RedemptionDefaultEvent.InputTuple,
      RedemptionDefaultEvent.OutputTuple,
      RedemptionDefaultEvent.OutputObject
    >;

    "RedemptionPaymentBlocked(address,address,uint256,bytes32,uint256,int256)": TypedContractEvent<
      RedemptionPaymentBlockedEvent.InputTuple,
      RedemptionPaymentBlockedEvent.OutputTuple,
      RedemptionPaymentBlockedEvent.OutputObject
    >;
    RedemptionPaymentBlocked: TypedContractEvent<
      RedemptionPaymentBlockedEvent.InputTuple,
      RedemptionPaymentBlockedEvent.OutputTuple,
      RedemptionPaymentBlockedEvent.OutputObject
    >;

    "RedemptionPaymentFailed(address,address,uint256,bytes32,int256,string)": TypedContractEvent<
      RedemptionPaymentFailedEvent.InputTuple,
      RedemptionPaymentFailedEvent.OutputTuple,
      RedemptionPaymentFailedEvent.OutputObject
    >;
    RedemptionPaymentFailed: TypedContractEvent<
      RedemptionPaymentFailedEvent.InputTuple,
      RedemptionPaymentFailedEvent.OutputTuple,
      RedemptionPaymentFailedEvent.OutputObject
    >;

    "RedemptionPerformed(address,address,uint256,bytes32,uint256,int256)": TypedContractEvent<
      RedemptionPerformedEvent.InputTuple,
      RedemptionPerformedEvent.OutputTuple,
      RedemptionPerformedEvent.OutputObject
    >;
    RedemptionPerformed: TypedContractEvent<
      RedemptionPerformedEvent.InputTuple,
      RedemptionPerformedEvent.OutputTuple,
      RedemptionPerformedEvent.OutputObject
    >;

    "RedemptionPoolFeeMinted(address,uint256,uint256)": TypedContractEvent<
      RedemptionPoolFeeMintedEvent.InputTuple,
      RedemptionPoolFeeMintedEvent.OutputTuple,
      RedemptionPoolFeeMintedEvent.OutputObject
    >;
    RedemptionPoolFeeMinted: TypedContractEvent<
      RedemptionPoolFeeMintedEvent.InputTuple,
      RedemptionPoolFeeMintedEvent.OutputTuple,
      RedemptionPoolFeeMintedEvent.OutputObject
    >;

    "RedemptionRejected(address,address,uint256,uint256)": TypedContractEvent<
      RedemptionRejectedEvent.InputTuple,
      RedemptionRejectedEvent.OutputTuple,
      RedemptionRejectedEvent.OutputObject
    >;
    RedemptionRejected: TypedContractEvent<
      RedemptionRejectedEvent.InputTuple,
      RedemptionRejectedEvent.OutputTuple,
      RedemptionRejectedEvent.OutputObject
    >;

    "RedemptionRequestIncomplete(address,uint256)": TypedContractEvent<
      RedemptionRequestIncompleteEvent.InputTuple,
      RedemptionRequestIncompleteEvent.OutputTuple,
      RedemptionRequestIncompleteEvent.OutputObject
    >;
    RedemptionRequestIncomplete: TypedContractEvent<
      RedemptionRequestIncompleteEvent.InputTuple,
      RedemptionRequestIncompleteEvent.OutputTuple,
      RedemptionRequestIncompleteEvent.OutputObject
    >;

    "RedemptionRequested(address,address,uint256,string,uint256,uint256,uint256,uint256,uint256,bytes32,address,uint256)": TypedContractEvent<
      RedemptionRequestedEvent.InputTuple,
      RedemptionRequestedEvent.OutputTuple,
      RedemptionRequestedEvent.OutputObject
    >;
    RedemptionRequested: TypedContractEvent<
      RedemptionRequestedEvent.InputTuple,
      RedemptionRequestedEvent.OutputTuple,
      RedemptionRequestedEvent.OutputObject
    >;

    "RedemptionTicketCreated(address,uint256,uint256)": TypedContractEvent<
      RedemptionTicketCreatedEvent.InputTuple,
      RedemptionTicketCreatedEvent.OutputTuple,
      RedemptionTicketCreatedEvent.OutputObject
    >;
    RedemptionTicketCreated: TypedContractEvent<
      RedemptionTicketCreatedEvent.InputTuple,
      RedemptionTicketCreatedEvent.OutputTuple,
      RedemptionTicketCreatedEvent.OutputObject
    >;

    "RedemptionTicketDeleted(address,uint256)": TypedContractEvent<
      RedemptionTicketDeletedEvent.InputTuple,
      RedemptionTicketDeletedEvent.OutputTuple,
      RedemptionTicketDeletedEvent.OutputObject
    >;
    RedemptionTicketDeleted: TypedContractEvent<
      RedemptionTicketDeletedEvent.InputTuple,
      RedemptionTicketDeletedEvent.OutputTuple,
      RedemptionTicketDeletedEvent.OutputObject
    >;

    "RedemptionTicketUpdated(address,uint256,uint256)": TypedContractEvent<
      RedemptionTicketUpdatedEvent.InputTuple,
      RedemptionTicketUpdatedEvent.OutputTuple,
      RedemptionTicketUpdatedEvent.OutputObject
    >;
    RedemptionTicketUpdated: TypedContractEvent<
      RedemptionTicketUpdatedEvent.InputTuple,
      RedemptionTicketUpdatedEvent.OutputTuple,
      RedemptionTicketUpdatedEvent.OutputObject
    >;

    "ReturnFromCoreVaultCancelled(address,uint256)": TypedContractEvent<
      ReturnFromCoreVaultCancelledEvent.InputTuple,
      ReturnFromCoreVaultCancelledEvent.OutputTuple,
      ReturnFromCoreVaultCancelledEvent.OutputObject
    >;
    ReturnFromCoreVaultCancelled: TypedContractEvent<
      ReturnFromCoreVaultCancelledEvent.InputTuple,
      ReturnFromCoreVaultCancelledEvent.OutputTuple,
      ReturnFromCoreVaultCancelledEvent.OutputObject
    >;

    "ReturnFromCoreVaultConfirmed(address,uint256,uint256,uint256)": TypedContractEvent<
      ReturnFromCoreVaultConfirmedEvent.InputTuple,
      ReturnFromCoreVaultConfirmedEvent.OutputTuple,
      ReturnFromCoreVaultConfirmedEvent.OutputObject
    >;
    ReturnFromCoreVaultConfirmed: TypedContractEvent<
      ReturnFromCoreVaultConfirmedEvent.InputTuple,
      ReturnFromCoreVaultConfirmedEvent.OutputTuple,
      ReturnFromCoreVaultConfirmedEvent.OutputObject
    >;

    "ReturnFromCoreVaultRequested(address,uint256,bytes32,uint256)": TypedContractEvent<
      ReturnFromCoreVaultRequestedEvent.InputTuple,
      ReturnFromCoreVaultRequestedEvent.OutputTuple,
      ReturnFromCoreVaultRequestedEvent.OutputObject
    >;
    ReturnFromCoreVaultRequested: TypedContractEvent<
      ReturnFromCoreVaultRequestedEvent.InputTuple,
      ReturnFromCoreVaultRequestedEvent.OutputTuple,
      ReturnFromCoreVaultRequestedEvent.OutputObject
    >;

    "SelfClose(address,uint256)": TypedContractEvent<
      SelfCloseEvent.InputTuple,
      SelfCloseEvent.OutputTuple,
      SelfCloseEvent.OutputObject
    >;
    SelfClose: TypedContractEvent<
      SelfCloseEvent.InputTuple,
      SelfCloseEvent.OutputTuple,
      SelfCloseEvent.OutputObject
    >;

    "SelfMint(address,bool,uint256,uint256,uint256)": TypedContractEvent<
      SelfMintEvent.InputTuple,
      SelfMintEvent.OutputTuple,
      SelfMintEvent.OutputObject
    >;
    SelfMint: TypedContractEvent<
      SelfMintEvent.InputTuple,
      SelfMintEvent.OutputTuple,
      SelfMintEvent.OutputObject
    >;

    "SettingArrayChanged(string,uint256[])": TypedContractEvent<
      SettingArrayChangedEvent.InputTuple,
      SettingArrayChangedEvent.OutputTuple,
      SettingArrayChangedEvent.OutputObject
    >;
    SettingArrayChanged: TypedContractEvent<
      SettingArrayChangedEvent.InputTuple,
      SettingArrayChangedEvent.OutputTuple,
      SettingArrayChangedEvent.OutputObject
    >;

    "SettingChanged(string,uint256)": TypedContractEvent<
      SettingChangedEvent.InputTuple,
      SettingChangedEvent.OutputTuple,
      SettingChangedEvent.OutputObject
    >;
    SettingChanged: TypedContractEvent<
      SettingChangedEvent.InputTuple,
      SettingChangedEvent.OutputTuple,
      SettingChangedEvent.OutputObject
    >;

    "TimelockedGovernanceCallCanceled(bytes32)": TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;
    TimelockedGovernanceCallCanceled: TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;

    "TimelockedGovernanceCallExecuted(bytes32)": TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
    TimelockedGovernanceCallExecuted: TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;

    "TransferToCoreVaultDefaulted(address,uint256,uint256)": TypedContractEvent<
      TransferToCoreVaultDefaultedEvent.InputTuple,
      TransferToCoreVaultDefaultedEvent.OutputTuple,
      TransferToCoreVaultDefaultedEvent.OutputObject
    >;
    TransferToCoreVaultDefaulted: TypedContractEvent<
      TransferToCoreVaultDefaultedEvent.InputTuple,
      TransferToCoreVaultDefaultedEvent.OutputTuple,
      TransferToCoreVaultDefaultedEvent.OutputObject
    >;

    "TransferToCoreVaultStarted(address,uint256,uint256)": TypedContractEvent<
      TransferToCoreVaultStartedEvent.InputTuple,
      TransferToCoreVaultStartedEvent.OutputTuple,
      TransferToCoreVaultStartedEvent.OutputObject
    >;
    TransferToCoreVaultStarted: TypedContractEvent<
      TransferToCoreVaultStartedEvent.InputTuple,
      TransferToCoreVaultStartedEvent.OutputTuple,
      TransferToCoreVaultStartedEvent.OutputObject
    >;

    "TransferToCoreVaultSuccessful(address,uint256,uint256)": TypedContractEvent<
      TransferToCoreVaultSuccessfulEvent.InputTuple,
      TransferToCoreVaultSuccessfulEvent.OutputTuple,
      TransferToCoreVaultSuccessfulEvent.OutputObject
    >;
    TransferToCoreVaultSuccessful: TypedContractEvent<
      TransferToCoreVaultSuccessfulEvent.InputTuple,
      TransferToCoreVaultSuccessfulEvent.OutputTuple,
      TransferToCoreVaultSuccessfulEvent.OutputObject
    >;

    "UnderlyingBalanceChanged(address,int256)": TypedContractEvent<
      UnderlyingBalanceChangedEvent.InputTuple,
      UnderlyingBalanceChangedEvent.OutputTuple,
      UnderlyingBalanceChangedEvent.OutputObject
    >;
    UnderlyingBalanceChanged: TypedContractEvent<
      UnderlyingBalanceChangedEvent.InputTuple,
      UnderlyingBalanceChangedEvent.OutputTuple,
      UnderlyingBalanceChangedEvent.OutputObject
    >;

    "UnderlyingBalanceTooLow(address,int256,uint256)": TypedContractEvent<
      UnderlyingBalanceTooLowEvent.InputTuple,
      UnderlyingBalanceTooLowEvent.OutputTuple,
      UnderlyingBalanceTooLowEvent.OutputObject
    >;
    UnderlyingBalanceTooLow: TypedContractEvent<
      UnderlyingBalanceTooLowEvent.InputTuple,
      UnderlyingBalanceTooLowEvent.OutputTuple,
      UnderlyingBalanceTooLowEvent.OutputObject
    >;

    "UnderlyingBalanceToppedUp(address,bytes32,uint256)": TypedContractEvent<
      UnderlyingBalanceToppedUpEvent.InputTuple,
      UnderlyingBalanceToppedUpEvent.OutputTuple,
      UnderlyingBalanceToppedUpEvent.OutputObject
    >;
    UnderlyingBalanceToppedUp: TypedContractEvent<
      UnderlyingBalanceToppedUpEvent.InputTuple,
      UnderlyingBalanceToppedUpEvent.OutputTuple,
      UnderlyingBalanceToppedUpEvent.OutputObject
    >;

    "UnderlyingWithdrawalAnnounced(address,uint256,bytes32)": TypedContractEvent<
      UnderlyingWithdrawalAnnouncedEvent.InputTuple,
      UnderlyingWithdrawalAnnouncedEvent.OutputTuple,
      UnderlyingWithdrawalAnnouncedEvent.OutputObject
    >;
    UnderlyingWithdrawalAnnounced: TypedContractEvent<
      UnderlyingWithdrawalAnnouncedEvent.InputTuple,
      UnderlyingWithdrawalAnnouncedEvent.OutputTuple,
      UnderlyingWithdrawalAnnouncedEvent.OutputObject
    >;

    "UnderlyingWithdrawalCancelled(address,uint256)": TypedContractEvent<
      UnderlyingWithdrawalCancelledEvent.InputTuple,
      UnderlyingWithdrawalCancelledEvent.OutputTuple,
      UnderlyingWithdrawalCancelledEvent.OutputObject
    >;
    UnderlyingWithdrawalCancelled: TypedContractEvent<
      UnderlyingWithdrawalCancelledEvent.InputTuple,
      UnderlyingWithdrawalCancelledEvent.OutputTuple,
      UnderlyingWithdrawalCancelledEvent.OutputObject
    >;

    "UnderlyingWithdrawalConfirmed(address,uint256,int256,bytes32)": TypedContractEvent<
      UnderlyingWithdrawalConfirmedEvent.InputTuple,
      UnderlyingWithdrawalConfirmedEvent.OutputTuple,
      UnderlyingWithdrawalConfirmedEvent.OutputObject
    >;
    UnderlyingWithdrawalConfirmed: TypedContractEvent<
      UnderlyingWithdrawalConfirmedEvent.InputTuple,
      UnderlyingWithdrawalConfirmedEvent.OutputTuple,
      UnderlyingWithdrawalConfirmedEvent.OutputObject
    >;

    "VaultCollateralWithdrawalAnnounced(address,uint256,uint256)": TypedContractEvent<
      VaultCollateralWithdrawalAnnouncedEvent.InputTuple,
      VaultCollateralWithdrawalAnnouncedEvent.OutputTuple,
      VaultCollateralWithdrawalAnnouncedEvent.OutputObject
    >;
    VaultCollateralWithdrawalAnnounced: TypedContractEvent<
      VaultCollateralWithdrawalAnnouncedEvent.InputTuple,
      VaultCollateralWithdrawalAnnouncedEvent.OutputTuple,
      VaultCollateralWithdrawalAnnouncedEvent.OutputObject
    >;
  };
}
