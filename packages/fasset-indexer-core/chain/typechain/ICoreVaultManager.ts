/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPayment {
  export type RequestBodyStruct = {
    transactionId: BytesLike;
    inUtxo: BigNumberish;
    utxo: BigNumberish;
  };

  export type RequestBodyStructOutput = [
    transactionId: string,
    inUtxo: bigint,
    utxo: bigint
  ] & { transactionId: string; inUtxo: bigint; utxo: bigint };

  export type ResponseBodyStruct = {
    blockNumber: BigNumberish;
    blockTimestamp: BigNumberish;
    sourceAddressHash: BytesLike;
    sourceAddressesRoot: BytesLike;
    receivingAddressHash: BytesLike;
    intendedReceivingAddressHash: BytesLike;
    spentAmount: BigNumberish;
    intendedSpentAmount: BigNumberish;
    receivedAmount: BigNumberish;
    intendedReceivedAmount: BigNumberish;
    standardPaymentReference: BytesLike;
    oneToOne: boolean;
    status: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    blockNumber: bigint,
    blockTimestamp: bigint,
    sourceAddressHash: string,
    sourceAddressesRoot: string,
    receivingAddressHash: string,
    intendedReceivingAddressHash: string,
    spentAmount: bigint,
    intendedSpentAmount: bigint,
    receivedAmount: bigint,
    intendedReceivedAmount: bigint,
    standardPaymentReference: string,
    oneToOne: boolean,
    status: bigint
  ] & {
    blockNumber: bigint;
    blockTimestamp: bigint;
    sourceAddressHash: string;
    sourceAddressesRoot: string;
    receivingAddressHash: string;
    intendedReceivingAddressHash: string;
    spentAmount: bigint;
    intendedSpentAmount: bigint;
    receivedAmount: bigint;
    intendedReceivedAmount: bigint;
    standardPaymentReference: string;
    oneToOne: boolean;
    status: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IPayment.RequestBodyStruct;
    responseBody: IPayment.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IPayment.RequestBodyStructOutput,
    responseBody: IPayment.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IPayment.RequestBodyStructOutput;
    responseBody: IPayment.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IPayment.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IPayment.ResponseStructOutput
  ] & { merkleProof: string[]; data: IPayment.ResponseStructOutput };
}

export declare namespace ICoreVaultManager {
  export type TransferRequestStruct = {
    destinationAddress: string;
    paymentReference: BytesLike;
    amount: BigNumberish;
  };

  export type TransferRequestStructOutput = [
    destinationAddress: string,
    paymentReference: string,
    amount: bigint
  ] & { destinationAddress: string; paymentReference: string; amount: bigint };

  export type EscrowStruct = {
    preimageHash: BytesLike;
    amount: BigNumberish;
    expiryTs: BigNumberish;
    finished: boolean;
  };

  export type EscrowStructOutput = [
    preimageHash: string,
    amount: bigint,
    expiryTs: bigint,
    finished: boolean
  ] & {
    preimageHash: string;
    amount: bigint;
    expiryTs: bigint;
    finished: boolean;
  };
}

export interface ICoreVaultManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assetManager"
      | "availableFunds"
      | "cancelTransferRequestFromCoreVault"
      | "confirmPayment"
      | "coreVaultAddress"
      | "coreVaultAddressHash"
      | "custodianAddress"
      | "escrowedFunds"
      | "getAllowedDestinationAddresses"
      | "getCancelableTransferRequests"
      | "getEmergencyPauseSenders"
      | "getEscrowByIndex"
      | "getEscrowByPreimageHash"
      | "getEscrowsCount"
      | "getNonCancelableTransferRequests"
      | "getPreimageHash"
      | "getPreimageHashesCount"
      | "getSettings"
      | "getTriggeringAccounts"
      | "getUnprocessedEscrows"
      | "getUnusedPreimageHashes"
      | "isDestinationAddressAllowed"
      | "nextUnprocessedEscrowIndex"
      | "nextUnusedPreimageHashIndex"
      | "pause"
      | "paused"
      | "processEscrows"
      | "requestTransferFromCoreVault"
      | "totalRequestAmountWithFee"
      | "triggerInstructions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowedDestinationAddressAdded"
      | "AllowedDestinationAddressRemoved"
      | "CustodianAddressUpdated"
      | "CustomInstructions"
      | "EmergencyPauseSenderAdded"
      | "EmergencyPauseSenderRemoved"
      | "EscrowExpired"
      | "EscrowFinished"
      | "EscrowInstructions"
      | "NotAllEscrowsProcessed"
      | "Paused"
      | "PaymentConfirmed"
      | "PaymentInstructions"
      | "PreimageHashAdded"
      | "SettingsUpdated"
      | "TransferRequestCanceled"
      | "TransferRequested"
      | "TriggeringAccountAdded"
      | "TriggeringAccountRemoved"
      | "Unpaused"
      | "UnusedPreimageHashRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assetManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransferRequestFromCoreVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPayment",
    values: [IPayment.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "coreVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreVaultAddressHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "custodianAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowedFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedDestinationAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCancelableTransferRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyPauseSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowByPreimageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonCancelableTransferRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPreimageHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreimageHashesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTriggeringAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnprocessedEscrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnusedPreimageHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDestinationAddressAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextUnprocessedEscrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextUnusedPreimageHashIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processEscrows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTransferFromCoreVault",
    values: [string, BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRequestAmountWithFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggerInstructions",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "assetManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransferRequestFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreVaultAddressHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "custodianAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedDestinationAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancelableTransferRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyPauseSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowByPreimageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonCancelableTransferRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreimageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreimageHashesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTriggeringAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnprocessedEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnusedPreimageHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDestinationAddressAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextUnprocessedEscrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextUnusedPreimageHashIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTransferFromCoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRequestAmountWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerInstructions",
    data: BytesLike
  ): Result;
}

export namespace AllowedDestinationAddressAddedEvent {
  export type InputTuple = [destinationAddress: string];
  export type OutputTuple = [destinationAddress: string];
  export interface OutputObject {
    destinationAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowedDestinationAddressRemovedEvent {
  export type InputTuple = [destinationAddress: string];
  export type OutputTuple = [destinationAddress: string];
  export interface OutputObject {
    destinationAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CustodianAddressUpdatedEvent {
  export type InputTuple = [custodianAddress: string];
  export type OutputTuple = [custodianAddress: string];
  export interface OutputObject {
    custodianAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CustomInstructionsEvent {
  export type InputTuple = [
    sequence: BigNumberish,
    account: string,
    instructionsHash: BytesLike
  ];
  export type OutputTuple = [
    sequence: bigint,
    account: string,
    instructionsHash: string
  ];
  export interface OutputObject {
    sequence: bigint;
    account: string;
    instructionsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseSenderAddedEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseSenderRemovedEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowExpiredEvent {
  export type InputTuple = [preimageHash: BytesLike, amount: BigNumberish];
  export type OutputTuple = [preimageHash: string, amount: bigint];
  export interface OutputObject {
    preimageHash: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowFinishedEvent {
  export type InputTuple = [preimageHash: BytesLike, amount: BigNumberish];
  export type OutputTuple = [preimageHash: string, amount: bigint];
  export interface OutputObject {
    preimageHash: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowInstructionsEvent {
  export type InputTuple = [
    sequence: BigNumberish,
    preimageHash: BytesLike,
    account: string,
    destination: string,
    amount: BigNumberish,
    fee: BigNumberish,
    cancelAfterTs: BigNumberish
  ];
  export type OutputTuple = [
    sequence: bigint,
    preimageHash: string,
    account: string,
    destination: string,
    amount: bigint,
    fee: bigint,
    cancelAfterTs: bigint
  ];
  export interface OutputObject {
    sequence: bigint;
    preimageHash: string;
    account: string;
    destination: string;
    amount: bigint;
    fee: bigint;
    cancelAfterTs: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotAllEscrowsProcessedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentConfirmedEvent {
  export type InputTuple = [
    transactionId: BytesLike,
    paymentReference: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: string,
    paymentReference: string,
    amount: bigint
  ];
  export interface OutputObject {
    transactionId: string;
    paymentReference: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentInstructionsEvent {
  export type InputTuple = [
    sequence: BigNumberish,
    account: string,
    destination: string,
    amount: BigNumberish,
    fee: BigNumberish,
    paymentReference: BytesLike
  ];
  export type OutputTuple = [
    sequence: bigint,
    account: string,
    destination: string,
    amount: bigint,
    fee: bigint,
    paymentReference: string
  ];
  export interface OutputObject {
    sequence: bigint;
    account: string;
    destination: string;
    amount: bigint;
    fee: bigint;
    paymentReference: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreimageHashAddedEvent {
  export type InputTuple = [preimageHash: BytesLike];
  export type OutputTuple = [preimageHash: string];
  export interface OutputObject {
    preimageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettingsUpdatedEvent {
  export type InputTuple = [
    escrowEndTimeSeconds: BigNumberish,
    escrowAmount: BigNumberish,
    minimalAmount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    escrowEndTimeSeconds: bigint,
    escrowAmount: bigint,
    minimalAmount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    escrowEndTimeSeconds: bigint;
    escrowAmount: bigint;
    minimalAmount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRequestCanceledEvent {
  export type InputTuple = [
    destinationAddress: string,
    paymentReference: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    destinationAddress: string,
    paymentReference: string,
    amount: bigint
  ];
  export interface OutputObject {
    destinationAddress: string;
    paymentReference: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRequestedEvent {
  export type InputTuple = [
    destinationAddress: string,
    paymentReference: BytesLike,
    amount: BigNumberish,
    cancelable: boolean
  ];
  export type OutputTuple = [
    destinationAddress: string,
    paymentReference: string,
    amount: bigint,
    cancelable: boolean
  ];
  export interface OutputObject {
    destinationAddress: string;
    paymentReference: string;
    amount: bigint;
    cancelable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TriggeringAccountAddedEvent {
  export type InputTuple = [triggeringAccount: AddressLike];
  export type OutputTuple = [triggeringAccount: string];
  export interface OutputObject {
    triggeringAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TriggeringAccountRemovedEvent {
  export type InputTuple = [triggeringAccount: AddressLike];
  export type OutputTuple = [triggeringAccount: string];
  export interface OutputObject {
    triggeringAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnusedPreimageHashRemovedEvent {
  export type InputTuple = [preimageHash: BytesLike];
  export type OutputTuple = [preimageHash: string];
  export interface OutputObject {
    preimageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICoreVaultManager extends BaseContract {
  connect(runner?: ContractRunner | null): ICoreVaultManager;
  waitForDeployment(): Promise<this>;

  interface: ICoreVaultManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assetManager: TypedContractMethod<[], [string], "view">;

  availableFunds: TypedContractMethod<[], [bigint], "view">;

  cancelTransferRequestFromCoreVault: TypedContractMethod<
    [_destinationAddress: string],
    [void],
    "nonpayable"
  >;

  confirmPayment: TypedContractMethod<
    [_proof: IPayment.ProofStruct],
    [void],
    "nonpayable"
  >;

  coreVaultAddress: TypedContractMethod<[], [string], "view">;

  coreVaultAddressHash: TypedContractMethod<[], [string], "view">;

  custodianAddress: TypedContractMethod<[], [string], "view">;

  escrowedFunds: TypedContractMethod<[], [bigint], "view">;

  getAllowedDestinationAddresses: TypedContractMethod<[], [string[]], "view">;

  getCancelableTransferRequests: TypedContractMethod<
    [],
    [ICoreVaultManager.TransferRequestStructOutput[]],
    "view"
  >;

  getEmergencyPauseSenders: TypedContractMethod<[], [string[]], "view">;

  getEscrowByIndex: TypedContractMethod<
    [_index: BigNumberish],
    [ICoreVaultManager.EscrowStructOutput],
    "view"
  >;

  getEscrowByPreimageHash: TypedContractMethod<
    [_preimageHash: BytesLike],
    [ICoreVaultManager.EscrowStructOutput],
    "view"
  >;

  getEscrowsCount: TypedContractMethod<[], [bigint], "view">;

  getNonCancelableTransferRequests: TypedContractMethod<
    [],
    [ICoreVaultManager.TransferRequestStructOutput[]],
    "view"
  >;

  getPreimageHash: TypedContractMethod<
    [_index: BigNumberish],
    [string],
    "view"
  >;

  getPreimageHashesCount: TypedContractMethod<[], [bigint], "view">;

  getSettings: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _escrowEndTimeSeconds: bigint;
        _escrowAmount: bigint;
        _minimalAmount: bigint;
        _fee: bigint;
      }
    ],
    "view"
  >;

  getTriggeringAccounts: TypedContractMethod<[], [string[]], "view">;

  getUnprocessedEscrows: TypedContractMethod<
    [],
    [ICoreVaultManager.EscrowStructOutput[]],
    "view"
  >;

  getUnusedPreimageHashes: TypedContractMethod<[], [string[]], "view">;

  isDestinationAddressAllowed: TypedContractMethod<
    [_address: string],
    [boolean],
    "view"
  >;

  nextUnprocessedEscrowIndex: TypedContractMethod<[], [bigint], "view">;

  nextUnusedPreimageHashIndex: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  processEscrows: TypedContractMethod<
    [_maxCount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  requestTransferFromCoreVault: TypedContractMethod<
    [
      _destinationAddress: string,
      _paymentReference: BytesLike,
      _amount: BigNumberish,
      _cancelable: boolean
    ],
    [string],
    "nonpayable"
  >;

  totalRequestAmountWithFee: TypedContractMethod<[], [bigint], "view">;

  triggerInstructions: TypedContractMethod<[], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assetManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "availableFunds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelTransferRequestFromCoreVault"
  ): TypedContractMethod<[_destinationAddress: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmPayment"
  ): TypedContractMethod<[_proof: IPayment.ProofStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "coreVaultAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "coreVaultAddressHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "custodianAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "escrowedFunds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllowedDestinationAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCancelableTransferRequests"
  ): TypedContractMethod<
    [],
    [ICoreVaultManager.TransferRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmergencyPauseSenders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEscrowByIndex"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [ICoreVaultManager.EscrowStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEscrowByPreimageHash"
  ): TypedContractMethod<
    [_preimageHash: BytesLike],
    [ICoreVaultManager.EscrowStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEscrowsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonCancelableTransferRequests"
  ): TypedContractMethod<
    [],
    [ICoreVaultManager.TransferRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPreimageHash"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPreimageHashesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSettings"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _escrowEndTimeSeconds: bigint;
        _escrowAmount: bigint;
        _minimalAmount: bigint;
        _fee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTriggeringAccounts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUnprocessedEscrows"
  ): TypedContractMethod<[], [ICoreVaultManager.EscrowStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getUnusedPreimageHashes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isDestinationAddressAllowed"
  ): TypedContractMethod<[_address: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextUnprocessedEscrowIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextUnusedPreimageHashIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "processEscrows"
  ): TypedContractMethod<[_maxCount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "requestTransferFromCoreVault"
  ): TypedContractMethod<
    [
      _destinationAddress: string,
      _paymentReference: BytesLike,
      _amount: BigNumberish,
      _cancelable: boolean
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalRequestAmountWithFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "triggerInstructions"
  ): TypedContractMethod<[], [bigint], "nonpayable">;

  getEvent(
    key: "AllowedDestinationAddressAdded"
  ): TypedContractEvent<
    AllowedDestinationAddressAddedEvent.InputTuple,
    AllowedDestinationAddressAddedEvent.OutputTuple,
    AllowedDestinationAddressAddedEvent.OutputObject
  >;
  getEvent(
    key: "AllowedDestinationAddressRemoved"
  ): TypedContractEvent<
    AllowedDestinationAddressRemovedEvent.InputTuple,
    AllowedDestinationAddressRemovedEvent.OutputTuple,
    AllowedDestinationAddressRemovedEvent.OutputObject
  >;
  getEvent(
    key: "CustodianAddressUpdated"
  ): TypedContractEvent<
    CustodianAddressUpdatedEvent.InputTuple,
    CustodianAddressUpdatedEvent.OutputTuple,
    CustodianAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CustomInstructions"
  ): TypedContractEvent<
    CustomInstructionsEvent.InputTuple,
    CustomInstructionsEvent.OutputTuple,
    CustomInstructionsEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseSenderAdded"
  ): TypedContractEvent<
    EmergencyPauseSenderAddedEvent.InputTuple,
    EmergencyPauseSenderAddedEvent.OutputTuple,
    EmergencyPauseSenderAddedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseSenderRemoved"
  ): TypedContractEvent<
    EmergencyPauseSenderRemovedEvent.InputTuple,
    EmergencyPauseSenderRemovedEvent.OutputTuple,
    EmergencyPauseSenderRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowExpired"
  ): TypedContractEvent<
    EscrowExpiredEvent.InputTuple,
    EscrowExpiredEvent.OutputTuple,
    EscrowExpiredEvent.OutputObject
  >;
  getEvent(
    key: "EscrowFinished"
  ): TypedContractEvent<
    EscrowFinishedEvent.InputTuple,
    EscrowFinishedEvent.OutputTuple,
    EscrowFinishedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowInstructions"
  ): TypedContractEvent<
    EscrowInstructionsEvent.InputTuple,
    EscrowInstructionsEvent.OutputTuple,
    EscrowInstructionsEvent.OutputObject
  >;
  getEvent(
    key: "NotAllEscrowsProcessed"
  ): TypedContractEvent<
    NotAllEscrowsProcessedEvent.InputTuple,
    NotAllEscrowsProcessedEvent.OutputTuple,
    NotAllEscrowsProcessedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentConfirmed"
  ): TypedContractEvent<
    PaymentConfirmedEvent.InputTuple,
    PaymentConfirmedEvent.OutputTuple,
    PaymentConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentInstructions"
  ): TypedContractEvent<
    PaymentInstructionsEvent.InputTuple,
    PaymentInstructionsEvent.OutputTuple,
    PaymentInstructionsEvent.OutputObject
  >;
  getEvent(
    key: "PreimageHashAdded"
  ): TypedContractEvent<
    PreimageHashAddedEvent.InputTuple,
    PreimageHashAddedEvent.OutputTuple,
    PreimageHashAddedEvent.OutputObject
  >;
  getEvent(
    key: "SettingsUpdated"
  ): TypedContractEvent<
    SettingsUpdatedEvent.InputTuple,
    SettingsUpdatedEvent.OutputTuple,
    SettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRequestCanceled"
  ): TypedContractEvent<
    TransferRequestCanceledEvent.InputTuple,
    TransferRequestCanceledEvent.OutputTuple,
    TransferRequestCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TransferRequested"
  ): TypedContractEvent<
    TransferRequestedEvent.InputTuple,
    TransferRequestedEvent.OutputTuple,
    TransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "TriggeringAccountAdded"
  ): TypedContractEvent<
    TriggeringAccountAddedEvent.InputTuple,
    TriggeringAccountAddedEvent.OutputTuple,
    TriggeringAccountAddedEvent.OutputObject
  >;
  getEvent(
    key: "TriggeringAccountRemoved"
  ): TypedContractEvent<
    TriggeringAccountRemovedEvent.InputTuple,
    TriggeringAccountRemovedEvent.OutputTuple,
    TriggeringAccountRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UnusedPreimageHashRemoved"
  ): TypedContractEvent<
    UnusedPreimageHashRemovedEvent.InputTuple,
    UnusedPreimageHashRemovedEvent.OutputTuple,
    UnusedPreimageHashRemovedEvent.OutputObject
  >;

  filters: {
    "AllowedDestinationAddressAdded(string)": TypedContractEvent<
      AllowedDestinationAddressAddedEvent.InputTuple,
      AllowedDestinationAddressAddedEvent.OutputTuple,
      AllowedDestinationAddressAddedEvent.OutputObject
    >;
    AllowedDestinationAddressAdded: TypedContractEvent<
      AllowedDestinationAddressAddedEvent.InputTuple,
      AllowedDestinationAddressAddedEvent.OutputTuple,
      AllowedDestinationAddressAddedEvent.OutputObject
    >;

    "AllowedDestinationAddressRemoved(string)": TypedContractEvent<
      AllowedDestinationAddressRemovedEvent.InputTuple,
      AllowedDestinationAddressRemovedEvent.OutputTuple,
      AllowedDestinationAddressRemovedEvent.OutputObject
    >;
    AllowedDestinationAddressRemoved: TypedContractEvent<
      AllowedDestinationAddressRemovedEvent.InputTuple,
      AllowedDestinationAddressRemovedEvent.OutputTuple,
      AllowedDestinationAddressRemovedEvent.OutputObject
    >;

    "CustodianAddressUpdated(string)": TypedContractEvent<
      CustodianAddressUpdatedEvent.InputTuple,
      CustodianAddressUpdatedEvent.OutputTuple,
      CustodianAddressUpdatedEvent.OutputObject
    >;
    CustodianAddressUpdated: TypedContractEvent<
      CustodianAddressUpdatedEvent.InputTuple,
      CustodianAddressUpdatedEvent.OutputTuple,
      CustodianAddressUpdatedEvent.OutputObject
    >;

    "CustomInstructions(uint256,string,bytes32)": TypedContractEvent<
      CustomInstructionsEvent.InputTuple,
      CustomInstructionsEvent.OutputTuple,
      CustomInstructionsEvent.OutputObject
    >;
    CustomInstructions: TypedContractEvent<
      CustomInstructionsEvent.InputTuple,
      CustomInstructionsEvent.OutputTuple,
      CustomInstructionsEvent.OutputObject
    >;

    "EmergencyPauseSenderAdded(address)": TypedContractEvent<
      EmergencyPauseSenderAddedEvent.InputTuple,
      EmergencyPauseSenderAddedEvent.OutputTuple,
      EmergencyPauseSenderAddedEvent.OutputObject
    >;
    EmergencyPauseSenderAdded: TypedContractEvent<
      EmergencyPauseSenderAddedEvent.InputTuple,
      EmergencyPauseSenderAddedEvent.OutputTuple,
      EmergencyPauseSenderAddedEvent.OutputObject
    >;

    "EmergencyPauseSenderRemoved(address)": TypedContractEvent<
      EmergencyPauseSenderRemovedEvent.InputTuple,
      EmergencyPauseSenderRemovedEvent.OutputTuple,
      EmergencyPauseSenderRemovedEvent.OutputObject
    >;
    EmergencyPauseSenderRemoved: TypedContractEvent<
      EmergencyPauseSenderRemovedEvent.InputTuple,
      EmergencyPauseSenderRemovedEvent.OutputTuple,
      EmergencyPauseSenderRemovedEvent.OutputObject
    >;

    "EscrowExpired(bytes32,uint256)": TypedContractEvent<
      EscrowExpiredEvent.InputTuple,
      EscrowExpiredEvent.OutputTuple,
      EscrowExpiredEvent.OutputObject
    >;
    EscrowExpired: TypedContractEvent<
      EscrowExpiredEvent.InputTuple,
      EscrowExpiredEvent.OutputTuple,
      EscrowExpiredEvent.OutputObject
    >;

    "EscrowFinished(bytes32,uint256)": TypedContractEvent<
      EscrowFinishedEvent.InputTuple,
      EscrowFinishedEvent.OutputTuple,
      EscrowFinishedEvent.OutputObject
    >;
    EscrowFinished: TypedContractEvent<
      EscrowFinishedEvent.InputTuple,
      EscrowFinishedEvent.OutputTuple,
      EscrowFinishedEvent.OutputObject
    >;

    "EscrowInstructions(uint256,bytes32,string,string,uint256,uint256,uint256)": TypedContractEvent<
      EscrowInstructionsEvent.InputTuple,
      EscrowInstructionsEvent.OutputTuple,
      EscrowInstructionsEvent.OutputObject
    >;
    EscrowInstructions: TypedContractEvent<
      EscrowInstructionsEvent.InputTuple,
      EscrowInstructionsEvent.OutputTuple,
      EscrowInstructionsEvent.OutputObject
    >;

    "NotAllEscrowsProcessed()": TypedContractEvent<
      NotAllEscrowsProcessedEvent.InputTuple,
      NotAllEscrowsProcessedEvent.OutputTuple,
      NotAllEscrowsProcessedEvent.OutputObject
    >;
    NotAllEscrowsProcessed: TypedContractEvent<
      NotAllEscrowsProcessedEvent.InputTuple,
      NotAllEscrowsProcessedEvent.OutputTuple,
      NotAllEscrowsProcessedEvent.OutputObject
    >;

    "Paused()": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PaymentConfirmed(bytes32,bytes32,uint256)": TypedContractEvent<
      PaymentConfirmedEvent.InputTuple,
      PaymentConfirmedEvent.OutputTuple,
      PaymentConfirmedEvent.OutputObject
    >;
    PaymentConfirmed: TypedContractEvent<
      PaymentConfirmedEvent.InputTuple,
      PaymentConfirmedEvent.OutputTuple,
      PaymentConfirmedEvent.OutputObject
    >;

    "PaymentInstructions(uint256,string,string,uint256,uint256,bytes32)": TypedContractEvent<
      PaymentInstructionsEvent.InputTuple,
      PaymentInstructionsEvent.OutputTuple,
      PaymentInstructionsEvent.OutputObject
    >;
    PaymentInstructions: TypedContractEvent<
      PaymentInstructionsEvent.InputTuple,
      PaymentInstructionsEvent.OutputTuple,
      PaymentInstructionsEvent.OutputObject
    >;

    "PreimageHashAdded(bytes32)": TypedContractEvent<
      PreimageHashAddedEvent.InputTuple,
      PreimageHashAddedEvent.OutputTuple,
      PreimageHashAddedEvent.OutputObject
    >;
    PreimageHashAdded: TypedContractEvent<
      PreimageHashAddedEvent.InputTuple,
      PreimageHashAddedEvent.OutputTuple,
      PreimageHashAddedEvent.OutputObject
    >;

    "SettingsUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      SettingsUpdatedEvent.InputTuple,
      SettingsUpdatedEvent.OutputTuple,
      SettingsUpdatedEvent.OutputObject
    >;
    SettingsUpdated: TypedContractEvent<
      SettingsUpdatedEvent.InputTuple,
      SettingsUpdatedEvent.OutputTuple,
      SettingsUpdatedEvent.OutputObject
    >;

    "TransferRequestCanceled(string,bytes32,uint256)": TypedContractEvent<
      TransferRequestCanceledEvent.InputTuple,
      TransferRequestCanceledEvent.OutputTuple,
      TransferRequestCanceledEvent.OutputObject
    >;
    TransferRequestCanceled: TypedContractEvent<
      TransferRequestCanceledEvent.InputTuple,
      TransferRequestCanceledEvent.OutputTuple,
      TransferRequestCanceledEvent.OutputObject
    >;

    "TransferRequested(string,bytes32,uint256,bool)": TypedContractEvent<
      TransferRequestedEvent.InputTuple,
      TransferRequestedEvent.OutputTuple,
      TransferRequestedEvent.OutputObject
    >;
    TransferRequested: TypedContractEvent<
      TransferRequestedEvent.InputTuple,
      TransferRequestedEvent.OutputTuple,
      TransferRequestedEvent.OutputObject
    >;

    "TriggeringAccountAdded(address)": TypedContractEvent<
      TriggeringAccountAddedEvent.InputTuple,
      TriggeringAccountAddedEvent.OutputTuple,
      TriggeringAccountAddedEvent.OutputObject
    >;
    TriggeringAccountAdded: TypedContractEvent<
      TriggeringAccountAddedEvent.InputTuple,
      TriggeringAccountAddedEvent.OutputTuple,
      TriggeringAccountAddedEvent.OutputObject
    >;

    "TriggeringAccountRemoved(address)": TypedContractEvent<
      TriggeringAccountRemovedEvent.InputTuple,
      TriggeringAccountRemovedEvent.OutputTuple,
      TriggeringAccountRemovedEvent.OutputObject
    >;
    TriggeringAccountRemoved: TypedContractEvent<
      TriggeringAccountRemovedEvent.InputTuple,
      TriggeringAccountRemovedEvent.OutputTuple,
      TriggeringAccountRemovedEvent.OutputObject
    >;

    "Unpaused()": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UnusedPreimageHashRemoved(bytes32)": TypedContractEvent<
      UnusedPreimageHashRemovedEvent.InputTuple,
      UnusedPreimageHashRemovedEvent.OutputTuple,
      UnusedPreimageHashRemovedEvent.OutputObject
    >;
    UnusedPreimageHashRemoved: TypedContractEvent<
      UnusedPreimageHashRemovedEvent.InputTuple,
      UnusedPreimageHashRemovedEvent.OutputTuple,
      UnusedPreimageHashRemovedEvent.OutputObject
    >;
  };
}
