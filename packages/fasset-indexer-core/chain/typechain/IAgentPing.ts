/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IAgentPingInterface extends Interface {
  getFunction(
    nameOrSignature: "agentPing" | "agentPingResponse"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AgentPing" | "AgentPingResponse"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agentPing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agentPingResponse",
    values: [AddressLike, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "agentPing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agentPingResponse",
    data: BytesLike
  ): Result;
}

export namespace AgentPingEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    sender: AddressLike,
    query: BigNumberish
  ];
  export type OutputTuple = [agentVault: string, sender: string, query: bigint];
  export interface OutputObject {
    agentVault: string;
    sender: string;
    query: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentPingResponseEvent {
  export type InputTuple = [
    agentVault: AddressLike,
    owner: AddressLike,
    query: BigNumberish,
    response: string
  ];
  export type OutputTuple = [
    agentVault: string,
    owner: string,
    query: bigint,
    response: string
  ];
  export interface OutputObject {
    agentVault: string;
    owner: string;
    query: bigint;
    response: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAgentPing extends BaseContract {
  connect(runner?: ContractRunner | null): IAgentPing;
  waitForDeployment(): Promise<this>;

  interface: IAgentPingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentPing: TypedContractMethod<
    [_agentVault: AddressLike, _query: BigNumberish],
    [void],
    "nonpayable"
  >;

  agentPingResponse: TypedContractMethod<
    [_agentVault: AddressLike, _query: BigNumberish, _response: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentPing"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _query: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agentPingResponse"
  ): TypedContractMethod<
    [_agentVault: AddressLike, _query: BigNumberish, _response: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AgentPing"
  ): TypedContractEvent<
    AgentPingEvent.InputTuple,
    AgentPingEvent.OutputTuple,
    AgentPingEvent.OutputObject
  >;
  getEvent(
    key: "AgentPingResponse"
  ): TypedContractEvent<
    AgentPingResponseEvent.InputTuple,
    AgentPingResponseEvent.OutputTuple,
    AgentPingResponseEvent.OutputObject
  >;

  filters: {
    "AgentPing(address,address,uint256)": TypedContractEvent<
      AgentPingEvent.InputTuple,
      AgentPingEvent.OutputTuple,
      AgentPingEvent.OutputObject
    >;
    AgentPing: TypedContractEvent<
      AgentPingEvent.InputTuple,
      AgentPingEvent.OutputTuple,
      AgentPingEvent.OutputObject
    >;

    "AgentPingResponse(address,address,uint256,string)": TypedContractEvent<
      AgentPingResponseEvent.InputTuple,
      AgentPingResponseEvent.OutputTuple,
      AgentPingResponseEvent.OutputObject
    >;
    AgentPingResponse: TypedContractEvent<
      AgentPingResponseEvent.InputTuple,
      AgentPingResponseEvent.OutputTuple,
      AgentPingResponseEvent.OutputObject
    >;
  };
}
