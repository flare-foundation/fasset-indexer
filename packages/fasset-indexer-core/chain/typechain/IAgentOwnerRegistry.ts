/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IAgentOwnerRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAgentDescription"
      | "getAgentIconUrl"
      | "getAgentName"
      | "getAgentTermsOfUseUrl"
      | "getManagementAddress"
      | "getWorkAddress"
      | "isWhitelisted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentDataChanged"
      | "Whitelisted"
      | "WhitelistingRevoked"
      | "WorkAddressChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAgentDescription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentIconUrl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentName",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentTermsOfUseUrl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagementAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAgentDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentIconUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentTermsOfUseUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagementAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
}

export namespace AgentDataChangedEvent {
  export type InputTuple = [
    managementAddress: AddressLike,
    name: string,
    description: string,
    iconUrl: string,
    termsOfUseUrl: string
  ];
  export type OutputTuple = [
    managementAddress: string,
    name: string,
    description: string,
    iconUrl: string,
    termsOfUseUrl: string
  ];
  export interface OutputObject {
    managementAddress: string;
    name: string;
    description: string;
    iconUrl: string;
    termsOfUseUrl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedEvent {
  export type InputTuple = [value: AddressLike];
  export type OutputTuple = [value: string];
  export interface OutputObject {
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistingRevokedEvent {
  export type InputTuple = [value: AddressLike];
  export type OutputTuple = [value: string];
  export interface OutputObject {
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkAddressChangedEvent {
  export type InputTuple = [
    managementAddress: AddressLike,
    prevWorkAddress: AddressLike,
    workAddress: AddressLike
  ];
  export type OutputTuple = [
    managementAddress: string,
    prevWorkAddress: string,
    workAddress: string
  ];
  export interface OutputObject {
    managementAddress: string;
    prevWorkAddress: string;
    workAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAgentOwnerRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IAgentOwnerRegistry;
  waitForDeployment(): Promise<this>;

  interface: IAgentOwnerRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAgentDescription: TypedContractMethod<
    [_managementAddress: AddressLike],
    [string],
    "view"
  >;

  getAgentIconUrl: TypedContractMethod<
    [_managementAddress: AddressLike],
    [string],
    "view"
  >;

  getAgentName: TypedContractMethod<
    [_managementAddress: AddressLike],
    [string],
    "view"
  >;

  getAgentTermsOfUseUrl: TypedContractMethod<
    [_managementAddress: AddressLike],
    [string],
    "view"
  >;

  getManagementAddress: TypedContractMethod<
    [_workAddress: AddressLike],
    [string],
    "view"
  >;

  getWorkAddress: TypedContractMethod<
    [_managementAddress: AddressLike],
    [string],
    "view"
  >;

  isWhitelisted: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAgentDescription"
  ): TypedContractMethod<[_managementAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAgentIconUrl"
  ): TypedContractMethod<[_managementAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAgentName"
  ): TypedContractMethod<[_managementAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAgentTermsOfUseUrl"
  ): TypedContractMethod<[_managementAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getManagementAddress"
  ): TypedContractMethod<[_workAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWorkAddress"
  ): TypedContractMethod<[_managementAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  getEvent(
    key: "AgentDataChanged"
  ): TypedContractEvent<
    AgentDataChangedEvent.InputTuple,
    AgentDataChangedEvent.OutputTuple,
    AgentDataChangedEvent.OutputObject
  >;
  getEvent(
    key: "Whitelisted"
  ): TypedContractEvent<
    WhitelistedEvent.InputTuple,
    WhitelistedEvent.OutputTuple,
    WhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistingRevoked"
  ): TypedContractEvent<
    WhitelistingRevokedEvent.InputTuple,
    WhitelistingRevokedEvent.OutputTuple,
    WhitelistingRevokedEvent.OutputObject
  >;
  getEvent(
    key: "WorkAddressChanged"
  ): TypedContractEvent<
    WorkAddressChangedEvent.InputTuple,
    WorkAddressChangedEvent.OutputTuple,
    WorkAddressChangedEvent.OutputObject
  >;

  filters: {
    "AgentDataChanged(address,string,string,string,string)": TypedContractEvent<
      AgentDataChangedEvent.InputTuple,
      AgentDataChangedEvent.OutputTuple,
      AgentDataChangedEvent.OutputObject
    >;
    AgentDataChanged: TypedContractEvent<
      AgentDataChangedEvent.InputTuple,
      AgentDataChangedEvent.OutputTuple,
      AgentDataChangedEvent.OutputObject
    >;

    "Whitelisted(address)": TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
    Whitelisted: TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;

    "WhitelistingRevoked(address)": TypedContractEvent<
      WhitelistingRevokedEvent.InputTuple,
      WhitelistingRevokedEvent.OutputTuple,
      WhitelistingRevokedEvent.OutputObject
    >;
    WhitelistingRevoked: TypedContractEvent<
      WhitelistingRevokedEvent.InputTuple,
      WhitelistingRevokedEvent.OutputTuple,
      WhitelistingRevokedEvent.OutputObject
    >;

    "WorkAddressChanged(address,address,address)": TypedContractEvent<
      WorkAddressChangedEvent.InputTuple,
      WorkAddressChangedEvent.OutputTuple,
      WorkAddressChangedEvent.OutputObject
    >;
    WorkAddressChanged: TypedContractEvent<
      WorkAddressChangedEvent.InputTuple,
      WorkAddressChangedEvent.OutputTuple,
      WorkAddressChangedEvent.OutputObject
    >;
  };
}
